/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:41:49 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Locale;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
      cSVFormat1.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('4');
      CSVFormat cSVFormat2 = CSVFormat.newFormat('A');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat2.EXCEL.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('4');
      cSVFormat2.INFORMIX_UNLOAD.withEscape(character0);
      CSVFormat.Predefined.values();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat4.getQuoteCharacter();
      cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      CSVFormat cSVFormat5 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat5.withIgnoreHeaderCase(true);
      cSVFormat3.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat2.print((Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "9`,R&]9kwq~L:P*=0 |";
      cSVFormat0.format(objectArray0);
      cSVFormat0.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withQuote('X');
      CharBuffer charBuffer0 = CharBuffer.allocate(229);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charBuffer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("TDF");
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "TDF";
      stringArray0[1] = "TDF";
      stringArray0[2] = "TDF";
      stringArray0[3] = "TDF";
      stringArray0[4] = "TDF";
      stringArray0[5] = "TDF";
      stringArray0[6] = "TDF";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'TDF' in [TDF, TDF, TDF, TDF, TDF, TDF, TDF]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "1>ujgY)";
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("1>ujgY)");
      cSVFormat5.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("$VALUES");
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      cSVFormat0.format(objectArray0);
      CSVFormat.valueOf("Excel");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String string0 = "1>ujgY)";
      Object[] objectArray0 = new Object[6];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.TDF.print((Object) "1>ujgY)", (Appendable) pipedWriter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat.valueOf("Default");
      cSVFormat0.MYSQL.withNullString("Default");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      charBuffer0.flip();
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        cSVFormat0.MYSQL.println(charBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat1.println(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) "";
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('|');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('.');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat3.withRecordSeparator('^');
      Character character0 = new Character('O');
      CSVFormat cSVFormat4 = cSVFormat2.withQuote(character0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat4.format(objectArray0);
      cSVFormat0.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "@p";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "WbLQh0u`yh#!v<|}h^<";
      stringArray0[1] = "17u1#bY)";
      stringArray0[3] = "%4nV!`7} hj;Y";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('^');
      cSVFormat3.format(stringArray0);
      cSVFormat2.withSkipHeaderRecord();
      cSVFormat3.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('&');
      PipedReader pipedReader0 = new PipedReader(6);
      cSVFormat3.INFORMIX_UNLOAD_CSV.parse(pipedReader0);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('M');
      cSVFormat3.TDF.withDelimiter('M');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      cSVFormat5.MYSQL.withTrim(false);
      String string0 = "\n";
      CSVFormat cSVFormat6 = cSVFormat5.withNullString("\n");
      cSVFormat6.hashCode();
      // Undeclared exception!
      try { 
        cSVFormat4.withCommentMarker('M');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('M')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat0.INFORMIX_UNLOAD_CSV.print((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[4];
      CSVFormat cSVFormat1 = CSVFormat.newFormat('6');
      stringArray0[0] = "WbLQh0u`yh#!v<|}h^<";
      stringArray0[1] = "17u1jbY)";
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "17u1jbY)";
      cSVFormat0.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("17u1jbY)");
      cSVFormat0.printRecord(mockPrintWriter0, objectArray0);
      cSVFormat1.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[0];
      cSVFormat0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9iq:P$");
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.print((Object) null, (Appendable) mockPrintWriter0, true);
      CSVFormat.Predefined.values();
      CSVFormat.Predefined.values();
      cSVFormat0.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\u2028";
      cSVFormat0.withHeader(stringArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat0.getRecordSeparator();
      cSVFormat0.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat0.withSkipHeaderRecord();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "YG\"t9?EA7MP& tY[]i";
      cSVFormat0.format(stringArray0);
      cSVFormat1.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.RFC4180.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf('Z');
      cSVFormat1.withCommentMarker(character0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("l");
      cSVFormat0.println(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.EXCEL.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('j');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      Character character0 = new Character('x');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character0);
      cSVFormat5.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$VALUES");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces(false);
      Character character0 = Character.valueOf('W');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withNullString("$VALUES");
      cSVFormat3.INFORMIX_UNLOAD.withEscape('O');
      cSVFormat3.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat2.getHeaderComments();
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat0.withQuote('W');
      MockFile mockFile0 = new MockFile("$VALUES", "1n7V6)'LZ$j1<nY4m");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat5.MYSQL.print((File) mockFile0, charset0);
      cSVFormat1.getQuoteMode();
      cSVFormat4.withRecordSeparator("m^6}7Y");
      // Undeclared exception!
      try { 
        cSVFormat4.withQuote('W');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('W')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[H$>I");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[H$>I");
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      char char0 = 'o';
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('o');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('E');
      cSVFormat4.withCommentMarker(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat4.withHeader(resultSet0);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("[H$>I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.[H$>I
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      cSVFormat2.EXCEL.withTrim();
      cSVFormat2.TDF.hashCode();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      // Undeclared exception!
      try { 
        cSVFormat5.withDelimiter('j');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('j')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('3');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.getHeader();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat4 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = CSVFormat.newFormat('S');
      Object[] objectArray0 = new Object[6];
      cSVFormat2.withTrailingDelimiter(false);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat3;
      cSVFormat0.format(objectArray0);
      cSVFormat1.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "[";
      stringArray0[1] = "org.apache.commons.csv.CSVParser$2";
      stringArray0[2] = "G5I!pXd/QG`y";
      stringArray0[3] = "'A";
      stringArray0[4] = "r";
      stringArray0[0] = "%-Y/[77lj7QEnnw\"vkR";
      stringArray0[6] = "m3oz&%4$;?E$NZ";
      stringArray0[7] = "%7sIQ^Tkn NhNyIt/x";
      stringArray0[8] = "9iq:P$";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.print((Object) null, (Appendable) mockPrintWriter0, true);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreEmptyLines();
      cSVFormat1.TDF.withIgnoreEmptyLines();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.equals(cSVFormat0);
      cSVFormat2.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('j');
      cSVFormat0.getRecordSeparator();
      cSVFormat1.withTrim(false);
      cSVFormat0.format(objectArray0);
      cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(14);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[3] = (Object) stringWriter0;
      cSVFormat1.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat2 = CSVFormat.newFormat('r');
      cSVFormat2.println(stringWriter0);
      cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\r\n";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter("l");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "l");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      QuoteMode quoteMode1 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode1);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('h');
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('h');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) quoteMode0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) quoteMode0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) quoteMode0;
      cSVFormat4.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.QuoteMode@0000000007hjava.lang.Object@0000000008horg.apache.commons.csv.CSVFormat@0000000001horg.apache.commons.csv.CSVFormat@0000000009horg.apache.commons.csv.CSVFormat@0000000002horg.apache.commons.csv.CSVFormat@0000000003horg.apache.commons.csv.QuoteMode@0000000007hjava.lang.Object@0000000010horg.apache.commons.csv.QuoteMode@0000000007");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) quoteMode0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.getIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) charBuffer0, 3231, 17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat2 = cSVFormat_Predefined0.getFormat();
      String[] stringArray0 = Locale.getISOCountries();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.getRecordSeparator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      cSVFormat0.format(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker('L');
      cSVFormat3.getRecordSeparator();
      cSVFormat1.format(objectArray0);
      cSVFormat4.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      String[] stringArray0 = new String[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      stringArray0[0] = ".ww";
      stringArray0[1] = "p";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat4.getHeader();
      cSVFormat3.getRecordSeparator();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord(false);
      cSVFormat6.withCommentMarker('f');
      CSVFormat cSVFormat7 = cSVFormat5.withTrim();
      cSVFormat7.MYSQL.withTrailingDelimiter(false);
      cSVFormat4.getRecordSeparator();
      cSVFormat7.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(14);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) stringWriter0;
      cSVFormat1.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat2 = CSVFormat.newFormat('r');
      cSVFormat2.println(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.withQuote('_');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "YG\"t9?EA7MP& tY[]i";
      stringArray0[1] = "r";
      stringArray0[2] = "|[1n9T}|Ly5?,";
      stringArray0[4] = "org.apache.commons.csv.QuoteMode";
      stringArray0[5] = "@XwZUtyb$6m3";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      cSVFormat3.toString();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat3.withRecordSeparator('o');
      CSVFormat cSVFormat6 = cSVFormat3.withTrim();
      cSVFormat6.withDelimiter('x');
      cSVFormat5.format(stringArray0);
      cSVFormat2.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ")UYrOnps";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      char char0 = '5';
      cSVFormat1.withRecordSeparator('5');
      int int0 = (-3437);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-3437));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -3437
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      char char0 = ']';
      CSVFormat cSVFormat0 = CSVFormat.newFormat(']');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      cSVFormat1.withRecordSeparator((String) null);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("r");
      cSVFormat3.withIgnoreHeaderCase();
      cSVFormat2.equals("r");
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("LVUy_K~QY+i\"n5k");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      cSVFormat4.RFC4180.print((Appendable) stringBuffer0);
      CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('V');
      cSVFormat1.getCommentMarker();
      cSVFormat5.getQuoteMode();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat2.withRecordSeparator('V');
      cSVFormat0.EXCEL.withRecordSeparator("");
      cSVFormat1.withEscape('A');
      cSVFormat4.INFORMIX_UNLOAD_CSV.withTrim();
      cSVFormat4.withCommentMarker('k');
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter("", false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat3.withCommentMarker('l');
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord();
      CSVFormat cSVFormat7 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat2.withFirstRecordAsHeader();
      cSVFormat5.isNullStringSet();
      cSVFormat4.hashCode();
      cSVFormat3.equals(cSVFormat2);
      cSVFormat7.getQuoteMode();
      cSVFormat6.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      cSVFormat1.format(objectArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('>');
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('L');
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('4');
      CSVFormat cSVFormat6 = cSVFormat5.withTrim(true);
      cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat1.withRecordSeparator('+');
      CSVFormat cSVFormat7 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat7.getQuoteMode();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RFC4180");
      Character character0 = new Character('_');
      cSVFormat6.withQuote(character0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.ExtendedBufferedReader");
      Object[] objectArray1 = new Object[0];
      mockPrintStream0.printf("N\tN\tN\tN\tN\tN\tN\tN\tN", objectArray1);
      // Undeclared exception!
      try { 
        Charset.forName("l");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // l
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(12);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrim(false);
      cSVFormat1.withQuote('_');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "YG\"t9?EA7MP& tY[]i";
      stringArray0[1] = "r";
      stringArray0[2] = "|[1n9T}|Ly5?,";
      stringArray0[3] = "Header:";
      stringArray0[4] = "org.apache.commons.csv.QuoteMode";
      stringArray0[5] = "@XwZUtyb$6m3";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      cSVFormat3.toString();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat3.withRecordSeparator('o');
      CSVFormat cSVFormat6 = cSVFormat3.withTrim();
      cSVFormat6.withDelimiter('x');
      cSVFormat5.format(stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('e');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IgN&5(VOd1T");
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) resultSet0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withCommentMarker('|');
      CSVFormat cSVFormat5 = cSVFormat3.EXCEL.withCommentMarker('e');
      cSVFormat2.getHeader();
      Long long0 = new Long(439L);
      cSVFormat3.equals(long0);
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat1.withNullString("l");
      Character character1 = Character.valueOf('e');
      cSVFormat0.withEscape(character1);
      cSVFormat5.withIgnoreEmptyLines();
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter0 = new StringWriter(6);
      StringWriter stringWriter1 = stringWriter0.append('\"');
      cSVFormat0.print((Object) cSVFormat6, (Appendable) stringWriter1, true);
      cSVFormat6.withAllowMissingColumnNames(false);
      cSVFormat4.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "RFC4180";
      cSVFormat1.withRecordSeparator('>');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('g');
      cSVFormat2.withTrim();
      CSVFormat cSVFormat3 = CSVFormat.valueOf("RFC4180");
      cSVFormat3.withSkipHeaderRecord(true);
      // Undeclared exception!
      try { 
        cSVFormat3.print((Object) "", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat1.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat4.withCommentMarker('i');
      CSVFormat cSVFormat5 = CSVFormat.MYSQL;
      CSVFormat cSVFormat6 = cSVFormat3.withTrim(false);
      cSVFormat4.withSkipHeaderRecord(true);
      CSVFormat cSVFormat7 = cSVFormat6.withRecordSeparator('i');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(line ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) "(line ";
      objectArray0[2] = (Object) cSVFormat7;
      objectArray0[3] = (Object) cSVFormat7;
      objectArray0[4] = (Object) cSVFormat6;
      cSVFormat1.printRecord(mockPrintWriter0, objectArray0);
      cSVFormat2.getQuoteMode();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat7.withRecordSeparator("format");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "No quotes mode set but no escape character is set";
      stringArray0[1] = "tsLyCOm9kLXi";
      stringArray0[2] = "]-f5Yrc )";
      stringArray0[3] = "l";
      stringArray0[4] = "";
      stringArray0[5] = "XFB~bh+acUMK?o,";
      stringArray0[6] = "(line ";
      cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('1');
      cSVFormat2.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat2.format(stringArray0);
      cSVFormat2.withRecordSeparator('\\');
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat0.DEFAULT.withEscape('F');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("&w}(nr");
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      Character character1 = new Character(')');
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(character1);
      cSVFormat4.DEFAULT.withQuote(')');
      CSVFormat.newFormat('U');
      cSVFormat0.withFirstRecordAsHeader();
      MockFileWriter mockFileWriter0 = new MockFileWriter("r");
      cSVFormat5.print((Object) cSVFormat1, (Appendable) mockFileWriter0, false);
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat4.getHeaderComments();
      cSVFormat6.withRecordSeparator("&w}(nr");
      cSVFormat2.getRecordSeparator();
      cSVFormat5.getHeader();
      cSVFormat5.toString();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(1238);
      cSVFormat0.DEFAULT.print((Appendable) charBuffer0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "WbLQh0u`yh#!v<|}h^<";
      stringArray0[1] = "17u1jbY)";
      stringArray0[2] = "%4nV!`7} hj;Y";
      stringArray0[3] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat1.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat2.withTrim();
      CSVFormat cSVFormat5 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat6 = cSVFormat_Predefined0.getFormat();
      Locale.getISOCountries();
      CSVFormat cSVFormat7 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "17u1jbY)";
      objectArray0[1] = (Object) cSVFormat6;
      objectArray0[2] = (Object) "%4nV!`7} hj;Y";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "%4nV!`7} hj;Y";
      cSVFormat0.format(objectArray0);
      cSVFormat5.withIgnoreHeaderCase(false);
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat3.withHeader(class0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("17u1jbY)");
      cSVFormat4.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      cSVFormat1.format(objectArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "N\tN\tN\tN\tN\tN\tN\tN\tN";
      stringArray0[1] = "RFC4180";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('>');
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('g');
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat5.MYSQL.withCommentMarker('4');
      CSVFormat cSVFormat6 = cSVFormat4.withTrim(true);
      cSVFormat6.withSkipHeaderRecord(true);
      cSVFormat1.EXCEL.withRecordSeparator('g');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("mgI!2mw`");
      cSVFormat1.printRecord(mockPrintWriter0, stringArray0);
      cSVFormat2.getQuoteMode();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("{D33'YhB|igN");
      Character character0 = Character.valueOf('g');
      CSVFormat cSVFormat7 = cSVFormat3.withQuote(character0);
      cSVFormat7.printRecord(mockPrintWriter1, stringArray0);
      cSVFormat7.printRecord(mockPrintWriter0, stringArray0);
      cSVFormat7.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "_27ujY)";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker('l');
      CSVFormat cSVFormat5 = CSVFormat.MYSQL;
      cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat4.withTrailingDelimiter();
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreSurroundingSpaces();
      cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat2.withFirstRecordAsHeader();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat8 = cSVFormat6.withHeader(resultSet0);
      Object[] objectArray0 = new Object[0];
      cSVFormat8.withHeaderComments(objectArray0);
      cSVFormat4.isNullStringSet();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat9 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat9.hashCode();
      cSVFormat3.equals((Object) null);
      cSVFormat7.getQuoteMode();
      MockFile mockFile0 = new MockFile((File) null, ")>u9EWUx6&Jm|<FzK");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("Z8nD[6aFA");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Z8nD[6aFA
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat.newFormat('P');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.TDF.withIgnoreEmptyLines();
      cSVFormat2.INFORMIX_UNLOAD.format(objectArray0);
      cSVFormat2.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet0);
      cSVFormat3.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      cSVFormat0.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      cSVFormat1.format(objectArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "RFC4180";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.withRecordSeparator('>');
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('g');
      cSVFormat3.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat1.EXCEL.withRecordSeparator('g');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("mgI!2mw`");
      cSVFormat1.printRecord(mockPrintWriter0, stringArray0);
      cSVFormat2.getQuoteMode();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withRecordSeparator("nCj`+Wm94J&M/{EDR~");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "17u1jbY)";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "WbLQh0u`yh#!v<|}h^<";
      stringArray0[1] = "17u1jbY)";
      stringArray0[2] = "%4nV!`7} hj;Y";
      stringArray0[3] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat1.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat5 = cSVFormat_Predefined0.getFormat();
      Locale.getISOCountries();
      CSVFormat cSVFormat6 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "17u1jbY)";
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) "%4nV!`7} hj;Y";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "%4nV!`7} hj;Y";
      cSVFormat0.format(objectArray0);
      cSVFormat4.withIgnoreHeaderCase(false);
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat3.withHeader(class0);
      cSVFormat6.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('3');
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) cSVFormat0, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat1.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat5 = cSVFormat2.withCommentMarker('W');
      CSVFormat cSVFormat6 = CSVFormat.MYSQL;
      cSVFormat5.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat8 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat8.withSkipHeaderRecord();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.isNullStringSet();
      cSVFormat5.hashCode();
      cSVFormat7.withCommentMarker('y');
      cSVFormat0.equals(cSVFormat5);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('0');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Character character0 = cSVFormat0.getQuoteCharacter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("7hamm;6_YQ<Sg?2{+]");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "7hamm;6_YQ<Sg?2{+]";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintStream0.print((-239L));
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      cSVFormat0.printRecord(printStream0, objectArray0);
      cSVFormat0.TDF.withFirstRecordAsHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat1.EXCEL.withEscape(character0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7hamm;6_YQ<Sg?2{+]");
      cSVFormat0.withQuote(character0);
      cSVFormat0.withEscape(character0);
      CSVFormat.newFormat('9');
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = Character.valueOf('=');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat2.withDelimiter('J');
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat1.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('i');
      CSVFormat cSVFormat6 = CSVFormat.MYSQL;
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat8 = cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat4.withSkipHeaderRecord();
      CSVFormat cSVFormat9 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat7.isNullStringSet();
      cSVFormat8.hashCode();
      CSVFormat cSVFormat10 = cSVFormat3.withCommentMarker('i');
      cSVFormat10.equals(cSVFormat2);
      cSVFormat5.withTrailingDelimiter();
      cSVFormat9.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("N\tN\tjava.lang.Object@0000000002\tN\torg.apache.commons.csv.CSVFormat@0000000003\tN\tN\tN\torg.apache.commons.csv.CSVFormat@0000000003");
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = object0;
      objectArray1[1] = (Object) cSVFormat1;
      objectArray1[2] = (Object) cSVFormat0;
      objectArray1[3] = (Object) "N\tN\tjava.lang.Object@0000000002\tN\torg.apache.commons.csv.CSVFormat@0000000003\tN\tN\tN\torg.apache.commons.csv.CSVFormat@0000000003";
      Object object2 = new Object();
      objectArray1[4] = object2;
      objectArray1[5] = (Object) mockPrintWriter0;
      cSVFormat0.printRecord(mockPrintWriter0, objectArray1);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('#');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('#');
      cSVFormat0.withFirstRecordAsHeader();
      cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat2.withTrailingDelimiter(true);
      CharBuffer charBuffer0 = CharBuffer.allocate(65);
      cSVFormat2.withRecordSeparator('u');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charBuffer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat0.DEFAULT.withQuote((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("K3");
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker((Character) null);
      cSVFormat4.withIgnoreSurroundingSpaces(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      cSVFormat_Predefined0.getFormat();
      String[] stringArray0 = Locale.getISOCountries();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.getRecordSeparator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l");
      cSVFormat2.format(stringArray0);
      cSVFormat5.withIgnoreHeaderCase(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat6 = cSVFormat0.withHeader(class0);
      cSVFormat0.format(stringArray0);
      cSVFormat6.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character.valueOf('0');
      cSVFormat0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      cSVFormat2.isNullStringSet();
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator((String) null);
      cSVFormat3.hashCode();
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker('T');
      Float float0 = new Float(3164.75F);
      cSVFormat1.equals(float0);
      cSVFormat4.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      String[] stringArray0 = new String[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('r');
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat4.withIgnoreSurroundingSpaces();
      // Undeclared exception!
      try { 
        cSVFormat4.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('o');
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "a}ER";
      stringArray0[1] = "RecordSeparator=<";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      cSVFormat3.format(stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("a}ER");
      cSVFormat4.printRecord(mockPrintWriter0, stringArray0);
      CSVFormat cSVFormat5 = cSVFormat1.withDelimiter('P');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat5.withHeader(class0);
      Character character0 = new Character('P');
      cSVFormat1.withCommentMarker(character0);
      cSVFormat2.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.toString();
      cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('t');
      cSVFormat4.INFORMIX_UNLOAD.withSkipHeaderRecord();
      cSVFormat3.withNullString(") EOF reached before encapsulated token finished");
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat3.withCommentMarker('t');
      cSVFormat5.toString();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("Delimiter=<,> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<,> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(':');
      cSVFormat1.toString();
      cSVFormat1.withCommentMarker(':');
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat1.hashCode();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('l');
      CSVFormat cSVFormat6 = CSVFormat.MYSQL;
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat7.withSkipHeaderRecord();
      CSVFormat cSVFormat8 = cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat5.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat7;
      objectArray0[2] = (Object) cSVFormat6;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat8;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat0.isNullStringSet();
      int int0 = new Character('l');
      CSVFormat cSVFormat9 = cSVFormat3.withRecordSeparator('l');
      CSVFormat cSVFormat10 = cSVFormat9.withIgnoreHeaderCase();
      cSVFormat8.equals(cSVFormat10);
      cSVFormat9.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Locale.getISOLanguages();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("reader");
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "N";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) resultSet0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) resultSet0;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "xN";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('t');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("org.apache.commons.csv.CSVFormat");
      cSVFormat4.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('t');
      cSVFormat3.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat");
      cSVFormat1.printRecord(mockPrintWriter0, objectArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat5.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      cSVFormat0.format(objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[3] = (Object) "N\tN\tN\tN\tN\tN\tN\tN\tN";
      cSVFormat0.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withNullString("");
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat1 = cSVFormat_Predefined1.getFormat();
      Locale.getISOCountries();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat1.getRecordSeparator();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "\r\n";
      cSVFormat0.format(objectArray0);
      cSVFormat0.getRecordSeparator();
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) rowSetMetaDataImpl1;
      objectArray1[1] = (Object) cSVFormat1;
      objectArray1[2] = (Object) cSVFormat0;
      objectArray1[3] = (Object) "\r\n";
      try { 
        rowSetMetaDataImpl1.setPrecision(1861, (-338));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid precision value. Cannot be less than zero
         //
         verifyException("javax.sql.rowset.RowSetMetaDataImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('I');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("The quoteChar cannot be a line break");
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      cSVFormat_Predefined0.getFormat();
      String[] stringArray0 = Locale.getISOCountries();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord();
      cSVFormat6.getRecordSeparator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v*");
      CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator("\"vjK6lvtITl~/,1]");
      cSVFormat7.format(stringArray0);
      cSVFormat1.withIgnoreHeaderCase(false);
      MockFile mockFile0 = new MockFile("", "I@i%^FFu");
      CSVFormat cSVFormat8 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat8.TDF.withEscape('I');
      Character.valueOf('D');
      Character.valueOf('+');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat5.withEscape((Character) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('B');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString(") EOF reached before encapsulated token finished");
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('t');
      Object[] objectArray0 = new Object[8];
      objectArray0[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat4;
      objectArray0[7] = (Object) cSVFormat5;
      cSVFormat3.MYSQL.withTrim();
      cSVFormat4.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" z7");
      cSVFormat2.printRecord(mockPrintWriter0, objectArray0);
      cSVFormat4.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat3.withDelimiter('H');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat6 = cSVFormat2.withCommentMarker('t');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat3;
      cSVFormat1.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,");
      cSVFormat5.printRecord(mockPrintWriter0, objectArray0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat7 = cSVFormat6.withHeader(class0);
      cSVFormat7.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = Character.valueOf(',');
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("The quoteChar cannot be a line break");
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat5 = cSVFormat_Predefined0.getFormat();
      Locale.getISOCountries();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat5.getRecordSeparator();
      Object[] objectArray0 = new Object[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[]");
      objectArray0[0] = (Object) rowSetMetaDataImpl1;
      objectArray0[1] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[]";
      objectArray0[2] = (Object) cSVFormat6;
      objectArray0[3] = (Object) rowSetMetaDataImpl1;
      cSVFormat5.format(objectArray0);
      cSVFormat2.withIgnoreHeaderCase(false);
      MockFile mockFile0 = new MockFile("", "R");
      cSVFormat3.withIgnoreEmptyLines();
      Character.valueOf('t');
      Character character0 = Character.valueOf('t');
      // Undeclared exception!
      try { 
        cSVFormat3.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('t')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      Character character0 = new Character('f');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
      cSVFormat2.withQuote('Q');
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat2.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat7;
      objectArray0[4] = (Object) cSVFormat6;
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat3.isNullStringSet();
      cSVFormat5.hashCode();
      Integer integer0 = new Integer(1377);
      cSVFormat1.equals(integer0);
      cSVFormat7.withCommentMarker('f');
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat1.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('i');
      CSVFormat cSVFormat6 = CSVFormat.MYSQL;
      cSVFormat4.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat1.withHeader((String[]) null);
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreEmptyLines();
      CSVFormat cSVFormat9 = cSVFormat8.withRecordSeparator('l');
      CSVFormat cSVFormat10 = cSVFormat3.withTrim();
      cSVFormat10.withTrim();
      CSVFormat cSVFormat11 = cSVFormat9.withSkipHeaderRecord(false);
      CSVFormat cSVFormat12 = cSVFormat11.withDelimiter('/');
      // Undeclared exception!
      try { 
        cSVFormat12.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "^{@27c.\\Nby";
      MockFile mockFile0 = new MockFile("^{@27c.Nby");
      mockFile0.setWritable(true);
      Charset charset0 = Charset.defaultCharset();
      cSVFormat1.INFORMIX_UNLOAD.print((File) mockFile0, charset0);
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withSkipHeaderRecord();
      cSVFormat4.INFORMIX_UNLOAD_CSV.hashCode();
      cSVFormat4.EXCEL.withIgnoreEmptyLines();
      cSVFormat0.equals((Object) null);
      CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
      cSVFormat5.RFC4180.withTrim();
      cSVFormat5.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat0.withTrailingDelimiter();
      cSVFormat6.withDelimiter('A');
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("^{@27c.Nby");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.^{@27c.Nby
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('l');
      CSVFormat cSVFormat5 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat0.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.println(charArrayWriter0);
      cSVFormat6.withIgnoreHeaderCase(true);
      cSVFormat1.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3281);
      CSVFormat cSVFormat7 = cSVFormat6.withEscape('z');
      cSVFormat7.parse(pipedReader0);
      cSVFormat4.withEscape('G');
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      cSVFormat1.hashCode();
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat5 = cSVFormat_Predefined0.getFormat();
      cSVFormat5.withDelimiter(']');
      CSVFormat cSVFormat6 = cSVFormat2.withRecordSeparator('j');
      cSVFormat6.withEscape('G');
      cSVFormat4.withEscape(':');
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("5.,!");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat5.withRecordSeparator('O');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(class0);
      cSVFormat6.withTrim();
      cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat4.withDelimiter('I');
      cSVFormat6.format(stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("a}ER");
      cSVFormat0.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat3.withCommentMarker('l');
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord();
      CSVFormat cSVFormat7 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat2.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat5.isNullStringSet();
      cSVFormat4.hashCode();
      cSVFormat3.equals(cSVFormat2);
      cSVFormat7.withCommentMarker('2');
      Character character0 = Character.valueOf('/');
      cSVFormat6.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat1.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('i');
      CSVFormat cSVFormat6 = CSVFormat.MYSQL;
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat8 = cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat4.withSkipHeaderRecord();
      cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat9 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[0];
      cSVFormat9.withHeaderComments(objectArray0);
      cSVFormat7.isNullStringSet();
      cSVFormat8.hashCode();
      CSVFormat cSVFormat10 = cSVFormat3.withCommentMarker('i');
      cSVFormat10.equals(cSVFormat2);
      cSVFormat10.withCommentMarker('l');
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.getIgnoreHeaderCase();
      cSVFormat1.getCommentMarker();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000006";
      stringArray0[1] = "org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000006";
      stringArray0[2] = "org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000006";
      stringArray0[3] = "org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000006";
      stringArray0[4] = "org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000006";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000006' in [org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000006, org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000006, org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000006, org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000006, org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000006]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withTrim(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "RecordSeparator=<";
      char char0 = 'g';
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('g');
      stringArray0[1] = "od 30o. JDQ*XpDk";
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('g');
      cSVFormat3.withFirstRecordAsHeader();
      cSVFormat0.withHeaderComments(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [RecordSeparator=<, od 30o. JDQ*XpDk, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      CSVFormat cSVFormat4 = cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat0.withDelimiter('t');
      cSVFormat5.EXCEL.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withCommentMarker('t');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat6.withRecordSeparator('t');
      cSVFormat6.withTrim();
      cSVFormat6.withSkipHeaderRecord(true);
      cSVFormat4.withDelimiter('t');
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreHeaderCase(true);
      cSVFormat7.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000003");
      CSVFormat cSVFormat8 = CSVFormat.MYSQL;
      cSVFormat4.getDelimiter();
      Character character0 = Character.valueOf(',');
      cSVFormat5.withCommentMarker(character0);
      cSVFormat2.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      cSVFormat1.hashCode();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withCommentMarker('l');
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      Character character0 = new Character('l');
      CSVFormat cSVFormat5 = cSVFormat0.withCommentMarker(character0);
      cSVFormat5.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat3.println(charArrayWriter0);
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat0.withFirstRecordAsHeader();
      Object object0 = new Object();
      cSVFormat6.withTrailingDelimiter(true);
      cSVFormat3.isNullStringSet();
      cSVFormat3.hashCode();
      cSVFormat2.equals(object0);
      CSVFormat cSVFormat7 = cSVFormat6.withTrailingDelimiter();
      cSVFormat7.withCommentMarker('w');
      cSVFormat0.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('l');
      CSVFormat cSVFormat5 = CSVFormat.MYSQL;
      CSVFormat cSVFormat6 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat0.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.println(charArrayWriter0);
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreHeaderCase(true);
      cSVFormat1.withFirstRecordAsHeader();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat6;
      objectArray0[1] = (Object) cSVFormat8;
      objectArray0[2] = (Object) cSVFormat5;
      cSVFormat3.withHeaderComments(objectArray0);
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat6;
      CSVFormat cSVFormat9 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat3.isNullStringSet();
      cSVFormat6.hashCode();
      cSVFormat5.equals(cSVFormat1);
      CSVFormat cSVFormat10 = cSVFormat9.withCommentMarker('w');
      cSVFormat10.getIgnoreSurroundingSpaces();
      cSVFormat4.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "RecordSeparator=<";
      CSVFormat cSVFormat2 = cSVFormat0.TDF.withRecordSeparator('g');
      stringArray0[1] = "od 30o. JDQ*XpDk";
      stringArray0[2] = "a}ER";
      CSVFormat cSVFormat3 = cSVFormat1.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat1.isNullStringSet();
      cSVFormat1.hashCode();
      Short short0 = new Short((short)35);
      cSVFormat2.equals(short0);
      cSVFormat3.withCommentMarker('w');
      cSVFormat4.getIgnoreSurroundingSpaces();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('l');
      CSVFormat cSVFormat5 = CSVFormat.MYSQL;
      CSVFormat cSVFormat6 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat0.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.println(charArrayWriter0);
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreHeaderCase(true);
      cSVFormat1.withFirstRecordAsHeader();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat9 = cSVFormat1.withQuoteMode(quoteMode0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The comment start character and the delimiter cannot be the same ('";
      CSVFormat cSVFormat10 = cSVFormat9.withHeader(stringArray0);
      cSVFormat5.withRecordSeparator('l');
      cSVFormat5.withTrim();
      cSVFormat8.withSkipHeaderRecord(true);
      cSVFormat8.withDelimiter('l');
      cSVFormat10.format(stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~o\"305|euN}p:N%6t");
      CSVFormat cSVFormat11 = CSVFormat.MYSQL;
      cSVFormat6.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat5 = cSVFormat4.EXCEL.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withCommentMarker('t');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat2.format(objectArray0);
      cSVFormat3.withTrailingDelimiter(false);
      Character character0 = new Character('t');
      CSVFormat cSVFormat6 = cSVFormat3.withEscape(character0);
      cSVFormat6.isNullStringSet();
      cSVFormat2.hashCode();
      CSVFormat cSVFormat7 = cSVFormat5.withDelimiter('t');
      cSVFormat7.equals("org.apache.commons.csv.CSVFormat@0000000003");
      cSVFormat4.withCommentMarker(',');
      cSVFormat5.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(707);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      CSVFormat.Predefined.valueOf("MySQL");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      Character character0 = Character.valueOf('E');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('E');
      cSVFormat5.printRecord(stringWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(707);
      cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      cSVFormat2.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('m');
      CSVFormat cSVFormat4 = CSVFormat.newFormat('F');
      cSVFormat4.MYSQL.withEscape('?');
      cSVFormat3.printRecord(stringWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('V');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.withFirstRecordAsHeader();
      cSVFormat2.withTrailingDelimiter(false);
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      // Undeclared exception!
      try { 
        cSVFormat2.print((Object) cSVFormat0, (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) quoteMode0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.equals(cSVFormat0);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      cSVFormat0.print((Appendable) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "RecordSeparator=<";
      CSVFormat cSVFormat2 = cSVFormat0.TDF.withRecordSeparator('g');
      stringArray0[1] = "od 30o. JDQ*XpDk";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "od 30o. JDQ*XpDk";
      objectArray0[4] = (Object) "od 30o. JDQ*XpDk";
      cSVFormat1.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RecordSeparator=<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(", values=");
      PrintStream printStream0 = mockPrintStream0.append('7');
      cSVFormat3.printRecord(printStream0, objectArray0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(class0);
      cSVFormat4.print((Appendable) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.TDF.withTrailingDelimiter(false);
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.EXCEL.withHeader(resultSet0);
      cSVFormat0.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "RecordSeparator=<";
      cSVFormat0.getHeader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat2 = cSVFormat_Predefined0.getFormat();
      cSVFormat2.getTrim();
      cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.getDelimiter();
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat.newFormat(',');
      cSVFormat1.getNullString();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('_');
      String string0 = "a}ER";
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat2.withHeader((String[]) null);
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('_');
      CSVFormat cSVFormat4 = cSVFormat1.withTrim();
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator('d');
      cSVFormat5.withSkipHeaderRecord(false);
      cSVFormat4.withDelimiter('o');
      Character character0 = Character.valueOf('1');
      CSVFormat cSVFormat6 = cSVFormat5.withQuote(character0);
      // Undeclared exception!
      try { 
        cSVFormat6.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.TDF.withTrailingDelimiter(false);
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
      cSVFormat0.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char char0 = 'X';
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('X');
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withSkipHeaderRecord(true);
      cSVFormat2.RFC4180.withRecordSeparator("QuoteChar=<");
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.EXCEL.withTrim(true);
      Object[] objectArray0 = new Object[4];
      cSVFormat0.withFirstRecordAsHeader();
      cSVFormat5.RFC4180.withSkipHeaderRecord(true);
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) null;
      CSVFormat.newFormat('X');
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      cSVFormat5.INFORMIX_UNLOAD_CSV.format(objectArray0);
      cSVFormat4.MYSQL.withCommentMarker('X');
      CSVFormat cSVFormat6 = cSVFormat4.withTrim(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat6.withHeader(resultSet0);
      cSVFormat1.withAllowMissingColumnNames();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("jU}/VWK`?Z\":x:7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.jU}/VWK`?Z\":x:7
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('l');
      CSVFormat cSVFormat5 = CSVFormat.MYSQL;
      CSVFormat cSVFormat6 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat0.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.println(charArrayWriter0);
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreHeaderCase(true);
      cSVFormat1.withFirstRecordAsHeader();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat6;
      objectArray0[1] = (Object) cSVFormat8;
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat6;
      CSVFormat cSVFormat9 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat3.isNullStringSet();
      cSVFormat6.hashCode();
      cSVFormat5.equals(cSVFormat1);
      CSVFormat cSVFormat10 = cSVFormat9.withCommentMarker('w');
      cSVFormat10.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat0.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.toString();
      cSVFormat3.withIgnoreHeaderCase(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Object object0 = new Object();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat7 = cSVFormat6.withEscape('E');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[]";
      cSVFormat7.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat0.hashCode();
      cSVFormat2.withQuote('_');
      cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat2.println(charArrayWriter0);
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat6 = cSVFormat2.withFirstRecordAsHeader();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat7 = cSVFormat6.withHeaderComments(objectArray0);
      cSVFormat6.isNullStringSet();
      cSVFormat5.hashCode();
      cSVFormat1.equals(cSVFormat4);
      cSVFormat7.withCommentMarker('L');
      cSVFormat3.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('A');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      String string0 = "";
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((String[]) null);
      cSVFormat4.withRecordSeparator('r');
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      CSVFormat cSVFormat7 = cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat6.withDelimiter('r');
      // Undeclared exception!
      try { 
        cSVFormat7.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      MockFile mockFile0 = new MockFile("");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat0.INFORMIX_UNLOAD_CSV.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('');
      cSVFormat2.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      cSVFormat4.hashCode();
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat6 = cSVFormat_Predefined0.getFormat();
      cSVFormat2.withDelimiter('Q');
      CSVFormat cSVFormat7 = cSVFormat6.withRecordSeparator('>');
      cSVFormat5.withIgnoreEmptyLines();
      String[] stringArray0 = Locale.getISOCountries();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat6.getRecordSeparator();
      cSVFormat1.format(stringArray0);
      cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat0.withTrailingDelimiter();
      cSVFormat7.withQuote((Character) null);
      MockFile mockFile0 = new MockFile("", "");
      try { 
        cSVFormat4.print((File) mockFile0, (Charset) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.RFC4180.hashCode();
      cSVFormat2.withQuote('_');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat1.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat1.println(charArrayWriter0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat4.withHeader((String[]) null);
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator('o');
      CSVFormat cSVFormat6 = cSVFormat4.withTrim();
      CSVFormat cSVFormat7 = cSVFormat5.withSkipHeaderRecord(false);
      cSVFormat6.withDelimiter('_');
      Object[] objectArray0 = new Object[0];
      cSVFormat7.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o");
      CSVFormat cSVFormat8 = CSVFormat.MYSQL;
      cSVFormat2.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      Character character0 = new Character('0');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1157);
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter(true);
      PipedWriter pipedWriter1 = new PipedWriter();
      PipedReader pipedReader1 = new PipedReader(pipedWriter1, 1157);
      cSVFormat4.parse(pipedReader1);
      cSVFormat5.withEscape('0');
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat1.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile("path");
      File file0 = MockFile.createTempFile("?'qp;rtnvlv?nM?~A|f", "", (File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.print(file0, charset0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char char0 = 'F';
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('F');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        cSVFormat4.withEscape('F');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('F')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat1.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat1.println(charArrayWriter0);
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat3.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) resultSet0;
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat5;
      objectArray0[0] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[8] = object0;
      CSVFormat cSVFormat6 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat0.isNullStringSet();
      cSVFormat6.hashCode();
      cSVFormat1.equals(objectArray0[0]);
      cSVFormat3.withCommentMarker('w');
      cSVFormat6.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('^');
      cSVFormat0.println(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat5 = cSVFormat4.EXCEL.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat6 = cSVFormat4.withTrailingDelimiter(true);
      cSVFormat6.withTrim(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat4;
      cSVFormat0.INFORMIX_UNLOAD_CSV.format(objectArray0);
      CSVFormat cSVFormat7 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat8 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat2.getHeaderComments();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat9 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat5.getRecordSeparator();
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat9;
      cSVFormat8.format(objectArray1);
      cSVFormat6.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = new Character('0');
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('X');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('0');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) cSVFormat4;
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) cSVFormat4;
      cSVFormat4.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      boolean boolean0 = true;
      Character character0 = new Character('0');
      cSVFormat0.toString();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat1 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.withDelimiter(']');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(']');
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator(']');
      cSVFormat4.withIgnoreEmptyLines();
      cSVFormat3.getHeaderComments();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.getRecordSeparator();
      // Undeclared exception!
      try { 
        cSVFormat4.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(false);
      cSVFormat2.withQuote('_');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat2.println(charArrayWriter0);
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat6 = cSVFormat5.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat6;
      cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat4.isNullStringSet();
      cSVFormat0.hashCode();
      Float float0 = new Float(2043.544673386093);
      cSVFormat5.equals(float0);
      CSVFormat cSVFormat7 = CSVFormat.TDF;
      cSVFormat7.withCommentMarker('v');
      cSVFormat6.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      cSVFormat1.EXCEL.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[1];
      cSVFormat0.INFORMIX_UNLOAD_CSV.format(objectArray0);
      cSVFormat1.getTrim();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      cSVFormat4.withSkipHeaderRecord(false);
      cSVFormat3.hashCode();
      cSVFormat2.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord();
      String[] stringArray0 = new String[1];
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat5.println(charArrayWriter0);
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat7 = cSVFormat6.withFirstRecordAsHeader();
      cSVFormat3.withHeaderComments(stringArray0);
      cSVFormat4.isNullStringSet();
      cSVFormat7.hashCode();
      cSVFormat1.equals(cSVFormat4);
      cSVFormat1.withCommentMarker('_');
      cSVFormat4.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat5.withQuote('');
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat8 = cSVFormat5.withIgnoreHeaderCase(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("The comment start and the escape character cannot be the same ('");
      CSVFormat cSVFormat9 = cSVFormat7.withTrim(false);
      cSVFormat9.println(mockPrintStream0);
      cSVFormat8.withFirstRecordAsHeader();
      cSVFormat1.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat10 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat2.isNullStringSet();
      cSVFormat6.hashCode();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      cSVFormat1.equals(cSVFormat_Predefined0);
      CSVFormat cSVFormat11 = cSVFormat9.withEscape(character0);
      cSVFormat11.withCommentMarker('a');
      cSVFormat6.toString();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withCommentMarker('l');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat4.withQuote('+');
      cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase(false);
      cSVFormat1.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat6.isNullStringSet();
      CSVFormat cSVFormat7 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat7.hashCode();
      cSVFormat5.equals(cSVFormat6);
      cSVFormat3.withCommentMarker('+');
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.withNullString("DiUdPD");
      CSVFormat cSVFormat4 = cSVFormat2.withQuote('j');
      CSVFormat cSVFormat5 = cSVFormat1.withTrim(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DiUdPD";
      CSVFormat cSVFormat6 = cSVFormat4.withHeader(stringArray0);
      cSVFormat6.format(stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DiUdPD\r\nDiUdPD");
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat5.withQuoteMode(quoteMode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = CSVFormat.newFormat('\\');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat2.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      // Undeclared exception!
      try { 
        cSVFormat3.withCommentMarker('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('c');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('c')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      cSVFormat0.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord();
      Character character0 = Character.valueOf('c');
      cSVFormat1.TDF.withQuote(character0);
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.getHeader();
      cSVFormat0.getTrim();
      MockFile mockFile0 = new MockFile("NON_NUMERIC", "m%;dMGvS5K2_+yfc");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord();
      Character character0 = Character.valueOf('d');
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withTrim(true);
      cSVFormat3.INFORMIX_UNLOAD.withTrim();
      cSVFormat0.getHeader();
      cSVFormat0.getTrim();
      cSVFormat2.getTrim();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat0.getDelimiter();
      cSVFormat1.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("$VALUES");
      char char0 = 'z';
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('M');
      CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('=');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat3;
      cSVFormat1.format(objectArray0);
      cSVFormat4.getTrim();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000003";
      stringArray0[2] = "org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000003";
      // Undeclared exception!
      try { 
        cSVFormat4.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000003' in [$VALUES, org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000003, org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000003]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('F');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("$VALUES");
      cSVFormat0.withQuote('z');
      CSVFormat cSVFormat4 = cSVFormat2.withDelimiter('z');
      cSVFormat1.format(objectArray0);
      cSVFormat2.getTrim();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "$VALUES";
      stringArray0[2] = "";
      cSVFormat1.getTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(false);
      cSVFormat5.withIgnoreEmptyLines();
      CSVFormat cSVFormat6 = cSVFormat3.withTrailingDelimiter(false);
      cSVFormat6.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      CSVFormat cSVFormat4 = cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat0.withDelimiter('t');
      cSVFormat5.EXCEL.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      cSVFormat4.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withCommentMarker('t');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The header contains a duplicate entry: '");
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) rowSetMetaDataImpl0;
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) cSVFormat1;
      cSVFormat3.printRecord(mockPrintWriter0, objectArray1);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      Character character0 = Character.valueOf('t');
      cSVFormat2.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord();
      Character.valueOf('d');
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat2.MYSQL.withTrim(true);
      cSVFormat0.getHeader();
      cSVFormat0.getTrim();
      cSVFormat2.getTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat3.RFC4180.withTrim();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Wr$|:%A`Zzzd", true);
      // Undeclared exception!
      try { 
        cSVFormat5.printRecord(mockFileWriter0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char char0 = 'p';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.withTrailingDelimiter(false);
      StringWriter stringWriter0 = new StringWriter(43);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) stringBuffer0, 86, 43);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 43
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(4);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = objectArray0[1];
      cSVFormat0.format(objectArray0);
      Float float0 = new Float(750.6F);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat1.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character.valueOf('~');
      Character character0 = new Character('r');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat5.withQuote('>');
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat8 = cSVFormat2.withIgnoreHeaderCase(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("The comment start and the escape character cannot be the same ('");
      cSVFormat7.println(mockPrintStream0);
      CSVFormat cSVFormat9 = cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat10 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat7;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) cSVFormat10;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat9;
      objectArray0[5] = (Object) cSVFormat8;
      objectArray0[6] = (Object) character0;
      objectArray0[7] = (Object) cSVFormat6;
      objectArray0[8] = (Object) cSVFormat4;
      cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat6.isNullStringSet();
      cSVFormat0.hashCode();
      cSVFormat3.equals(objectArray0[7]);
      cSVFormat9.withCommentMarker('>');
      cSVFormat10.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withTrim();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter(';');
      cSVFormat2.withNullString("DiUdPD");
      cSVFormat2.withQuote('j');
      cSVFormat4.withTrim(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "DiUdPD";
      stringArray0[1] = "DiUdPD";
      stringArray0[2] = "DiUdPD";
      stringArray0[3] = "DiUdPD";
      stringArray0[4] = "DiUdPD";
      stringArray0[5] = "DiUdPD";
      stringArray0[6] = "DiUdPD";
      stringArray0[7] = "DiUdPD";
      // Undeclared exception!
      try { 
        cSVFormat3.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'DiUdPD' in [DiUdPD, DiUdPD, DiUdPD, DiUdPD, DiUdPD, DiUdPD, DiUdPD, DiUdPD]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('[');
      cSVFormat0.withNullString("DiUdPD");
      cSVFormat0.withQuote('[');
      cSVFormat3.withTrim(false);
      String[] stringArray0 = new String[0];
      cSVFormat1.withHeader(stringArray0);
      cSVFormat2.format(stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gx`7f'h_Mb");
      Class<QuoteMode> class0 = QuoteMode.class;
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("gx`7f'h_Mb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.gx`7f'h_Mb
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withFirstRecordAsHeader();
      cSVFormat1.toString();
      Object[] objectArray0 = new Object[6];
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('~');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat1.RFC4180.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat3.withAllowMissingColumnNames();
      cSVFormat2.withQuote('~');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "M";
      stringArray0[1] = "mHx7k>>Lc+RP-oc1";
      cSVFormat3.MYSQL.withHeader(stringArray0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat3.withSkipHeaderRecord();
      // Undeclared exception!
      try { 
        Charset.forName("The header contains a duplicate name: \"");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // The header contains a duplicate name: \"
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.withHeader((ResultSet) null);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat5 = cSVFormat2.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.isNullStringSet();
      cSVFormat5.hashCode();
      cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("<#", "Parameter '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.print((Object) quoteMode0, (Appendable) mockPrintStream0, false);
      cSVFormat5.getNullString();
      cSVFormat4.getAllowMissingColumnNames();
      cSVFormat2.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('~');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat2.withQuote('~');
      CSVFormat cSVFormat7 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat8 = cSVFormat4.withSkipHeaderRecord();
      CSVFormat cSVFormat9 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat10 = cSVFormat9.withSkipHeaderRecord();
      CSVFormat cSVFormat11 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat12 = cSVFormat5.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat6;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat10;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVFormat6;
      cSVFormat10.withHeaderComments(objectArray0);
      cSVFormat8.isNullStringSet();
      cSVFormat10.hashCode();
      cSVFormat7.equals(cSVFormat12);
      cSVFormat11.withCommentMarker('~');
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('1');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat2.format(objectArray0);
      cSVFormat3.getTrim();
      Float float0 = new Float((-1.0F));
      cSVFormat3.equals(objectArray0[0]);
      cSVFormat1.withTrailingDelimiter(true);
      cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat0.withHeaderComments(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      cSVFormat1.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      cSVFormat0.withDelimiter('-');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      cSVFormat1.format(objectArray0);
      cSVFormat2.getTrim();
      cSVFormat1.equals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      cSVFormat3.withTrailingDelimiter(true);
      cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat1.withHeaderComments(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      cSVFormat2.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "RecordSeparator=<";
      cSVFormat2.TDF.withRecordSeparator('g');
      stringArray0[1] = "od 30o. JDQ*XpDk";
      stringArray0[2] = "a}ER";
      cSVFormat1.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat0.RFC4180.withHeader(stringArray0);
      stringArray0[3] = "";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('o');
      cSVFormat5.withTrim();
      CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat3.withDelimiter('g');
      cSVFormat1.format(stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RecordSeparator=<");
      cSVFormat0.printRecord(mockPrintWriter0, stringArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat6.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      cSVFormat3.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('-');
      Character character0 = new Character('-');
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('-')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withQuote('');
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat0.INFORMIX_UNLOAD_CSV.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat5.DEFAULT.withSkipHeaderRecord(true);
      cSVFormat2.EXCEL.withDelimiter('%');
      cSVFormat2.format(objectArray0);
      cSVFormat6.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat6.withEscape('t');
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('D');
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord();
      CSVFormat cSVFormat7 = cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat9 = cSVFormat8.withAllowMissingColumnNames();
      CSVFormat cSVFormat10 = cSVFormat9.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat10;
      objectArray0[7] = (Object) cSVFormat4;
      objectArray0[8] = (Object) cSVFormat6;
      cSVFormat8.withHeaderComments(objectArray0);
      cSVFormat1.isNullStringSet();
      cSVFormat8.hashCode();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat8.equals(quoteMode0);
      cSVFormat2.withCommentMarker('\u008C');
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "RecordSeparator=<";
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      char char0 = 't';
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('Q');
      cSVFormat1.withNullString("*O$[AO");
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      // Undeclared exception!
      try { 
        cSVFormat4.withQuote('Q');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('Q')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = CSVFormat.newFormat('\\');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = Character.valueOf('9');
      cSVFormat0.INFORMIX_UNLOAD.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat6 = cSVFormat5.withCommentMarker('p');
      CSVFormat cSVFormat7 = cSVFormat5.withIgnoreEmptyLines();
      cSVFormat7.getHeaderComments();
      cSVFormat6.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat6.getRecordSeparator();
      // Undeclared exception!
      try { 
        cSVFormat4.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('~');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat1.RFC4180.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat3.withAllowMissingColumnNames();
      cSVFormat2.withQuote('~');
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat3.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreHeaderCase(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("The comment start and the escape character cannot be the same ('");
      cSVFormat1.INFORMIX_UNLOAD_CSV.println(mockPrintStream0);
      CSVFormat cSVFormat6 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat4;
      CSVFormat cSVFormat8 = cSVFormat7.withHeaderComments(objectArray0);
      cSVFormat2.isNullStringSet();
      cSVFormat6.hashCode();
      cSVFormat5.equals(cSVFormat2);
      CSVFormat cSVFormat9 = cSVFormat8.withCommentMarker('.');
      cSVFormat9.withIgnoreSurroundingSpaces(true);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      char char0 = '~';
      Character character0 = Character.valueOf('~');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat2.MYSQL.withIgnoreEmptyLines(false);
      cSVFormat3.EXCEL.withFirstRecordAsHeader();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(resultSet0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat6;
      cSVFormat6.withHeaderComments(objectArray0);
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat7 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.csv.CSVFormat@0000000010,org.apache.commons.csv.CSVFormat@0000000009";
      stringArray0[1] = "format";
      stringArray0[2] = "format";
      stringArray0[3] = "format";
      stringArray0[4] = "format";
      stringArray0[5] = "format";
      stringArray0[6] = "format";
      stringArray0[7] = "org.apache.commons.csv.CSVFormat@0000000010,org.apache.commons.csv.CSVFormat@0000000009";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'format' in [org.apache.commons.csv.CSVFormat@0000000010,org.apache.commons.csv.CSVFormat@0000000009, format, format, format, format, format, format, org.apache.commons.csv.CSVFormat@0000000010,org.apache.commons.csv.CSVFormat@0000000009]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      cSVFormat0.EXCEL.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[8];
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "1>ujgY)");
      // Undeclared exception!
      try { 
        cSVFormat0.EXCEL.print((Object) cSVFormat_Predefined0, (Appendable) charBuffer0, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(707);
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('F');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("$VALUES");
      cSVFormat0.withQuote('z');
      cSVFormat2.withDelimiter('z');
      cSVFormat1.format(objectArray0);
      cSVFormat2.getTrim();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "$VALUES";
      stringArray0[2] = "";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      cSVFormat4.equals(cSVFormat3);
      cSVFormat3.withSkipHeaderRecord(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat1.hashCode();
      // Undeclared exception!
      try { 
        cSVFormat4.withCommentMarker('F');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('F')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      String string0 = "RecordSeparator=<";
      char char0 = 'g';
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('g');
      cSVFormat3.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "a}ER";
      stringArray0[1] = "od 30o. JDQ*XpDk";
      stringArray0[2] = "od 30o. JDQ*XpDk";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "RecordSeparator=<";
      // Undeclared exception!
      try { 
        cSVFormat3.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'od 30o. JDQ*XpDk' in [a}ER, od 30o. JDQ*XpDk, od 30o. JDQ*XpDk, , , RecordSeparator=<]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat4.getTrim();
      cSVFormat2.equals(cSVFormat4);
      cSVFormat1.isNullStringSet();
      CSVFormat cSVFormat6 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat0.equals(cSVFormat3);
      cSVFormat5.withNullString("J|5(+Rp");
      PipedReader pipedReader0 = new PipedReader(34);
      cSVFormat6.parse(pipedReader0);
      cSVFormat2.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "RecordSeparator=<";
      CSVFormat cSVFormat3 = CSVFormat.newFormat('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat3.hashCode();
      cSVFormat4.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat6 = cSVFormat5.withCommentMarker('l');
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat7.getHeaderComments();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat6.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat8 = cSVFormat3.withNullString("");
      cSVFormat8.getRecordSeparator();
      // Undeclared exception!
      try { 
        cSVFormat2.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      char char0 = '\\';
      char char1 = 'g';
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('V');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "od 30o. JDQ*XpDk";
      stringArray0[1] = "')";
      stringArray0[2] = "od 30o. JDQ*XpDk";
      // Undeclared exception!
      try { 
        cSVFormat3.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'od 30o. JDQ*XpDk' in [od 30o. JDQ*XpDk, '), od 30o. JDQ*XpDk]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[2];
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat2.withIgnoreSurroundingSpaces();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(resultSet0);
      cSVFormat4.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('~');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat2.MYSQL.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat7 = cSVFormat3.EXCEL.withFirstRecordAsHeader();
      cSVFormat7.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
      cSVFormat5.isNullStringSet();
      cSVFormat3.hashCode();
      cSVFormat6.withAllowMissingColumnNames();
      CSVFormat cSVFormat8 = CSVFormat.EXCEL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start character and the quoteChar cannot be the same ('");
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat0.INFORMIX_UNLOAD_CSV.print(path0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.MYSQL.withSkipHeaderRecord();
      String[] stringArray0 = new String[0];
      Character character0 = Character.valueOf('5');
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD.withCommentMarker(character0);
      cSVFormat2.INFORMIX_UNLOAD_CSV.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      cSVFormat3.isQuoteCharacterSet();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat4.EXCEL.withTrailingDelimiter();
      cSVFormat2.getCommentMarker();
      cSVFormat3.withSkipHeaderRecord();
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        Charset.forName("UT{MA1T2");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // UT{MA1T2
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = 'Q';
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withRecordSeparator('Q');
      CSVFormat cSVFormat2 = CSVFormat.newFormat('Q');
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat3.getQuoteMode();
      cSVFormat1.getTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat0.TDF.withAllowMissingColumnNames(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat4.TDF.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat1.withNullString(")#[.dZaHm)\"V");
      cSVFormat5.withIgnoreEmptyLines(false);
      cSVFormat0.equals(cSVFormat2);
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat6.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase(false);
      cSVFormat2.withQuoteMode((QuoteMode) null);
      cSVFormat5.MYSQL.withCommentMarker('Q');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferedWriter bufferedWriter0 = null;
      try {
        bufferedWriter0 = new BufferedWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD.withQuote('');
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      CSVFormat cSVFormat6 = cSVFormat5.withTrim(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat0.INFORMIX_UNLOAD_CSV.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000005");
      cSVFormat2.printRecord(mockPrintWriter0, objectArray0);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat0.withHeader(class0);
      cSVFormat6.println(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(707);
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('F');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("$VALUES");
      CSVFormat cSVFormat4 = cSVFormat0.withQuote('z');
      cSVFormat2.withDelimiter('z');
      cSVFormat1.format(objectArray0);
      cSVFormat2.getTrim();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "$VALUES";
      stringArray0[2] = "";
      CSVFormat cSVFormat5 = cSVFormat2.withHeader(stringArray0);
      cSVFormat5.equals(cSVFormat3);
      CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat3.hashCode();
      cSVFormat4.equals(cSVFormat5);
      cSVFormat6.withCommentMarker('k');
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "RecordSeparator=<";
      cSVFormat2.TDF.withRecordSeparator('g');
      stringArray0[1] = "od 30o. JDQ*XpDk";
      stringArray0[2] = "a}ER";
      cSVFormat1.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat0.RFC4180.withHeader(stringArray0);
      stringArray0[3] = "";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('o');
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      CSVFormat cSVFormat7 = cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat3.withDelimiter('g');
      cSVFormat1.format(stringArray0);
      cSVFormat0.getTrim();
      cSVFormat7.equals("od 30o. JDQ*XpDk");
      cSVFormat3.isNullStringSet();
      cSVFormat4.hashCode();
      CSVFormat cSVFormat8 = cSVFormat3.withNullString("a}ER");
      cSVFormat1.equals(cSVFormat8);
      cSVFormat6.withCommentMarker('L');
      cSVFormat3.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('~');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat2.MYSQL.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat7 = cSVFormat3.EXCEL.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat6;
      cSVFormat7.DEFAULT.withHeaderComments(objectArray0);
      cSVFormat5.isNullStringSet();
      cSVFormat3.hashCode();
      CSVFormat cSVFormat8 = cSVFormat6.withAllowMissingColumnNames();
      CSVFormat cSVFormat9 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("<#", "The comment start character and the quoteChar cannot be the same ('");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      cSVFormat9.print(objectArray0[2], (Appendable) mockPrintStream0, false);
      cSVFormat8.getNullString();
      cSVFormat1.getAllowMissingColumnNames();
      Character character1 = Character.valueOf('Y');
      cSVFormat4.withCommentMarker(character1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord();
      Character character0 = Character.valueOf('d');
      cSVFormat1.TDF.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(true);
      cSVFormat2.getHeader();
      cSVFormat0.getTrim();
      cSVFormat0.getTrim();
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat0.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('~');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat2.MYSQL.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat7 = cSVFormat3.EXCEL.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat6;
      cSVFormat7.DEFAULT.withHeaderComments(objectArray0);
      cSVFormat5.isNullStringSet();
      cSVFormat3.hashCode();
      CSVFormat cSVFormat8 = cSVFormat6.withAllowMissingColumnNames();
      CSVFormat cSVFormat9 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("<#", "The comment start character and the quoteChar cannot be the same ('");
      cSVFormat5.MYSQL.withRecordSeparator((String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      cSVFormat9.print(objectArray0[2], (Appendable) mockPrintStream0, false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat8.withHeader(class0);
      cSVFormat1.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.DEFAULT.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat3.isEscapeCharacterSet();
      short short0 = (short)2344;
      Short short1 = new Short((short)2344);
      cSVFormat4.withRecordSeparator('_');
      MockFile mockFile0 = new MockFile("");
      CSVFormat cSVFormat5 = cSVFormat1.withFirstRecordAsHeader();
      boolean boolean0 = true;
      cSVFormat5.withAllowMissingColumnNames(true);
      String string0 = "s$Db#r";
      MockFile mockFile1 = new MockFile(mockFile0, "s$Db#r");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "_zc");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // _zc
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.DEFAULT.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreEmptyLines(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "format";
      CSVFormat cSVFormat7 = cSVFormat6.withHeader(stringArray0);
      CSVFormat cSVFormat8 = cSVFormat7.withFirstRecordAsHeader();
      cSVFormat3.withHeaderComments(stringArray0);
      cSVFormat4.isNullStringSet();
      cSVFormat8.hashCode();
      cSVFormat2.equals(cSVFormat4);
      cSVFormat1.withCommentMarker('\u008C');
      cSVFormat8.isEscapeCharacterSet();
      cSVFormat5.equals(cSVFormat7);
      cSVFormat6.withEscape('\u008C');
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.hashCode();
      Character character0 = new Character('+');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat1.withSkipHeaderRecord(false);
      // Undeclared exception!
      try { 
        cSVFormat1.withDelimiter('+');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('+')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      // Undeclared exception!
      try { 
        cSVFormat1.withDelimiter('D');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('D')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withQuote('');
      cSVFormat4.withTrim(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat0.INFORMIX_UNLOAD_CSV.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000004");
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat0.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat4.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      cSVFormat5.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('t');
      cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat7 = cSVFormat5.withQuote('9');
      cSVFormat7.withTrim(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat6;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      objectArray0[5] = (Object) cSVFormat7;
      objectArray0[6] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      objectArray0[7] = (Object) null;
      cSVFormat6.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Wxob:W7/2ei");
      // Undeclared exception!
      try { 
        cSVFormat7.printRecord(mockPrintWriter0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat2.toString();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('t');
      cSVFormat4.EXCEL.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      cSVFormat1.TDF.withQuote('t');
      cSVFormat5.format(objectArray0);
      cSVFormat5.withSkipHeaderRecord(true);
      CSVFormat cSVFormat6 = cSVFormat2.withDelimiter('t');
      cSVFormat6.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces(true);
      cSVFormat4.format(objectArray0);
      cSVFormat5.getTrim();
      cSVFormat2.equals(cSVFormat5);
      cSVFormat1.isNullStringSet();
      CSVFormat cSVFormat7 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat7.hashCode();
      cSVFormat0.equals(cSVFormat3);
      cSVFormat4.withCommentMarker('S');
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreEmptyLines();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat0.getRecordSeparator();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "\n";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      objectArray0[5] = (Object) "\n";
      objectArray0[6] = (Object) rowSetMetaDataImpl0;
      objectArray0[7] = (Object) rowSetMetaDataImpl0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.getRecordSeparator();
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = CSVFormat.newFormat('\\');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(true);
      cSVFormat5.withCommentMarker('l');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat4;
      cSVFormat0.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The header contains a duplicate entry: '");
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) cSVFormat4;
      objectArray1[2] = (Object) cSVFormat1;
      objectArray1[3] = (Object) rowSetMetaDataImpl0;
      cSVFormat1.printRecord(mockPrintWriter0, objectArray1);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat5 = cSVFormat4.EXCEL.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat6 = cSVFormat5.INFORMIX_UNLOAD.withQuote('');
      cSVFormat6.withTrim(true);
      cSVFormat6.withIgnoreEmptyLines();
      CSVFormat cSVFormat7 = cSVFormat2.withRecordSeparator('Y');
      cSVFormat7.getHeaderComments();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.getRecordSeparator();
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.DEFAULT.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.withQuote('_');
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      String[] stringArray0 = new String[1];
      cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat3.INFORMIX_UNLOAD.withIgnoreHeaderCase(false);
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat$1");
      cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = new Character('$');
      Character character1 = Character.valueOf('L');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character1);
      cSVFormat2.getTrailingDelimiter();
      cSVFormat0.withRecordSeparator("org.apache.commons.csv.CSVFormat$1");
      cSVFormat0.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "RecordSeparator=<";
      cSVFormat2.TDF.withRecordSeparator('g');
      stringArray0[1] = "od 30o. JDQ*XpDk";
      stringArray0[2] = "a}ER";
      cSVFormat1.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      cSVFormat0.RFC4180.withHeader(stringArray0);
      stringArray0[3] = "";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('o');
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.TDF.format(stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "od 30o. JDQ*XpDk");
      cSVFormat5.format(stringArray0);
      cSVFormat5.INFORMIX_UNLOAD.format(stringArray0);
      MockFile mockFile0 = new MockFile("RecordSeparator=<");
      // Undeclared exception!
      try { 
        Charset.forName("od 30o. JDQ*XpDk");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // od 30o. JDQ*XpDk
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(true);
      Character character0 = Character.valueOf('#');
      cSVFormat5.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.hashCode();
      Character character0 = new Character('+');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      char[] charArray0 = new char[4];
      charArray0[2] = '+';
      charArray0[1] = '+';
      cSVFormat1.MYSQL.toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat1.hashCode();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker('l');
      cSVFormat5.withRecordSeparator("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      CSVFormat cSVFormat7 = cSVFormat2.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) resultSet0;
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      cSVFormat7.INFORMIX_UNLOAD.withHeaderComments(objectArray0);
      cSVFormat4.getHeaderComments();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat6.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat7.getRecordSeparator();
      Object[] objectArray1 = new Object[6];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) cSVFormat6;
      objectArray1[2] = (Object) cSVFormat1;
      objectArray1[3] = (Object) cSVFormat6;
      objectArray1[4] = (Object) null;
      objectArray1[5] = (Object) resultSet0;
      cSVFormat1.format(objectArray1);
      cSVFormat2.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('~');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat2.MYSQL.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat7 = cSVFormat3.EXCEL.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat6;
      cSVFormat7.DEFAULT.withHeaderComments(objectArray0);
      cSVFormat5.isNullStringSet();
      cSVFormat3.hashCode();
      cSVFormat7.equals(cSVFormat5);
      cSVFormat6.withCommentMarker(';');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat5.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat1.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[16];
      objectArray0[0] = (Object) "YG\"t9?EA7MP& tY[]i";
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(707);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat1.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('y');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat2.MYSQL.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat7 = cSVFormat3.EXCEL.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat6;
      cSVFormat7.DEFAULT.withHeaderComments(objectArray0);
      cSVFormat5.isNullStringSet();
      cSVFormat3.hashCode();
      cSVFormat7.equals(cSVFormat5);
      cSVFormat6.withCommentMarker(';');
      cSVFormat2.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD.withQuote('');
      CSVFormat cSVFormat6 = cSVFormat5.withTrim(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat0.INFORMIX_UNLOAD_CSV.format(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat6.DEFAULT.withSkipHeaderRecord(true);
      CSVFormat cSVFormat8 = cSVFormat3.EXCEL.withDelimiter('%');
      cSVFormat3.format(objectArray0);
      cSVFormat1.getTrim();
      cSVFormat2.equals(cSVFormat0);
      cSVFormat7.isNullStringSet();
      cSVFormat4.hashCode();
      cSVFormat1.equals(cSVFormat8);
      cSVFormat4.withCommentMarker('S');
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      PipedWriter pipedWriter0 = new PipedWriter();
      Character character0 = Character.valueOf('u');
      cSVFormat0.withEscape(character0);
      Character.valueOf('&');
      cSVFormat2.DEFAULT.withEscape((Character) null);
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.getTrailingDelimiter();
      cSVFormat2.withIgnoreEmptyLines();
      try { 
        Long.valueOf("ax^[<64i%q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ax^[<64i%q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.DEFAULT.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');
      cSVFormat1.RFC4180.withQuote('4');
      cSVFormat3.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat2.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      cSVFormat3.format(objectArray0);
      cSVFormat1.isEscapeCharacterSet();
      Short short0 = new Short((short)2344);
      cSVFormat2.withRecordSeparator('4');
      MockFile mockFile0 = new MockFile("");
      cSVFormat3.DEFAULT.withAllowMissingColumnNames(true);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD.withQuote('');
      CSVFormat cSVFormat6 = cSVFormat5.withTrim(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat0.INFORMIX_UNLOAD_CSV.format(objectArray0);
      cSVFormat6.DEFAULT.withSkipHeaderRecord(true);
      CSVFormat cSVFormat7 = cSVFormat3.EXCEL.withDelimiter('%');
      cSVFormat3.format(objectArray0);
      cSVFormat1.getTrim();
      cSVFormat2.equals(cSVFormat0);
      CSVFormat cSVFormat8 = cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat9 = cSVFormat8.TDF.withIgnoreHeaderCase(true);
      cSVFormat4.RFC4180.withHeaderComments(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat6.withHeader(resultSet0);
      cSVFormat7.isEscapeCharacterSet();
      cSVFormat7.isNullStringSet();
      cSVFormat9.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = Locale.getISOCountries();
      Character character0 = new Character('w');
      CSVFormat cSVFormat1 = CSVFormat.newFormat('w');
      cSVFormat1.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD.withQuote('');
      cSVFormat5.withTrim(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat0.INFORMIX_UNLOAD_CSV.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000005");
      cSVFormat2.printRecord(mockPrintWriter0, objectArray0);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat0.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(707);
      Object[] objectArray0 = new Object[1];
      cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('1');
      cSVFormat1.format(objectArray0);
      cSVFormat1.getTrim();
      Float float0 = new Float(750.6F);
      cSVFormat1.equals(float0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      cSVFormat3.withIgnoreHeaderCase(false);
      cSVFormat3.withHeaderComments(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      cSVFormat1.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.hashCode();
      Character character0 = new Character('+');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
      boolean boolean0 = true;
      cSVFormat2.withSkipHeaderRecord(true);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[1];
      cSVFormat0.INFORMIX_UNLOAD_CSV.format(objectArray0);
      cSVFormat1.getTrim();
      cSVFormat2.equals(cSVFormat0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[1];
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) cSVFormat4;
      // Undeclared exception!
      try { 
        cSVFormat4.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) null);
      cSVFormat3.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      cSVFormat3.getTrim();
      cSVFormat3.equals((Object) null);
      cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat3.withHeaderComments(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat4.withHeader(resultSet0);
      cSVFormat0.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("org.apache.commons.csv.CSVFormat$1");
      cSVFormat2.withIgnoreEmptyLines(true);
      Character character0 = new Character('$');
      Character character1 = Character.valueOf('L');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character1);
      cSVFormat3.getTrailingDelimiter();
      cSVFormat1.withRecordSeparator("org.apache.commons.csv.CSVFormat$1");
      try { 
        Long.valueOf("org.apache.commons.csv.CSVFormat$1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.csv.CSVFormat$1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('_');
      CSVFormat cSVFormat5 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreSurroundingSpaces(false);
      cSVFormat7.withIgnoreSurroundingSpaces();
      cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreEmptyLines(false);
      cSVFormat7.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat9 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat2.isNullStringSet();
      cSVFormat5.hashCode();
      CSVFormat cSVFormat10 = cSVFormat8.withHeaderComments(objectArray0);
      cSVFormat4.equals(cSVFormat10);
      cSVFormat9.withCommentMarker('K');
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      char char0 = '~';
      Character character0 = Character.valueOf('~');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat0.withQuote('~');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) character0;
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.format(objectArray0);
      cSVFormat2.isEscapeCharacterSet();
      short short0 = (short)2344;
      Short short1 = new Short((short)2344);
      cSVFormat0.withRecordSeparator('~');
      MockFile mockFile0 = new MockFile("Ono%y$O65at!`P");
      CSVFormat cSVFormat4 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat4.withAllowMissingColumnNames(true);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      cSVFormat1.withIgnoreEmptyLines(false);
      Character character0 = new Character('w');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      Character.valueOf('6');
      Character character1 = new Character('t');
      cSVFormat2.withQuote(character1);
      cSVFormat3.getTrailingDelimiter();
      cSVFormat0.withIgnoreEmptyLines();
      try { 
        Long.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('(');
      cSVFormat1.withTrim();
      Byte byte0 = new Byte((byte)44);
      String string0 = "NullString=<";
      String string1 = "";
      File file0 = MockFile.createTempFile(".<", "");
      try { 
        MockFile.createTempFile("NullString=<", "NullString=<", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = CSVFormat.newFormat('\\');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
      cSVFormat2.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('l');
      CSVFormat cSVFormat6 = cSVFormat5.withRecordSeparator((String) null);
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines();
      cSVFormat7.getHeaderComments();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.getRecordSeparator();
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("org.apache.commons.csv.CSVFormat$1");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      Character character0 = new Character('$');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      Character character1 = Character.valueOf('L');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character1);
      cSVFormat5.getTrailingDelimiter();
      cSVFormat2.withIgnoreEmptyLines();
      try { 
        Long.valueOf("org.apache.commons.csv.CSVFormat$1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.csv.CSVFormat$1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat4.withIgnoreSurroundingSpaces(true);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.getEscapeCharacter();
      cSVFormat0.toString();
      cSVFormat0.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('-');
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
      cSVFormat0.getNullString();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      CSVFormat cSVFormat0 = CSVFormat.newFormat('u');
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(707);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.INFORMIX_UNLOAD.printRecord(stringWriter0, objectArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.hashCode();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        cSVFormat0.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1157);
      cSVFormat2.parse(pipedReader0);
      cSVFormat2.withEscape('G');
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('z');
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      cSVFormat5.getRecordSeparator();
      cSVFormat5.RFC4180.withCommentMarker('z');
      cSVFormat2.withAllowMissingColumnNames();
      cSVFormat5.getAllowMissingColumnNames();
      cSVFormat4.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("EOF");
      char char0 = ':';
      cSVFormat1.withCommentMarker(':');
      cSVFormat0.MYSQL.withTrim(false);
      Path path0 = null;
      // Undeclared exception!
      try { 
        Charset.forName("EOF");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // EOF
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('g');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat2.getIgnoreEmptyLines();
      String string0 = "1+R";
      try { 
        MockURI.URI("1+R", "1+R", "1+R", "LLANaCR0kp'CJ:", "]");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 1+R://1+R1+R?LLANaCR0kp'CJ:#]
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      cSVFormat5.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(']');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      String[] stringArray0 = new String[2];
      cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.MYSQL.withNullString("d>=n(M+h^d");
      stringArray0[0] = "zynM";
      stringArray0[1] = "u!)@+}~";
      cSVFormat5.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Object[] objectArray0 = new Object[1];
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) cSVFormat4;
      // Undeclared exception!
      try { 
        cSVFormat4.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet0);
      cSVFormat5.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withCommentMarker('%');
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "The quoteChar character and the delimiter cannot be the same ('";
      stringArray0[2] = "XiiQm";
      stringArray0[3] = "";
      stringArray0[4] = "/=rK";
      stringArray0[5] = "path";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, The quoteChar character and the delimiter cannot be the same (', XiiQm, , /=rK, path]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('V');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat3.EXCEL.withQuote('V');
      cSVFormat2.withAllowMissingColumnNames(true);
      String[] stringArray0 = new String[7];
      cSVFormat2.INFORMIX_UNLOAD.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-739));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        cSVFormat0.DEFAULT.print((File) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "NON_NUMERIC";
      stringArray0[2] = "NuYg)?hsM8Zkqp1";
      stringArray0[3] = "vP7:ZeWn},I)3o0";
      stringArray0[4] = "";
      stringArray0[5] = "charset";
      stringArray0[6] = " SurroundingSpaces:ignored";
      MockFile mockFile0 = new MockFile("NuYg)?hsM8Zkqp1", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.INFORMIX_UNLOAD.print(path0, charset0);
      stringArray0[7] = "";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, NON_NUMERIC, NuYg)?hsM8Zkqp1, vP7:ZeWn},I)3o0, , charset,  SurroundingSpaces:ignored, , ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.ExtendedBufferedReader", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.print(path0, charset0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[16];
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      char char0 = 'Q';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withDelimiter('Q');
      cSVFormat1.getSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat2.DEFAULT.withIgnoreEmptyLines();
      cSVFormat2.DEFAULT.withIgnoreHeaderCase();
      cSVFormat0.withIgnoreHeaderCase(false);
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter((OutputStream) null, "The escape character and the delimiter cannot be the same ('");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.RFC4180.hashCode();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\n";
      stringArray0[1] = ", mapping=";
      stringArray0[2] = "RecordSeparator=<";
      stringArray0[3] = "gAv:";
      stringArray0[4] = "!}mF";
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat2.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      cSVFormat_Predefined0.getFormat();
      Locale.getISOCountries();
      CSVFormat cSVFormat6 = CSVFormat.RFC4180;
      cSVFormat6.format(stringArray0);
      cSVFormat3.withIgnoreHeaderCase(true);
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat5.withHeader(class0);
      cSVFormat2.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(3016);
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "@-^C?wRK_y'w)4";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('t');
      cSVFormat3.EXCEL.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[2];
      cSVFormat1.INFORMIX_UNLOAD_CSV.withRecordSeparator("QuoteChar=<");
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      cSVFormat1.TDF.withQuote('t');
      cSVFormat4.format(objectArray0);
      cSVFormat4.withSkipHeaderRecord(true);
      CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('t');
      cSVFormat5.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces(true);
      cSVFormat3.format(objectArray0);
      cSVFormat4.getTrim();
      cSVFormat2.equals(cSVFormat4);
      cSVFormat1.isNullStringSet();
      CSVFormat cSVFormat6 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat6.hashCode();
      cSVFormat0.equals(cSVFormat0);
      cSVFormat3.withCommentMarker('S');
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[19];
      objectArray0[0] = (Object) "f4HpDj1BC,kEDt";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withHeader((ResultSetMetaData) null);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'";
      cSVFormat0.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(707);
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('F');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("$VALUES");
      cSVFormat0.withQuote('z');
      cSVFormat2.withDelimiter('z');
      Float float0 = new Float((-1.0F));
      cSVFormat2.equals("$VALUES");
      cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat3.withHeader((ResultSet) null);
      cSVFormat4.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('s');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
      cSVFormat2.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "YG\"t9?EA7MP& tY[]i";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withNullString("_<zcJ)Obg4UB$[76");
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD.withQuote('');
      CSVFormat cSVFormat6 = cSVFormat5.withTrim(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat0.INFORMIX_UNLOAD_CSV.format(objectArray0);
      cSVFormat6.DEFAULT.withSkipHeaderRecord(true);
      CSVFormat cSVFormat7 = cSVFormat3.EXCEL.withDelimiter('%');
      cSVFormat3.format(objectArray0);
      cSVFormat1.getTrim();
      cSVFormat2.equals(cSVFormat0);
      CSVFormat cSVFormat8 = cSVFormat3.withTrailingDelimiter(false);
      cSVFormat8.TDF.withIgnoreHeaderCase(true);
      cSVFormat4.RFC4180.withHeaderComments(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat6.withHeader(resultSet0);
      cSVFormat7.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord();
      Character character0 = Character.valueOf('d');
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withQuote(character0);
      cSVFormat2.MYSQL.withTrim(true);
      cSVFormat0.getHeader();
      cSVFormat0.getTrim();
      cSVFormat2.getTrim();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat0.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('H');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      char char0 = 'W';
      cSVFormat2.INFORMIX_UNLOAD_CSV.withEscape((Character) null);
      String string0 = "|2ZCNR|nO=Z`${!:!,W";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("|2ZCNR|nO=Z`${!:!,W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.|2ZCNR|nO=Z`${!:!,W
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withCommentMarker('r');
      Object[] objectArray0 = new Object[2];
      cSVFormat1.EXCEL.hashCode();
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withTrailingDelimiter();
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat2.INFORMIX_UNLOAD.withSkipHeaderRecord(false);
      cSVFormat3.RFC4180.withHeaderComments(objectArray0);
      cSVFormat3.RFC4180.withIgnoreSurroundingSpaces(false);
      cSVFormat4.RFC4180.withRecordSeparator("org.apache.commons.csv.CSVFormat");
      cSVFormat3.DEFAULT.withSkipHeaderRecord(false);
      // Undeclared exception!
      try { 
        cSVFormat0.RFC4180.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        cSVFormat0.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.MYSQL.toString();
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat0.TDF.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat2.getHeaderComments();
      cSVFormat2.toString();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.MYSQL.withIgnoreHeaderCase(true);
      MockFile mockFile0 = new MockFile("The comment start and the escape character cannot be the same ('");
      String string0 = ";u!zB2G06\"Mo^:m";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(' ');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat3.EXCEL.withIgnoreHeaderCase();
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat0.toString();
      cSVFormat1.hashCode();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat0.getNullString();
      cSVFormat4.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      cSVFormat1.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      cSVFormat0.MYSQL.withTrailingDelimiter();
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = "Delimiter=< > EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      stringArray0[4] = null;
      stringArray0[5] = "Delimiter=< > EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, , null, Delimiter=< > EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false, null, Delimiter=< > EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('/');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat3.toString();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter();
      cSVFormat5.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[]");
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat6.withIgnoreSurroundingSpaces(false);
      cSVFormat5.withCommentMarker('Z');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat4;
      cSVFormat3.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000004", "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r
         // > EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[]
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = Locale.getISOCountries();
      cSVFormat0.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.hashCode();
      Character character0 = new Character('+');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = '+';
      cSVFormat1.MYSQL.toString();
      charArray0[2] = '+';
      charArray0[3] = '+';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 44, 279);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('c');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('c')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('k');
      Character character0 = new Character('k');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('k')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      char char0 = '|';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
      Character character0 = new Character('|');
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('|')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('D');
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat0.withRecordSeparator('r');
      cSVFormat4.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RecordSeparator#=<";
      cSVFormat4.withHeader(stringArray0);
      cSVFormat1.INFORMIX_UNLOAD.toString();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat3.withHeaderComments(stringArray0);
      cSVFormat3.isNullStringSet();
      cSVFormat5.hashCode();
      cSVFormat1.equals((Object) null);
      cSVFormat3.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.equals(rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('D');
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.withEscape((Character) null);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.RFC4180.withRecordSeparator('f');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat2.withTrim(true);
      cSVFormat1.EXCEL.withSkipHeaderRecord(false);
      String string0 = "jhF0s3E2:s?N";
      String string1 = "U^i7org~62Zvci4";
      File file0 = null;
      File file1 = MockFile.createTempFile("jhF0s3E2:s?N", "U^i7org~62Zvci4", (File) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file1, ";?L");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ;?L
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[9];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat0.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char char0 = '`';
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('`');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "7zZobL9";
      stringArray0[1] = "";
      stringArray0[2] = "*?OGzC^^K3qB[N_";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [7zZobL9, , *?OGzC^^K3qB[N_, ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withDelimiter('`');
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = Locale.getISOLanguages();
      cSVFormat0.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(707);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('F');
      cSVFormat1.toString();
      cSVFormat1.withRecordSeparator("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[4] = (Object) cSVFormat2;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character0);
      cSVFormat4.hashCode();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withCommentMarker('s');
      Object[] objectArray0 = new Object[0];
      cSVFormat4.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",");
      cSVFormat5.printRecord(mockPrintWriter0, objectArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator("");
      cSVFormat6.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat0.withRecordSeparator('r');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RecordSeparator=<";
      CSVFormat cSVFormat6 = cSVFormat4.withHeader(stringArray0);
      cSVFormat1.INFORMIX_UNLOAD.toString();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat7 = cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat7.withRecordSeparator('o');
      cSVFormat4.withTrim();
      cSVFormat6.withSkipHeaderRecord(true);
      cSVFormat5.withDelimiter('o');
      cSVFormat7.format(stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("a}ER");
      CSVFormat cSVFormat8 = CSVFormat.MYSQL;
      cSVFormat1.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withEscape('7');
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withHeaderComments((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withQuote('v');
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[1];
      cSVFormat0.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withTrim();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withRecordSeparator('v');
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = Locale.getISOCountries();
      String string0 = cSVFormat0.format(stringArray0);
      assertEquals("AD,AE,AF,AG,AI,AL,AM,AN,AO,AQ,AR,AS,AT,AU,AW,AX,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BL,BM,BN,BO,BQ,BR,BS,BT,BV,BW,BY,BZ,CA,CC,CD,CF,CG,CH,CI,CK,CL,CM,CN,CO,CR,CU,CV,CW,CX,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FK,FM,FO,FR,GA,GB,GD,GE,GF,GG,GH,GI,GL,GM,GN,GP,GQ,GR,GS,GT,GU,GW,GY,HK,HM,HN,HR,HT,HU,ID,IE,IL,IM,IN,IO,IQ,IR,IS,IT,JE,JM,JO,JP,KE,KG,KH,KI,KM,KN,KP,KR,KW,KY,KZ,LA,LB,LC,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MF,MG,MH,MK,ML,MM,MN,MO,MP,MQ,MR,MS,MT,MU,MV,MW,MX,MY,MZ,NA,NC,NE,NF,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PF,PG,PH,PK,PL,PM,PN,PR,PS,PT,PW,PY,QA,RE,RO,RS,RU,RW,SA,SB,SC,SD,SE,SG,SH,SI,SJ,SK,SL,SM,SN,SO,SR,SS,ST,SV,SX,SY,SZ,TC,TD,TF,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,UM,US,UY,UZ,VA,VC,VE,VG,VI,VN,VU,WF,WS,YE,YT,ZA,ZM,ZW", string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = cSVFormat0.getQuoteCharacter();
      assertEquals('\"', (char)character0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.DEFAULT.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');
      CSVFormat cSVFormat4 = cSVFormat1.RFC4180.withQuote('4');
      cSVFormat4.EXCEL.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat2.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      cSVFormat3.format(objectArray0);
      cSVFormat1.isEscapeCharacterSet();
      Short short0 = new Short((short)2344);
      cSVFormat2.withRecordSeparator('4');
      MockFile mockFile0 = new MockFile("");
      cSVFormat3.DEFAULT.withAllowMissingColumnNames(true);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('~');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat2.MYSQL.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat7 = cSVFormat3.EXCEL.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat6;
      CSVFormat cSVFormat8 = cSVFormat7.DEFAULT.withHeaderComments(objectArray0);
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      
      boolean boolean0 = cSVFormat5.isNullStringSet();
      assertFalse(boolean0);
      
      cSVFormat3.hashCode();
      cSVFormat7.equals(cSVFormat5);
      cSVFormat6.withCommentMarker(';');
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('/');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('/');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('/')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("!!.q^<[AcBErikz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.!!.q^<[AcBErikz
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('P', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      char char0 = '\'';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      cSVFormat0.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      cSVFormat0.withSkipHeaderRecord();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("!!.q^<[AcBErikz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.!!.q^<[AcBErikz
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
