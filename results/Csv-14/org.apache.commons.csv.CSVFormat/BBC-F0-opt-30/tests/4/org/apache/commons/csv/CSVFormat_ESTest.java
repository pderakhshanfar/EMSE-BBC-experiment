/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 12:50:19 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z]YGgAqb>&-";
      String string0 = cSVFormat0.format(stringArray0);
      assertNotNull(string0);
      assertEquals(3, stringArray0.length);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals("Z]YGgAqb>&-,,", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      String[] stringArray0 = new String[2];
      String string0 = cSVFormat1.format(stringArray0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("ALL\tMINIMAL\tNON_NUMERIC\tNONE", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0t-S";
      String string0 = cSVFormat0.format(stringArray0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("0t-S", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      Character character0 = new Character('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('Y', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('Y', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('Y', (char)cSVFormat2.getCommentMarker());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\\N", cSVFormat0.getNullString());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('t');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('t', (char)cSVFormat1.getCommentMarker());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('t', (char)cSVFormat1.getCommentMarker());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('t', (char)cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('/', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('/', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('/', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      assertNotNull(cSVFormat2);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter(false);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('b', (char)cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      assertNotNull(cSVFormat2);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertEquals("", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('b', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('b', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('b', (char)cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('/', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('/', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getRecordSeparator());
      assertEquals('/', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrim());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrim());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals("", cSVFormat2.getRecordSeparator());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('_', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('_', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('_', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getTrim());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      assertNotNull(cSVFormat2);
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('w');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('w', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("<@iYL");
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('w', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("<@iYL", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('w', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('b', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('b', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('b', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('b', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('b', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('b', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator("\r\n");
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("-", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      assertNotNull(cSVFormat1);
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('x');
      assertNotNull(cSVFormat2);
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("x", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertEquals('b', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      assertNotNull(cSVFormat1);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('$');
      assertNotNull(cSVFormat2);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("$", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('+');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("+", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('m');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("m", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('i');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("i", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('F');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals("F", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      assertNotNull(cSVFormat2);
      assertEquals(1, stringArray0.length);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("", cSVFormat2.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      assertNotNull(cSVFormat3);
      assertEquals(1, stringArray0.length);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("", cSVFormat2.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals(QuoteMode.MINIMAL, cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertEquals("", cSVFormat3.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("lOf<+9G_hCIa0``1");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("lOf<+9G_hCIa0``1", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("lOf<+9G_hCIa0``1", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("lOf<+9G_hCIa0``1", cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getNullString());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(QuoteMode.NONE, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals(QuoteMode.MINIMAL, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('t', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      Character character0 = new Character('v');
      assertNotNull(character0);
      assertEquals('v', (char)character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('v', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Character character0 = new Character('0');
      assertNotNull(character0);
      assertEquals('0', (char)character0);
      
      CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('b', cSVFormat0.getDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('b', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('b', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('b', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('b', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('0', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals('b', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote(character0);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('o', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      Character character0 = new Character('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('b', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('k');
      assertNotNull(cSVFormat2);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('k', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('b', (char)cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('5');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('5', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('5');
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('5', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.getTrim());
      assertEquals('5', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('5', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('k');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals('k', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('#');
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('#', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('U');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('U', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("||");
      assertNotNull(cSVFormat2);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('b', (char)cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals("||", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getTrim());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("k7Gn!\"c/ss3ho");
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals("k7Gn!\"c/ss3ho", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces(false);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      
      Character character0 = new Character('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertEquals('Y', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      assertNotNull(cSVFormat2);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertEquals('Y', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('Y', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('5');
      assertNotNull(cSVFormat2);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getTrim());
      assertEquals('5', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      assertNotNull(cSVFormat3);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getTrim());
      assertEquals('5', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('5', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('Z', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('Z', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('Z', (char)cSVFormat2.getCommentMarker());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      assertNotNull(cSVFormat2);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withTrailingDelimiter(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('_', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('_', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals('_', (char)cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals('t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("", cSVFormat2.getRecordSeparator());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('b', (char)cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.getTrim());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      assertNotNull(cSVFormat2);
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withTrailingDelimiter(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      Character character0 = Character.valueOf('_');
      assertNotNull(character0);
      assertEquals('_', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('_', (char)cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('_', (char)cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('_', (char)cSVFormat2.getCommentMarker());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('_', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('_', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('_', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      assertNotNull(cSVFormat2);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('t', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\\N", cSVFormat0.getNullString());
      
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(stringArray0);
      assertNotNull(cSVFormat1);
      assertEquals(2, stringArray0.length);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
      assertNotNull(cSVFormat1);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('_', (char)cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      assertNotNull(cSVFormat2);
      assertEquals(2, objectArray0.length);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('_', (char)cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('_', (char)cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);
      assertNotNull(cSVFormat2);
      assertEquals(2, stringArray0.length);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X+;C";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      assertNotNull(cSVFormat2);
      assertEquals(2, stringArray0.length);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('b', (char)cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      assertNotNull(cSVFormat2);
      assertEquals(1, stringArray0.length);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TIfBY5z=gTCVrZb=w";
      stringArray0[1] = "k7Gn!\"c/ss3ho";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      assertNotNull(cSVFormat2);
      assertEquals(3, stringArray0.length);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TIfBY5z=gTCVrZb=w";
      stringArray0[1] = "k7Gn!\"c/ss3ho";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      assertNotNull(cSVFormat2);
      assertEquals(3, stringArray0.length);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('4', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('4', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('4', cSVFormat1.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      assertNotNull(cSVFormat2);
      assertEquals(1, stringArray0.length);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('4', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('4', cSVFormat1.getDelimiter());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('4', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('b', (char)cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      Character character0 = Character.valueOf('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('b', (char)cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('b', (char)cSVFormat3.getCommentMarker());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getQuoteMode());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertEquals('r', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('b', (char)cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getTrim());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertEquals('t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertEquals('t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertEquals('t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      assertNotNull(cSVFormat2);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeader(class0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      assertNotNull(cSVFormat2);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('b', (char)cSVFormat2.getCommentMarker());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
      assertNotNull(cSVFormat1);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      
      Character character0 = new Character('%');
      assertNotNull(character0);
      assertEquals('%', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('%', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('%', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('%', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('5');
      assertNotNull(cSVFormat2);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('5', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      assertNotNull(cSVFormat3);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('5', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getTrim());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertEquals('5', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      assertNotNull(cSVFormat2);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      assertNotNull(cSVFormat2);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('%');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertEquals('%', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Character character0 = Character.valueOf('G');
      assertNotNull(character0);
      assertEquals('G', (char)character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertEquals('%', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('%', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('G', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      Character character0 = Character.valueOf('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat3.getQuoteMode());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals('Z', (char)cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.getTrim());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      Character character0 = Character.valueOf('-');
      assertNotNull(character0);
      assertEquals('-', (char)character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('-', (char)cSVFormat2.getEscapeCharacter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Character character0 = new Character('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('m', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      Character character0 = new Character('0');
      assertNotNull(character0);
      assertEquals('0', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('0', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('6');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('6', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('<');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('<', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('b', (char)cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('Z');
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getTrim());
      assertEquals('Z', (char)cSVFormat2.getEscapeCharacter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('O');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('O', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('p');
      assertNotNull(cSVFormat2);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('p', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('x');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('x', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');
      assertNotNull(cSVFormat2);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("", cSVFormat2.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals('^', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      Character character0 = new Character('<');
      assertNotNull(character0);
      assertEquals('<', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('<', (char)cSVFormat1.getCommentMarker());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('l');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('<', (char)cSVFormat1.getCommentMarker());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('l', cSVFormat2.getDelimiter());
      assertEquals('<', (char)cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('t');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('P');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals('P', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("' must not be null!");
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals('P', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getQuoteMode());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("' must not be null!", cSVFormat3.getNullString());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertEquals('P', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals('P', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getQuoteMode());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("' must not be null!", cSVFormat3.getNullString());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertEquals('P', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals("' must not be null!", cSVFormat4.getNullString());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals('P', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('m');
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('m', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('t');
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      
      Character character0 = Character.valueOf('V');
      assertNotNull(character0);
      assertEquals('V', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker(character0);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('V', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      Character character0 = new Character(']');
      assertNotNull(character0);
      assertEquals(']', (char)character0);
      
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(']', (char)cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      Character character0 = Character.valueOf('_');
      assertNotNull(character0);
      assertEquals('_', (char)character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals('_', (char)cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Character character0 = Character.valueOf('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('m', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      Character character0 = new Character('%');
      assertNotNull(character0);
      assertEquals('%', (char)character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('%', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('a');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('a', (char)cSVFormat2.getCommentMarker());
      assertEquals("", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('w', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getTrim());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('%');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('%', (char)cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('|');
      assertNotNull(cSVFormat2);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('|', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(';');
      assertNotNull(cSVFormat2);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(';', (char)cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('l');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('l', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('l', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('l', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      assertNotNull(cSVFormat2);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      assertNotNull(cSVFormat3);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      assertNotNull(cSVFormat2);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      assertNotNull(cSVFormat1);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      assertNotNull(cSVFormat2);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals("\\N", cSVFormat0.getNullString());
      
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('b', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getTrim());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("MySQL");
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      
      MockFile mockFile0 = new MockFile("TIfBY5z=gTCVrZb=w");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("TIfBY5z=gTCVrZb=w", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("TIfBY5z=gTCVrZb=w", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(path0, charset0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("TIfBY5z=gTCVrZb=w", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("TIfBY5z=gTCVrZb=w", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "' must not be null!");
      assertNotNull(charBuffer0);
      assertEquals(19, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(19, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(19, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(19, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("' must not be null!", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print((Appendable) charBuffer0);
      assertNotNull(cSVPrinter0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals(19, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(19, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(19, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(19, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("' must not be null!", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      
      MockFile mockFile0 = new MockFile("]Bj");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print((File) mockFile0, charset0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals("]Bj", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("]Bj", mockFile0.getName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      assertNotNull(cSVParser0);
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getRecordSeparator());
      
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      boolean boolean0 = cSVFormat1.getTrim();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      boolean boolean0 = cSVFormat1.getTrailingDelimiter();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals('X', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      
      String string0 = cSVFormat0.getRecordSeparator();
      assertNull(string0);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals('X', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      String string0 = cSVFormat1.getRecordSeparator();
      assertNotNull(string0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      QuoteMode quoteMode1 = cSVFormat1.getQuoteMode();
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertSame(quoteMode0, quoteMode1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertSame(quoteMode1, quoteMode0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(QuoteMode.NON_NUMERIC, quoteMode1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Character character0 = cSVFormat1.getQuoteCharacter();
      assertNull(character0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('3');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('3', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Character character0 = cSVFormat1.getQuoteCharacter();
      assertNotNull(character0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('3', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals('3', (char)character0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      Character character0 = new Character('v');
      assertNotNull(character0);
      assertEquals('v', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('v', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('v', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('v', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      
      Character character1 = cSVFormat2.getQuoteCharacter();
      assertNotNull(character1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('v', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('v', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertEquals('v', (char)character1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      String string0 = cSVFormat1.getNullString();
      assertNotNull(string0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("\\N", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('J');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('J', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('J', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('J', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      String string0 = cSVFormat1.getNullString();
      assertNotNull(string0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('J', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('J', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      
      boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('t', cSVFormat0.getDelimiter());
      
      boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      assertNotNull(cSVFormat1);
      assertEquals(6, objectArray0.length);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      String[] stringArray0 = cSVFormat1.getHeaderComments();
      assertNotNull(stringArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      String[] stringArray0 = cSVFormat1.getHeader();
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      
      Character character0 = cSVFormat0.getEscapeCharacter();
      assertNull(character0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('5', (char)cSVFormat1.getEscapeCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Character character0 = cSVFormat1.getEscapeCharacter();
      assertNotNull(character0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('5', (char)cSVFormat1.getEscapeCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals('5', (char)character0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      Character character0 = new Character('X');
      assertNotNull(character0);
      assertEquals('X', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('X', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Character character1 = cSVFormat1.getEscapeCharacter();
      assertNotNull(character1);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('X', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals('X', (char)character1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      
      char char0 = cSVFormat0.getDelimiter();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals('\t', char0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('j', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      char char0 = cSVFormat0.getDelimiter();
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('j', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('j', char0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      Character character0 = Character.valueOf('[');
      assertNotNull(character0);
      assertEquals('[', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('[', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      assertNotNull(cSVFormat2);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('[', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('[', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      Character character1 = cSVFormat2.getCommentMarker();
      assertNotNull(character1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('[', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('[', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertEquals('[', (char)character1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Character character0 = cSVFormat1.getCommentMarker();
      assertNotNull(character0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals('b', (char)character0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      Character character0 = new Character('0');
      assertNotNull(character0);
      assertEquals('0', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuote(character0);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('0', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('0', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('P');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('P', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Character character0 = new Character('P');
      assertNotNull(character0);
      assertEquals('P', (char)character0);
      
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('P')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      rowSetMetaDataImpl0.setColumnCount(65534);
      // Undeclared exception!
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('D');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('D', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Character character0 = Character.valueOf('D');
      assertNotNull(character0);
      assertEquals('D', (char)character0);
      
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('D')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":I+?");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(":I+?", charBuffer0.toString());
      assertEquals(4, charBuffer0.length());
      
      // Undeclared exception!
      try { 
        cSVFormat0.INFORMIX_UNLOAD_CSV.println(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        cSVFormat0.MYSQL.println(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        cSVFormat0.INFORMIX_UNLOAD.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(4864);
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = objectArray0[6];
      objectArray0[8] = (Object) bufferedWriter0;
      // Undeclared exception!
      cSVFormat1.printRecord(stringWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[7];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer1, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        cSVFormat0.EXCEL.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CharBuffer charBuffer0 = CharBuffer.allocate(35);
      // Undeclared exception!
      try { 
        cSVFormat0.DEFAULT.printRecord(charBuffer0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1575);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[5];
      try { 
        cSVFormat0.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      try { 
        cSVFormat0.print(path0, (Charset) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ">");
      // Undeclared exception!
      try { 
        cSVFormat0.RFC4180.print((Object) cSVFormat0, (Appendable) charBuffer0, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CharBuffer charBuffer0 = CharBuffer.allocate(34);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) "javax.sql.rowset.RowSetMetaDataImpl@0000000004|java.lang.Object@0000000005|org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000001", (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      // Undeclared exception!
      try { 
        cSVFormat0.EXCEL.print(object0, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(34);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object0 = new Object();
      try { 
        cSVFormat0.print(object0, (Appendable) pipedWriter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " >DW");
      // Undeclared exception!
      try { 
        cSVFormat1.print((Appendable) charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      // Undeclared exception!
      try { 
        cSVFormat0.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      MockFile mockFile0 = new MockFile("");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat0.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat1.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals('t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('!');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('!')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('v');
      // Undeclared exception!
      try { 
        cSVFormat1.withDelimiter('v');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('v')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      CharBuffer charBuffer0 = CharBuffer.allocate('t');
      cSVFormat0.println(charBuffer0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals(0, charBuffer0.position());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1575);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.println(charBuffer0);
      assertEquals(1572, charBuffer0.remaining());
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      StringWriter stringWriter0 = new StringWriter(1585);
      cSVFormat0.print((Object) null, (Appendable) stringWriter0, false);
      assertEquals("|", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = cSVFormat0.isQuoteCharacterSet();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      boolean boolean0 = cSVFormat0.isNullStringSet();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.isNullStringSet();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      boolean boolean0 = cSVFormat2.isEscapeCharacterSet();
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(boolean0);
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.isEscapeCharacterSet();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.isCommentMarkerSet();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = cSVFormat0.getHeaderComments();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[1] = "IC;r";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.getHeader();
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String[] stringArray0 = cSVFormat0.getHeader();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      MockFile mockFile0 = new MockFile("%");
      // Undeclared exception!
      try { 
        cSVFormat0.TDF.print((File) mockFile0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.OutputStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      boolean boolean0 = cSVFormat0.getTrim();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.withHeader(class0);
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = cSVFormat0.getQuoteCharacter();
      assertEquals('\"', (char)character0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = cSVFormat0.getSkipHeaderRecord();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = cSVFormat0.getIgnoreHeaderCase();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      boolean boolean0 = cSVFormat0.getTrailingDelimiter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(1575);
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("\\N", cSVFormat1.getNullString());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('L');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape('L');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('L')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('v');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker('v');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('v')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
      Character character0 = new Character('%');
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('%')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.newFormat('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The delimiter cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CharBuffer charBuffer0 = CharBuffer.allocate('t');
      StringWriter stringWriter0 = new StringWriter('t');
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      cSVFormat2.println(charBuffer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) bufferedWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) charBuffer0;
      cSVFormat2.printRecord(charBuffer0, objectArray0);
      assertEquals(0, charBuffer0.remaining());
      
      cSVFormat1.format(objectArray0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      String string0 = cSVFormat1.toString();
      assertFalse(cSVFormat1.getTrim());
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false Header:[null]", string0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      String string0 = cSVFormat1.toString();
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[null, null, null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=</> SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = new Character('%');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<%> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      MockFileWriter mockFileWriter0 = new MockFileWriter("Bajlv9 ", true);
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) "Bajlv9 ";
      cSVFormat0.printRecord(mockFileWriter0, objectArray0);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      String string0 = cSVFormat0.format(objectArray0);
      assertEquals("\"Delimiter=<\t> QuoteChar=<\"\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\"", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1575);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[5];
      stringArray0[1] = "k7Gn!\"c/ss3ho";
      cSVFormat0.printRecord(charBuffer0, stringArray0);
      assertEquals(1553, charBuffer0.remaining());
      assertEquals(22, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = stringWriter0.append('p');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      cSVFormat0.println(stringWriter1);
      assertEquals("p\r\n", stringWriter1.toString());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) stringBuffer0;
      String string0 = cSVFormat0.format(objectArray0);
      assertEquals(",,,,,\"p\r\n\",,,", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      String string0 = cSVFormat0.format(objectArray0);
      assertEquals("\"Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false\",,,,,", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}om8i*RES0\"{";
      MockFileWriter mockFileWriter0 = new MockFileWriter("n553CKxv)!@I\"4aN", false);
      cSVFormat0.printRecord(mockFileWriter0, stringArray0);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ":I+?";
      String string0 = cSVFormat0.format(objectArray0);
      assertEquals("\":I+?\",,,", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "9";
      String string0 = cSVFormat0.format(objectArray0);
      assertEquals("9", string0);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\u0003XDhF\">A[{2Ksoe";
      String string0 = cSVFormat0.format(stringArray0);
      assertEquals("\"\u0003XDhF\"\">A[{2Ksoe\",,,,,,,", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 2, 2);
      // Undeclared exception!
      try { 
        cSVFormat0.INFORMIX_UNLOAD_CSV.print((Object) charBuffer1, (Appendable) charBuffer0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CharBuffer charBuffer0 = CharBuffer.allocate('t');
      StringWriter stringWriter0 = new StringWriter(42);
      cSVFormat2.print((Object) charBuffer0, (Appendable) stringWriter0, false);
      assertEquals(",\"\"", stringWriter0.toString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Integer integer0 = new Integer(31);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(43);
      cSVFormat1.print((Object) integer0, (Appendable) charArrayWriter0, true);
      assertEquals(28, charArrayWriter0.size());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = cSVFormat1.format(stringArray0);
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("", string0);
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "X+;C";
      Character character0 = new Character('X');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      String string0 = cSVFormat2.format(stringArray0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("XX+;C", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      String string0 = cSVFormat0.format(objectArray0);
      assertEquals("Delimiter=<\\\t> Escape=<> NullString=<N> RecordSeparator=<\\n> SkipHeaderRecord:false\t\\N\t\\N\t\\N\t\\N\t\\N", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withTrailingDelimiter();
      String string0 = cSVFormat1.format(objectArray0);
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\\N\tDelimiter=<,> QuoteChar=<\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SkipHeaderRecord:false\t\\N\t\\N\t\\N\t\\N\t\\N", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      MockFileWriter mockFileWriter0 = new MockFileWriter("MQ|>r", true);
      cSVFormat0.printRecord(mockFileWriter0, objectArray0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(1585);
      cSVFormat0.print((Object) null, (Appendable) stringWriter0, false);
      assertEquals("\t\\N", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      String string0 = cSVFormat1.toString();
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("Delimiter=<\t> Escape=<\\> NullString=<\\N> RecordSeparator=<> SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      boolean boolean0 = cSVFormat1.isCommentMarkerSet();
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('b', (char)cSVFormat1.getCommentMarker());
      assertTrue(boolean0);
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.hashCode();
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.hashCode();
      assertEquals('t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(' ');
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(5320);
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) charBuffer0;
      cSVFormat0.printRecord(stringWriter0, objectArray0);
      // Undeclared exception!
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('A');
      cSVFormat0.equals(cSVFormat1);
      assertEquals("A", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('/', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('/', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertTrue(boolean0);
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(boolean0);
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.equals(cSVFormat1);
      assertEquals("\\N", cSVFormat2.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
      Character character0 = new Character('X');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      boolean boolean0 = cSVFormat1.equals(cSVFormat2);
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(boolean0);
      assertEquals("", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape('&');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('&', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Character character0 = new Character('G');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      boolean boolean0 = cSVFormat2.equals(cSVFormat1);
      assertTrue(boolean0);
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = new Character('%');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Character character0 = new Character('G');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(boolean0);
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('%');
      cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("%", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("++l~Yj\"Yc%9D-|");
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("++l~Yj\"Yc%9D-|", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('.');
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('.', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('j');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('(');
      boolean boolean0 = cSVFormat2.equals(cSVFormat0);
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("(", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('j', cSVFormat1.getDelimiter());
      assertFalse(boolean0);
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Float float0 = new Float(21.65943F);
      boolean boolean0 = cSVFormat0.equals(float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = cSVFormat0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      boolean boolean0 = cSVFormat0.equals(cSVFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(':');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(':', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String string0 = cSVFormat0.getNullString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = cSVFormat0.getEscapeCharacter();
      assertEquals('\\', (char)character0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = cSVFormat0.getCommentMarker();
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("' must not be null!");
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("' must not be null!", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withHeader((String[]) null);
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
      Character character0 = cSVFormat1.getCommentMarker();
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNotNull(character0);
      assertEquals('6', (char)character0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      String[] stringArray0 = cSVFormat1.getHeaderComments();
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertNotNull(stringArray0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = cSVFormat0.getRecordSeparator();
      assertEquals("\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("TDF");
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.withRecordSeparator("");
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('~');
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('~', (char)cSVFormat2.getQuoteCharacter());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("R,X^b1", "F.K.B4Z");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        cSVFormat0.print(path0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.OutputStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat1.print((Appendable) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('6');
      char char0 = cSVFormat0.getDelimiter();
      assertEquals('6', char0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
  }
}
