* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-40
* Going to generate test cases for class: org.apache.commons.csv.CSVFormat
* Starting Client-0
* Connecting to master process on port 19715
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-14/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVFormat
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2854
* Using seed 174192999
* Starting evolution
bbc usage percentage is: 40%
* Initial Number of Goals in DynaMOSA = 1515 / 2854
[MASTER] 12:39:38.448 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - CurrentThread has not been set!
[MASTER] 12:39:38.450 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[pool-3-thread-1,5,main]
 -> java.net.SocketInputStream.socketRead0(Native Method)
 -> java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
 -> java.net.SocketInputStream.read(SocketInputStream.java:171)
 -> java.net.SocketInputStream.read(SocketInputStream.java:141)
 -> java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:265)
 -> java.io.ObjectInputStream$PeekInputStream.peek(ObjectInputStream.java:2758)
 -> java.io.ObjectInputStream$BlockDataInputStream.peek(ObjectInputStream.java:3065)
 -> java.io.ObjectInputStream$BlockDataInputStream.peekByte(ObjectInputStream.java:3075)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1617)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:502)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:460)
 -> org.evosuite.utils.LoggingUtils$1$1.call(LoggingUtils.java:152)
 -> org.evosuite.utils.LoggingUtils$1$1.call(LoggingUtils.java:143)
 -> java.util.concurrent.FutureTask.run(FutureTask.java:266)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.450 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[pool-3-thread-2,5,main]
 -> java.net.SocketInputStream.socketRead0(Native Method)
 -> java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
 -> java.net.SocketInputStream.read(SocketInputStream.java:171)
 -> java.net.SocketInputStream.read(SocketInputStream.java:141)
 -> java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:265)
 -> java.io.ObjectInputStream$PeekInputStream.peek(ObjectInputStream.java:2758)
 -> java.io.ObjectInputStream$BlockDataInputStream.peek(ObjectInputStream.java:3065)
 -> java.io.ObjectInputStream$BlockDataInputStream.peekByte(ObjectInputStream.java:3075)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1617)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:502)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:460)
 -> org.evosuite.utils.LoggingUtils$1$1.call(LoggingUtils.java:152)
 -> org.evosuite.utils.LoggingUtils$1$1.call(LoggingUtils.java:143)
 -> java.util.concurrent.FutureTask.run(FutureTask.java:266)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.451 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI RenewClean-[127.0.0.1:19716],5,system]
 -> java.lang.Object.wait(Native Method)
 -> java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)
 -> sun.rmi.transport.DGCClient$EndpointEntry$RenewCleanThread.run(DGCClient.java:563)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.451 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[Signal Dispatcher,9,system]

[MASTER] 12:39:38.451 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI TCP Accept-13712,5,system]
 -> java.net.PlainSocketImpl.socketAccept(Native Method)
 -> java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409)
 -> java.net.ServerSocket.implAccept(ServerSocket.java:560)
 -> java.net.ServerSocket.accept(ServerSocket.java:528)
 -> sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:405)
 -> sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:377)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.451 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[pool-3-thread-3,5,main]
 -> java.net.SocketInputStream.socketRead0(Native Method)
 -> java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
 -> java.net.SocketInputStream.read(SocketInputStream.java:171)
 -> java.net.SocketInputStream.read(SocketInputStream.java:141)
 -> java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:265)
 -> java.io.ObjectInputStream$PeekInputStream.peek(ObjectInputStream.java:2758)
 -> java.io.ObjectInputStream$BlockDataInputStream.peek(ObjectInputStream.java:3065)
 -> java.io.ObjectInputStream$BlockDataInputStream.peekByte(ObjectInputStream.java:3075)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1617)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:502)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:460)
 -> org.evosuite.utils.LoggingUtils$1$1.call(LoggingUtils.java:152)
 -> org.evosuite.utils.LoggingUtils$1$1.call(LoggingUtils.java:143)
 -> java.util.concurrent.FutureTask.run(FutureTask.java:266)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.451 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[GC Daemon,2,system]
 -> java.lang.Object.wait(Native Method)
 -> sun.misc.GC$Daemon.run(GC.java:117)

[MASTER] 12:39:38.451 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI TCP Connection(1)-172.17.0.2,5,RMI Runtime]
 -> java.net.SocketInputStream.socketRead0(Native Method)
 -> java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
 -> java.net.SocketInputStream.read(SocketInputStream.java:171)
 -> java.net.SocketInputStream.read(SocketInputStream.java:141)
 -> java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:265)
 -> java.io.FilterInputStream.read(FilterInputStream.java:83)
 -> sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:555)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$20/1902004726.run(Unknown Source)
 -> java.security.AccessController.doPrivileged(Native Method)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.451 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[Finalizer,8,system]
 -> java.lang.Object.wait(Native Method)
 -> java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)
 -> java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)
 -> java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:216)

[MASTER] 12:39:38.451 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]
 -> java.net.SocketInputStream.socketRead0(Native Method)
 -> java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
 -> java.net.SocketInputStream.read(SocketInputStream.java:171)
 -> java.net.SocketInputStream.read(SocketInputStream.java:141)
 -> java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:265)
 -> java.io.FilterInputStream.read(FilterInputStream.java:83)
 -> sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:555)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$20/1902004726.run(Unknown Source)
 -> java.security.AccessController.doPrivileged(Native Method)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.451 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[Thread-3,5,main]
 -> java.io.FileInputStream.readBytes(Native Method)
 -> java.io.FileInputStream.read(FileInputStream.java:255)
 -> java.io.BufferedInputStream.read1(BufferedInputStream.java:284)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:345)
 -> sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
 -> sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
 -> sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
 -> java.io.InputStreamReader.read(InputStreamReader.java:184)
 -> java.io.BufferedReader.fill(BufferedReader.java:161)
 -> java.io.BufferedReader.read(BufferedReader.java:182)
 -> org.evosuite.utils.ExternalProcessGroupHandler$4.run(ExternalProcessGroupHandler.java:523)

[MASTER] 12:39:38.451 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[Reference Handler,10,system]
 -> java.lang.Object.wait(Native Method)
 -> java.lang.Object.wait(Object.java:502)
 -> java.lang.ref.Reference.tryHandlePending(Reference.java:191)
 -> java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)

[MASTER] 12:39:38.451 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI Scheduler(0),5,system]
 -> sun.misc.Unsafe.park(Native Method)
 -> java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
 -> java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
 -> java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.452 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[logback-2,5,main]
 -> java.lang.Thread.sleep(Native Method)
 -> ch.qos.logback.core.net.DefaultSocketConnector.call(DefaultSocketConnector.java:73)
 -> ch.qos.logback.core.net.AbstractSocketAppender.socketConnectionCouldBeEstablished(AbstractSocketAppender.java:209)
 -> ch.qos.logback.core.net.AbstractSocketAppender.connectSocketAndDispatchEvents(AbstractSocketAppender.java:189)
 -> ch.qos.logback.core.net.AbstractSocketAppender.access$000(AbstractSocketAppender.java:44)
 -> ch.qos.logback.core.net.AbstractSocketAppender$1.run(AbstractSocketAppender.java:150)
 -> java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 -> java.util.concurrent.FutureTask.run(FutureTask.java:266)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.452 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[process reaper,10,system]
 -> java.lang.UNIXProcess.waitForProcessExit(Native Method)
 -> java.lang.UNIXProcess.lambda$initStreams$3(UNIXProcess.java:289)
 -> java.lang.UNIXProcess$$Lambda$16/540159270.run(Unknown Source)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.452 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI TCP Accept-19715,5,system]
 -> java.net.PlainSocketImpl.socketAccept(Native Method)
 -> java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409)
 -> java.net.ServerSocket.implAccept(ServerSocket.java:560)
 -> java.net.ServerSocket.accept(ServerSocket.java:528)
 -> sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:405)
 -> sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:377)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.452 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI Reaper,5,system]
 -> java.lang.Object.wait(Native Method)
 -> java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)
 -> java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)
 -> sun.rmi.transport.ObjectTable$Reaper.run(ObjectTable.java:351)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.452 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[pool-2-thread-1,5,main]
 -> java.net.PlainSocketImpl.socketAccept(Native Method)
 -> java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409)
 -> java.net.ServerSocket.implAccept(ServerSocket.java:560)
 -> java.net.ServerSocket.accept(ServerSocket.java:528)
 -> org.evosuite.utils.LoggingUtils$1.call(LoggingUtils.java:141)
 -> org.evosuite.utils.LoggingUtils$1.call(LoggingUtils.java:137)
 -> java.util.concurrent.FutureTask.run(FutureTask.java:266)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.452 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[logback-3,5,main]
 -> java.lang.Thread.sleep(Native Method)
 -> ch.qos.logback.core.net.DefaultSocketConnector.call(DefaultSocketConnector.java:73)
 -> ch.qos.logback.core.net.AbstractSocketAppender.socketConnectionCouldBeEstablished(AbstractSocketAppender.java:209)
 -> ch.qos.logback.core.net.AbstractSocketAppender.connectSocketAndDispatchEvents(AbstractSocketAppender.java:189)
 -> ch.qos.logback.core.net.AbstractSocketAppender.access$000(AbstractSocketAppender.java:44)
 -> ch.qos.logback.core.net.AbstractSocketAppender$1.run(AbstractSocketAppender.java:150)
 -> java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 -> java.util.concurrent.FutureTask.run(FutureTask.java:266)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.453 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]
 -> java.lang.Thread.dumpThreads(Native Method)
 -> java.lang.Thread.getAllStackTraces(Thread.java:1610)
 -> org.evosuite.testcase.execution.ExecutionTracer.isThreadNeqCurrentThread(ExecutionTracer.java:214)
 -> org.evosuite.testcase.execution.ExecutionTracer.returnValue(ExecutionTracer.java:311)
 -> org.apache.commons.csv.CSVFormat.toStringArray(CSVFormat.java:1197)
 -> org.apache.commons.csv.CSVFormat.<init>(CSVFormat.java:530)
 -> org.apache.commons.csv.CSVFormat.<clinit>(CSVFormat.java)
 -> org.apache.commons.csv.CSVFormat$Predefined.<clinit>(CSVFormat.java)
 -> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 -> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 -> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 -> java.lang.reflect.Method.invoke(Method.java:498)
 -> java.lang.Class.getEnumConstantsShared(Class.java:3320)
 -> java.lang.Class.getEnumConstants(Class.java:3297)
 -> org.evosuite.testcase.statements.EnumPrimitiveStatement.readObject(EnumPrimitiveStatement.java:264)
 -> sun.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
 -> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 -> java.lang.reflect.Method.invoke(Method.java:498)
 -> java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1184)
 -> java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2295)
 -> java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2186)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1666)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:502)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:460)
 -> java.util.ArrayList.readObject(ArrayList.java:799)
 -> sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)
 -> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 -> java.lang.reflect.Method.invoke(Method.java:498)
 -> java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1184)
 -> java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2295)
 -> java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2186)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1666)
 -> java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2404)
 -> java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2328)
 -> java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2186)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1666)
 -> java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2404)
 -> java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:632)
 -> org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103)
 -> sun.reflect.GeneratedMethodAccessor16.invoke(Unknown Source)
 -> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 -> java.lang.reflect.Method.invoke(Method.java:498)
 -> java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1184)
 -> java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2295)
 -> java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2186)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1666)
 -> java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2404)
 -> java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2328)
 -> java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2186)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1666)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:502)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:460)
 -> java.util.ArrayList.readObject(ArrayList.java:799)
 -> sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)
 -> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 -> java.lang.reflect.Method.invoke(Method.java:498)
 -> java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1184)
 -> java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2295)
 -> java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2186)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1666)
 -> java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2404)
 -> java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2328)
 -> java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2186)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1666)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:502)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:460)
 -> sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:327)
 -> sun.rmi.server.UnicastServerRef.unmarshalParametersUnchecked(UnicastServerRef.java:629)
 -> sun.rmi.server.UnicastServerRef.unmarshalParameters(UnicastServerRef.java:617)
 -> sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:338)
 -> sun.rmi.transport.Transport$1.run(Transport.java:200)
 -> sun.rmi.transport.Transport$1.run(Transport.java:197)
 -> java.security.AccessController.doPrivileged(Native Method)
 -> sun.rmi.transport.Transport.serviceCall(Transport.java:196)
 -> sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$20/1902004726.run(Unknown Source)
 -> java.security.AccessController.doPrivileged(Native Method)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.453 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[Thread-2,5,main]
 -> java.io.FileInputStream.readBytes(Native Method)
 -> java.io.FileInputStream.read(FileInputStream.java:255)
 -> java.io.BufferedInputStream.read1(BufferedInputStream.java:284)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:345)
 -> sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
 -> sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
 -> sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
 -> java.io.InputStreamReader.read(InputStreamReader.java:184)
 -> java.io.BufferedReader.fill(BufferedReader.java:161)
 -> java.io.BufferedReader.read(BufferedReader.java:182)
 -> org.evosuite.utils.ExternalProcessGroupHandler$3.run(ExternalProcessGroupHandler.java:482)

[MASTER] 12:39:38.454 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[logback-1,5,main]
 -> java.lang.Thread.sleep(Native Method)
 -> ch.qos.logback.core.net.DefaultSocketConnector.call(DefaultSocketConnector.java:73)
 -> ch.qos.logback.core.net.AbstractSocketAppender.socketConnectionCouldBeEstablished(AbstractSocketAppender.java:209)
 -> ch.qos.logback.core.net.AbstractSocketAppender.connectSocketAndDispatchEvents(AbstractSocketAppender.java:189)
 -> ch.qos.logback.core.net.AbstractSocketAppender.access$000(AbstractSocketAppender.java:44)
 -> ch.qos.logback.core.net.AbstractSocketAppender$1.run(AbstractSocketAppender.java:150)
 -> java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 -> java.util.concurrent.FutureTask.run(FutureTask.java:266)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:39:38.454 [RMI TCP Connection(3)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[main,5,main]
 -> java.net.SocketInputStream.socketRead0(Native Method)
 -> java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
 -> java.net.SocketInputStream.read(SocketInputStream.java:171)
 -> java.net.SocketInputStream.read(SocketInputStream.java:141)
 -> java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:265)
 -> java.io.DataInputStream.readByte(DataInputStream.java:265)
 -> sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:240)
 -> sun.rmi.server.UnicastRef.invoke(UnicastRef.java:164)
 -> java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:235)
 -> java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:180)
 -> com.sun.proxy.$Proxy7.waitUntilFinished(Unknown Source)
 -> org.evosuite.utils.ExternalProcessGroupHandler.waitForResult(ExternalProcessGroupHandler.java:694)
 -> org.evosuite.executionmode.TestGeneration.generateTests(TestGeneration.java:515)
 -> org.evosuite.executionmode.TestGeneration.executeTestGeneration(TestGeneration.java:80)
 -> org.evosuite.EvoSuite.parseCommandLine(EvoSuite.java:349)
 -> org.evosuite.EvoSuite.main(EvoSuite.java:115)

* Search finished after 601s and 2051 generations, 821934 statements, best individual has fitness: 184.0
* Minimizing test suite
[MASTER] 12:50:29.561 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 336
* Number of covered goals: 328
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 331
* Number of covered goals: 319
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 39
* Number of covered goals: 39
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 898
* Number of covered goals: 862
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 92%
* Total number of goals: 828
* Number of covered goals: 759
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 65
* Number of covered goals: 65
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 65
* Number of covered goals: 65
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 94%
* Total number of goals: 331
* Number of covered goals: 310
* Generated 279 tests with total length 5442
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 12:51:15.977 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7352166666666666% of time used, but only 12/279 tests minimized), falling back to using all assertions
[MASTER] 12:51:31.941 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
[MASTER] 12:52:05.801 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:52:05.874 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:52:05.934 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:52:05.997 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:52:06.077 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:52:06.144 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:52:06.207 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:52:06.258 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:52:06.312 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:52:06.373 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:52:06.430 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:52:06.528 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:52:06.594 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:52:06.752 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:52:06.975 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:52:20.667 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected not same
[MASTER] 12:52:20.777 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.RFC4180;
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getTrim());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertNotNull(cSVFormat0);

CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getTrim());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getTrailingDelimiter());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuoteMode());
assertNull(cSVFormat1.getEscapeCharacter());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getTrim());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertNotNull(cSVFormat1);

CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat1);
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertTrue(cSVFormat2.equals((Object)cSVFormat1));
assertTrue(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getTrim());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getTrailingDelimiter());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuoteMode());
assertNull(cSVFormat1.getEscapeCharacter());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getTrim());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat2.isNullStringSet());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertFalse(cSVFormat2.getAllowMissingColumnNames());
assertNull(cSVFormat2.getCommentMarker());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.isEscapeCharacterSet());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertFalse(cSVFormat2.getTrim());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertNull(cSVFormat2.getEscapeCharacter());
assertFalse(cSVFormat2.getTrailingDelimiter());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertEquals(',', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getNullString());
assertNull(cSVFormat2.getQuoteMode());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertNotNull(cSVFormat2);

QuoteMode quoteMode0 = QuoteMode.ALL;
CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat2);
assertTrue(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getTrim());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat3.getTrim());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertTrue(cSVFormat3.isQuoteCharacterSet());
assertNull(cSVFormat3.getEscapeCharacter());
assertFalse(cSVFormat3.getIgnoreHeaderCase());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertFalse(cSVFormat3.isEscapeCharacterSet());
assertEquals(QuoteMode.ALL, cSVFormat3.getQuoteMode());
assertFalse(cSVFormat3.isCommentMarkerSet());
assertNull(cSVFormat3.getCommentMarker());
assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
assertFalse(cSVFormat3.isNullStringSet());
assertFalse(cSVFormat3.getAllowMissingColumnNames());
assertFalse(cSVFormat3.getTrailingDelimiter());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertNotNull(cSVFormat3);

CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces(false);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat3);
assertTrue(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertTrue(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertTrue(cSVFormat4.equals((Object)cSVFormat0));
assertTrue(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertTrue(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getTrim());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getTrailingDelimiter());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuoteMode());
assertNull(cSVFormat1.getEscapeCharacter());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getTrim());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat4.getIgnoreHeaderCase());
assertNull(cSVFormat4.getQuoteMode());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertEquals(',', cSVFormat4.getDelimiter());
assertNull(cSVFormat4.getCommentMarker());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertFalse(cSVFormat4.getTrailingDelimiter());
assertNull(cSVFormat4.getEscapeCharacter());
assertFalse(cSVFormat4.isNullStringSet());
assertNull(cSVFormat4.getNullString());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat4.getTrim());
assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
assertFalse(cSVFormat4.getAllowMissingColumnNames());
assertFalse(cSVFormat4.isCommentMarkerSet());
assertTrue(cSVFormat4.isQuoteCharacterSet());
assertFalse(cSVFormat4.isEscapeCharacterSet());
assertNotNull(cSVFormat4);

CSVFormat cSVFormat5 = cSVFormat3.withSkipHeaderRecord();
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat5);
assertNotSame(cSVFormat5, cSVFormat2);
assertNotSame(cSVFormat5, cSVFormat4);
assertNotSame(cSVFormat5, cSVFormat3);
assertNotSame(cSVFormat5, cSVFormat1);
assertNotSame(cSVFormat5, cSVFormat0);
assertTrue(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat4));
assertFalse(cSVFormat5.equals((Object)cSVFormat2));
assertFalse(cSVFormat5.equals((Object)cSVFormat4));
assertFalse(cSVFormat5.equals((Object)cSVFormat3));
assertFalse(cSVFormat5.equals((Object)cSVFormat1));
assertFalse(cSVFormat5.equals((Object)cSVFormat0));
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getTrim());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat3.getTrim());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertTrue(cSVFormat3.isQuoteCharacterSet());
assertNull(cSVFormat3.getEscapeCharacter());
assertFalse(cSVFormat3.getIgnoreHeaderCase());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertFalse(cSVFormat3.isEscapeCharacterSet());
assertEquals(QuoteMode.ALL, cSVFormat3.getQuoteMode());
assertFalse(cSVFormat3.isCommentMarkerSet());
assertNull(cSVFormat3.getCommentMarker());
assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
assertFalse(cSVFormat3.isNullStringSet());
assertFalse(cSVFormat3.getAllowMissingColumnNames());
assertFalse(cSVFormat3.getTrailingDelimiter());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat5.isEscapeCharacterSet());
assertTrue(cSVFormat5.getSkipHeaderRecord());
assertEquals(',', cSVFormat5.getDelimiter());
assertFalse(cSVFormat5.getAllowMissingColumnNames());
assertEquals("\r\n", cSVFormat5.getRecordSeparator());
assertFalse(cSVFormat5.isCommentMarkerSet());
assertEquals(QuoteMode.ALL, cSVFormat5.getQuoteMode());
assertFalse(cSVFormat5.getIgnoreHeaderCase());
assertNull(cSVFormat5.getCommentMarker());
assertFalse(cSVFormat5.getTrailingDelimiter());
assertNull(cSVFormat5.getNullString());
assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat5.isQuoteCharacterSet());
assertNull(cSVFormat5.getEscapeCharacter());
assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
assertFalse(cSVFormat5.isNullStringSet());
assertFalse(cSVFormat5.getTrim());
assertFalse(cSVFormat5.getIgnoreEmptyLines());
assertNotNull(cSVFormat5);

CSVFormat cSVFormat6 = cSVFormat4.withRecordSeparator("The header contains a duplicate name: \"");
assertNotSame(cSVFormat0, cSVFormat6);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat6);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat6);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat5);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat6, cSVFormat3);
assertNotSame(cSVFormat6, cSVFormat0);
assertNotSame(cSVFormat6, cSVFormat2);
assertNotSame(cSVFormat6, cSVFormat4);
assertNotSame(cSVFormat6, cSVFormat5);
assertNotSame(cSVFormat6, cSVFormat1);
assertTrue(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat5));
assertTrue(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat4));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertTrue(cSVFormat4.equals((Object)cSVFormat0));
assertTrue(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat5));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertTrue(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat6.equals((Object)cSVFormat3));
assertFalse(cSVFormat6.equals((Object)cSVFormat0));
assertFalse(cSVFormat6.equals((Object)cSVFormat2));
assertFalse(cSVFormat6.equals((Object)cSVFormat4));
assertFalse(cSVFormat6.equals((Object)cSVFormat5));
assertFalse(cSVFormat6.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getTrim());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getTrailingDelimiter());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuoteMode());
assertNull(cSVFormat1.getEscapeCharacter());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getTrim());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat4.getIgnoreHeaderCase());
assertNull(cSVFormat4.getQuoteMode());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertEquals(',', cSVFormat4.getDelimiter());
assertNull(cSVFormat4.getCommentMarker());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertFalse(cSVFormat4.getTrailingDelimiter());
assertNull(cSVFormat4.getEscapeCharacter());
assertFalse(cSVFormat4.isNullStringSet());
assertNull(cSVFormat4.getNullString());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat4.getTrim());
assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
assertFalse(cSVFormat4.getAllowMissingColumnNames());
assertFalse(cSVFormat4.isCommentMarkerSet());
assertTrue(cSVFormat4.isQuoteCharacterSet());
assertFalse(cSVFormat4.isEscapeCharacterSet());
assertFalse(cSVFormat6.isEscapeCharacterSet());
assertFalse(cSVFormat6.isNullStringSet());
assertNull(cSVFormat6.getNullString());
assertEquals(',', cSVFormat6.getDelimiter());
assertNull(cSVFormat6.getCommentMarker());
assertFalse(cSVFormat6.getTrailingDelimiter());
assertFalse(cSVFormat6.getAllowMissingColumnNames());
assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat6.isQuoteCharacterSet());
assertFalse(cSVFormat6.isCommentMarkerSet());
assertNull(cSVFormat6.getEscapeCharacter());
assertFalse(cSVFormat6.getIgnoreHeaderCase());
assertFalse(cSVFormat6.getIgnoreEmptyLines());
assertFalse(cSVFormat6.getTrim());
assertEquals("The header contains a duplicate name: \"", cSVFormat6.getRecordSeparator());
assertNull(cSVFormat6.getQuoteMode());
assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
assertFalse(cSVFormat6.getSkipHeaderRecord());
assertNotNull(cSVFormat6);

CSVFormat cSVFormat7 = cSVFormat6.withRecordSeparator("=z3");
assertNotSame(cSVFormat0, cSVFormat6);
assertNotSame(cSVFormat0, cSVFormat7);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat7);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat6);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat6);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat7);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat5);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat6, cSVFormat7);
assertNotSame(cSVFormat6, cSVFormat3);
assertNotSame(cSVFormat6, cSVFormat0);
assertNotSame(cSVFormat6, cSVFormat2);
assertNotSame(cSVFormat6, cSVFormat4);
assertNotSame(cSVFormat6, cSVFormat5);
assertNotSame(cSVFormat6, cSVFormat1);
assertNotSame(cSVFormat7, cSVFormat0);
assertNotSame(cSVFormat7, cSVFormat1);
assertNotSame(cSVFormat7, cSVFormat3);
assertNotSame(cSVFormat7, cSVFormat5);
assertNotSame(cSVFormat7, cSVFormat2);
assertNotSame(cSVFormat7, cSVFormat4);
assertNotSame(cSVFormat7, cSVFormat6);
assertFalse(cSVFormat0.equals((Object)cSVFormat6));
assertTrue(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat5));
assertTrue(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat4));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat6));
assertFalse(cSVFormat4.equals((Object)cSVFormat6));
assertTrue(cSVFormat4.equals((Object)cSVFormat0));
assertTrue(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat5));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertTrue(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat6.equals((Object)cSVFormat3));
assertFalse(cSVFormat6.equals((Object)cSVFormat0));
assertFalse(cSVFormat6.equals((Object)cSVFormat2));
assertFalse(cSVFormat6.equals((Object)cSVFormat4));
assertFalse(cSVFormat6.equals((Object)cSVFormat5));
assertFalse(cSVFormat6.equals((Object)cSVFormat1));
assertFalse(cSVFormat7.equals((Object)cSVFormat0));
assertFalse(cSVFormat7.equals((Object)cSVFormat1));
assertFalse(cSVFormat7.equals((Object)cSVFormat3));
assertFalse(cSVFormat7.equals((Object)cSVFormat5));
assertFalse(cSVFormat7.equals((Object)cSVFormat2));
assertFalse(cSVFormat7.equals((Object)cSVFormat4));
assertFalse(cSVFormat7.equals((Object)cSVFormat6));
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getTrim());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getTrailingDelimiter());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuoteMode());
assertNull(cSVFormat1.getEscapeCharacter());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getTrim());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat4.getIgnoreHeaderCase());
assertNull(cSVFormat4.getQuoteMode());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertEquals(',', cSVFormat4.getDelimiter());
assertNull(cSVFormat4.getCommentMarker());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertFalse(cSVFormat4.getTrailingDelimiter());
assertNull(cSVFormat4.getEscapeCharacter());
assertFalse(cSVFormat4.isNullStringSet());
assertNull(cSVFormat4.getNullString());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat4.getTrim());
assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
assertFalse(cSVFormat4.getAllowMissingColumnNames());
assertFalse(cSVFormat4.isCommentMarkerSet());
assertTrue(cSVFormat4.isQuoteCharacterSet());
assertFalse(cSVFormat4.isEscapeCharacterSet());
assertFalse(cSVFormat6.isEscapeCharacterSet());
assertFalse(cSVFormat6.isNullStringSet());
assertNull(cSVFormat6.getNullString());
assertEquals(',', cSVFormat6.getDelimiter());
assertNull(cSVFormat6.getCommentMarker());
assertFalse(cSVFormat6.getTrailingDelimiter());
assertFalse(cSVFormat6.getAllowMissingColumnNames());
assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat6.isQuoteCharacterSet());
assertFalse(cSVFormat6.isCommentMarkerSet());
assertNull(cSVFormat6.getEscapeCharacter());
assertFalse(cSVFormat6.getIgnoreHeaderCase());
assertFalse(cSVFormat6.getIgnoreEmptyLines());
assertFalse(cSVFormat6.getTrim());
assertEquals("The header contains a duplicate name: \"", cSVFormat6.getRecordSeparator());
assertNull(cSVFormat6.getQuoteMode());
assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
assertFalse(cSVFormat6.getSkipHeaderRecord());
assertNull(cSVFormat7.getNullString());
assertFalse(cSVFormat7.getAllowMissingColumnNames());
assertEquals("=z3", cSVFormat7.getRecordSeparator());
assertFalse(cSVFormat7.getTrailingDelimiter());
assertFalse(cSVFormat7.isCommentMarkerSet());
assertTrue(cSVFormat7.isQuoteCharacterSet());
assertFalse(cSVFormat7.getIgnoreHeaderCase());
assertEquals(',', cSVFormat7.getDelimiter());
assertNull(cSVFormat7.getQuoteMode());
assertNull(cSVFormat7.getCommentMarker());
assertFalse(cSVFormat7.isEscapeCharacterSet());
assertFalse(cSVFormat7.getSkipHeaderRecord());
assertNull(cSVFormat7.getEscapeCharacter());
assertFalse(cSVFormat7.isNullStringSet());
assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat7.getTrim());
assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
assertFalse(cSVFormat7.getIgnoreEmptyLines());
assertNotNull(cSVFormat7);

CSVFormat cSVFormat8 = cSVFormat7.withNullString("The header contains a duplicate name: \"");
assertNotSame(cSVFormat0, cSVFormat6);
assertNotSame(cSVFormat0, cSVFormat7);
assertNotSame(cSVFormat0, cSVFormat8);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat7);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat8);
assertNotSame(cSVFormat1, cSVFormat6);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat6);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat7);
assertNotSame(cSVFormat4, cSVFormat8);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat5);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat6, cSVFormat7);
assertNotSame(cSVFormat6, cSVFormat3);
assertNotSame(cSVFormat6, cSVFormat0);
assertNotSame(cSVFormat6, cSVFormat2);
assertNotSame(cSVFormat6, cSVFormat4);
assertNotSame(cSVFormat6, cSVFormat5);
assertNotSame(cSVFormat6, cSVFormat1);
assertNotSame(cSVFormat6, cSVFormat8);
assertNotSame(cSVFormat7, cSVFormat0);
assertNotSame(cSVFormat7, cSVFormat1);
assertNotSame(cSVFormat7, cSVFormat3);
assertNotSame(cSVFormat7, cSVFormat8);
assertNotSame(cSVFormat7, cSVFormat5);
assertNotSame(cSVFormat7, cSVFormat2);
assertNotSame(cSVFormat7, cSVFormat4);
assertNotSame(cSVFormat7, cSVFormat6);
assertNotSame(cSVFormat8, cSVFormat1);
assertNotSame(cSVFormat8, cSVFormat2);
assertNotSame(cSVFormat8, cSVFormat4);
assertNotSame(cSVFormat8, cSVFormat3);
assertNotSame(cSVFormat8, cSVFormat0);
assertNotSame(cSVFormat8, cSVFormat7);
assertNotSame(cSVFormat8, cSVFormat5);
assertNotSame(cSVFormat8, cSVFormat6);
assertFalse(cSVFormat0.equals((Object)cSVFormat6));
assertFalse(cSVFormat0.equals((Object)cSVFormat7));
assertTrue(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertFalse(cSVFormat1.equals((Object)cSVFormat7));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat5));
assertTrue(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat4));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat6));
assertFalse(cSVFormat4.equals((Object)cSVFormat6));
assertTrue(cSVFormat4.equals((Object)cSVFormat0));
assertTrue(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat7));
assertFalse(cSVFormat4.equals((Object)cSVFormat5));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertTrue(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat6.equals((Object)cSVFormat7));
assertFalse(cSVFormat6.equals((Object)cSVFormat3));
assertFalse(cSVFormat6.equals((Object)cSVFormat0));
assertFalse(cSVFormat6.equals((Object)cSVFormat2));
assertFalse(cSVFormat6.equals((Object)cSVFormat4));
assertFalse(cSVFormat6.equals((Object)cSVFormat5));
assertFalse(cSVFormat6.equals((Object)cSVFormat1));
assertFalse(cSVFormat7.equals((Object)cSVFormat0));
assertFalse(cSVFormat7.equals((Object)cSVFormat1));
assertFalse(cSVFormat7.equals((Object)cSVFormat3));
assertFalse(cSVFormat7.equals((Object)cSVFormat5));
assertFalse(cSVFormat7.equals((Object)cSVFormat2));
assertFalse(cSVFormat7.equals((Object)cSVFormat4));
assertFalse(cSVFormat7.equals((Object)cSVFormat6));
assertFalse(cSVFormat8.equals((Object)cSVFormat1));
assertFalse(cSVFormat8.equals((Object)cSVFormat2));
assertFalse(cSVFormat8.equals((Object)cSVFormat4));
assertFalse(cSVFormat8.equals((Object)cSVFormat3));
assertFalse(cSVFormat8.equals((Object)cSVFormat0));
assertFalse(cSVFormat8.equals((Object)cSVFormat7));
assertFalse(cSVFormat8.equals((Object)cSVFormat5));
assertFalse(cSVFormat8.equals((Object)cSVFormat6));
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getTrim());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getTrailingDelimiter());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuoteMode());
assertNull(cSVFormat1.getEscapeCharacter());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getTrim());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat4.getIgnoreHeaderCase());
assertNull(cSVFormat4.getQuoteMode());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertEquals(',', cSVFormat4.getDelimiter());
assertNull(cSVFormat4.getCommentMarker());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertFalse(cSVFormat4.getTrailingDelimiter());
assertNull(cSVFormat4.getEscapeCharacter());
assertFalse(cSVFormat4.isNullStringSet());
assertNull(cSVFormat4.getNullString());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat4.getTrim());
assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
assertFalse(cSVFormat4.getAllowMissingColumnNames());
assertFalse(cSVFormat4.isCommentMarkerSet());
assertTrue(cSVFormat4.isQuoteCharacterSet());
assertFalse(cSVFormat4.isEscapeCharacterSet());
assertFalse(cSVFormat6.isEscapeCharacterSet());
assertFalse(cSVFormat6.isNullStringSet());
assertNull(cSVFormat6.getNullString());
assertEquals(',', cSVFormat6.getDelimiter());
assertNull(cSVFormat6.getCommentMarker());
assertFalse(cSVFormat6.getTrailingDelimiter());
assertFalse(cSVFormat6.getAllowMissingColumnNames());
assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat6.isQuoteCharacterSet());
assertFalse(cSVFormat6.isCommentMarkerSet());
assertNull(cSVFormat6.getEscapeCharacter());
assertFalse(cSVFormat6.getIgnoreHeaderCase());
assertFalse(cSVFormat6.getIgnoreEmptyLines());
assertFalse(cSVFormat6.getTrim());
assertEquals("The header contains a duplicate name: \"", cSVFormat6.getRecordSeparator());
assertNull(cSVFormat6.getQuoteMode());
assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
assertFalse(cSVFormat6.getSkipHeaderRecord());
assertNull(cSVFormat7.getNullString());
assertFalse(cSVFormat7.getAllowMissingColumnNames());
assertEquals("=z3", cSVFormat7.getRecordSeparator());
assertFalse(cSVFormat7.getTrailingDelimiter());
assertFalse(cSVFormat7.isCommentMarkerSet());
assertTrue(cSVFormat7.isQuoteCharacterSet());
assertFalse(cSVFormat7.getIgnoreHeaderCase());
assertEquals(',', cSVFormat7.getDelimiter());
assertNull(cSVFormat7.getQuoteMode());
assertNull(cSVFormat7.getCommentMarker());
assertFalse(cSVFormat7.isEscapeCharacterSet());
assertFalse(cSVFormat7.getSkipHeaderRecord());
assertNull(cSVFormat7.getEscapeCharacter());
assertFalse(cSVFormat7.isNullStringSet());
assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat7.getTrim());
assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
assertFalse(cSVFormat7.getIgnoreEmptyLines());
assertEquals("The header contains a duplicate name: \"", cSVFormat8.getNullString());
assertFalse(cSVFormat8.getTrailingDelimiter());
assertNull(cSVFormat8.getEscapeCharacter());
assertFalse(cSVFormat8.getTrim());
assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
assertNull(cSVFormat8.getQuoteMode());
assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
assertFalse(cSVFormat8.getIgnoreEmptyLines());
assertTrue(cSVFormat8.isNullStringSet());
assertFalse(cSVFormat8.getSkipHeaderRecord());
assertFalse(cSVFormat8.isEscapeCharacterSet());
assertEquals(',', cSVFormat8.getDelimiter());
assertFalse(cSVFormat8.getAllowMissingColumnNames());
assertEquals("=z3", cSVFormat8.getRecordSeparator());
assertTrue(cSVFormat8.isQuoteCharacterSet());
assertFalse(cSVFormat8.isCommentMarkerSet());
assertNull(cSVFormat8.getCommentMarker());
assertFalse(cSVFormat8.getIgnoreHeaderCase());
assertNotNull(cSVFormat8);

String string0 = cSVFormat8.toString();
assertNotSame(cSVFormat0, cSVFormat6);
assertNotSame(cSVFormat0, cSVFormat7);
assertNotSame(cSVFormat0, cSVFormat8);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat7);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat8);
assertNotSame(cSVFormat1, cSVFormat6);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat6);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat7);
assertNotSame(cSVFormat4, cSVFormat8);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat5);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat6, cSVFormat7);
assertNotSame(cSVFormat6, cSVFormat3);
assertNotSame(cSVFormat6, cSVFormat0);
assertNotSame(cSVFormat6, cSVFormat2);
assertNotSame(cSVFormat6, cSVFormat4);
assertNotSame(cSVFormat6, cSVFormat5);
assertNotSame(cSVFormat6, cSVFormat1);
assertNotSame(cSVFormat6, cSVFormat8);
assertNotSame(cSVFormat7, cSVFormat0);
assertNotSame(cSVFormat7, cSVFormat1);
assertNotSame(cSVFormat7, cSVFormat3);
assertNotSame(cSVFormat7, cSVFormat8);
assertNotSame(cSVFormat7, cSVFormat5);
assertNotSame(cSVFormat7, cSVFormat2);
assertNotSame(cSVFormat7, cSVFormat4);
assertNotSame(cSVFormat7, cSVFormat6);
assertNotSame(cSVFormat8, cSVFormat1);
assertNotSame(cSVFormat8, cSVFormat2);
assertNotSame(cSVFormat8, cSVFormat4);
assertNotSame(cSVFormat8, cSVFormat3);
assertNotSame(cSVFormat8, cSVFormat0);
assertNotSame(cSVFormat8, cSVFormat7);
assertNotSame(cSVFormat8, cSVFormat5);
assertNotSame(cSVFormat8, cSVFormat6);
assertFalse(cSVFormat0.equals((Object)cSVFormat6));
assertFalse(cSVFormat0.equals((Object)cSVFormat7));
assertFalse(cSVFormat0.equals((Object)cSVFormat8));
assertTrue(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertFalse(cSVFormat1.equals((Object)cSVFormat7));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat5));
assertFalse(cSVFormat1.equals((Object)cSVFormat8));
assertTrue(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat4));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat6));
assertFalse(cSVFormat4.equals((Object)cSVFormat6));
assertTrue(cSVFormat4.equals((Object)cSVFormat0));
assertTrue(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat7));
assertFalse(cSVFormat4.equals((Object)cSVFormat8));
assertFalse(cSVFormat4.equals((Object)cSVFormat5));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertTrue(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat6.equals((Object)cSVFormat7));
assertFalse(cSVFormat6.equals((Object)cSVFormat3));
assertFalse(cSVFormat6.equals((Object)cSVFormat0));
assertFalse(cSVFormat6.equals((Object)cSVFormat2));
assertFalse(cSVFormat6.equals((Object)cSVFormat4));
assertFalse(cSVFormat6.equals((Object)cSVFormat5));
assertFalse(cSVFormat6.equals((Object)cSVFormat1));
assertFalse(cSVFormat6.equals((Object)cSVFormat8));
assertFalse(cSVFormat7.equals((Object)cSVFormat0));
assertFalse(cSVFormat7.equals((Object)cSVFormat1));
assertFalse(cSVFormat7.equals((Object)cSVFormat3));
assertFalse(cSVFormat7.equals((Object)cSVFormat8));
assertFalse(cSVFormat7.equals((Object)cSVFormat5));
assertFalse(cSVFormat7.equals((Object)cSVFormat2));
assertFalse(cSVFormat7.equals((Object)cSVFormat4));
assertFalse(cSVFormat7.equals((Object)cSVFormat6));
assertFalse(cSVFormat8.equals((Object)cSVFormat1));
assertFalse(cSVFormat8.equals((Object)cSVFormat2));
assertFalse(cSVFormat8.equals((Object)cSVFormat4));
assertFalse(cSVFormat8.equals((Object)cSVFormat3));
assertFalse(cSVFormat8.equals((Object)cSVFormat0));
assertFalse(cSVFormat8.equals((Object)cSVFormat7));
assertFalse(cSVFormat8.equals((Object)cSVFormat5));
assertFalse(cSVFormat8.equals((Object)cSVFormat6));
assertEquals("Delimiter=<,> QuoteChar=<\"> NullString=<The header contains a duplicate name: \"> RecordSeparator=<=z3> SkipHeaderRecord:false", string0);
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getTrim());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getTrailingDelimiter());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuoteMode());
assertNull(cSVFormat1.getEscapeCharacter());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getTrim());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat4.getIgnoreHeaderCase());
assertNull(cSVFormat4.getQuoteMode());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertEquals(',', cSVFormat4.getDelimiter());
assertNull(cSVFormat4.getCommentMarker());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertFalse(cSVFormat4.getTrailingDelimiter());
assertNull(cSVFormat4.getEscapeCharacter());
assertFalse(cSVFormat4.isNullStringSet());
assertNull(cSVFormat4.getNullString());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat4.getTrim());
assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
assertFalse(cSVFormat4.getAllowMissingColumnNames());
assertFalse(cSVFormat4.isCommentMarkerSet());
assertTrue(cSVFormat4.isQuoteCharacterSet());
assertFalse(cSVFormat4.isEscapeCharacterSet());
assertFalse(cSVFormat6.isEscapeCharacterSet());
assertFalse(cSVFormat6.isNullStringSet());
assertNull(cSVFormat6.getNullString());
assertEquals(',', cSVFormat6.getDelimiter());
assertNull(cSVFormat6.getCommentMarker());
assertFalse(cSVFormat6.getTrailingDelimiter());
assertFalse(cSVFormat6.getAllowMissingColumnNames());
assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat6.isQuoteCharacterSet());
assertFalse(cSVFormat6.isCommentMarkerSet());
assertNull(cSVFormat6.getEscapeCharacter());
assertFalse(cSVFormat6.getIgnoreHeaderCase());
assertFalse(cSVFormat6.getIgnoreEmptyLines());
assertFalse(cSVFormat6.getTrim());
assertEquals("The header contains a duplicate name: \"", cSVFormat6.getRecordSeparator());
assertNull(cSVFormat6.getQuoteMode());
assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
assertFalse(cSVFormat6.getSkipHeaderRecord());
assertNull(cSVFormat7.getNullString());
assertFalse(cSVFormat7.getAllowMissingColumnNames());
assertEquals("=z3", cSVFormat7.getRecordSeparator());
assertFalse(cSVFormat7.getTrailingDelimiter());
assertFalse(cSVFormat7.isCommentMarkerSet());
assertTrue(cSVFormat7.isQuoteCharacterSet());
assertFalse(cSVFormat7.getIgnoreHeaderCase());
assertEquals(',', cSVFormat7.getDelimiter());
assertNull(cSVFormat7.getQuoteMode());
assertNull(cSVFormat7.getCommentMarker());
assertFalse(cSVFormat7.isEscapeCharacterSet());
assertFalse(cSVFormat7.getSkipHeaderRecord());
assertNull(cSVFormat7.getEscapeCharacter());
assertFalse(cSVFormat7.isNullStringSet());
assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat7.getTrim());
assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
assertFalse(cSVFormat7.getIgnoreEmptyLines());
assertEquals("The header contains a duplicate name: \"", cSVFormat8.getNullString());
assertFalse(cSVFormat8.getTrailingDelimiter());
assertNull(cSVFormat8.getEscapeCharacter());
assertFalse(cSVFormat8.getTrim());
assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
assertNull(cSVFormat8.getQuoteMode());
assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
assertFalse(cSVFormat8.getIgnoreEmptyLines());
assertTrue(cSVFormat8.isNullStringSet());
assertFalse(cSVFormat8.getSkipHeaderRecord());
assertFalse(cSVFormat8.isEscapeCharacterSet());
assertEquals(',', cSVFormat8.getDelimiter());
assertFalse(cSVFormat8.getAllowMissingColumnNames());
assertEquals("=z3", cSVFormat8.getRecordSeparator());
assertTrue(cSVFormat8.isQuoteCharacterSet());
assertFalse(cSVFormat8.isCommentMarkerSet());
assertNull(cSVFormat8.getCommentMarker());
assertFalse(cSVFormat8.getIgnoreHeaderCase());
assertNotNull(string0);

QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
assertNotSame(quoteMode1, quoteMode0);
assertFalse(quoteMode1.equals((Object)quoteMode0));
assertEquals(QuoteMode.NON_NUMERIC, quoteMode1);

CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
CSVFormat cSVFormat9 = cSVFormat_Predefined0.getFormat();
assertNotSame(cSVFormat9, cSVFormat0);
assertNotSame(cSVFormat9, cSVFormat5);
assertNotSame(cSVFormat9, cSVFormat7);
assertNotSame(cSVFormat9, cSVFormat3);
assertNotSame(cSVFormat9, cSVFormat1);
assertNotSame(cSVFormat9, cSVFormat2);
assertNotSame(cSVFormat9, cSVFormat8);
assertNotSame(cSVFormat9, cSVFormat4);
assertNotSame(cSVFormat9, cSVFormat6);
assertTrue(cSVFormat9.equals((Object)cSVFormat4));
assertFalse(cSVFormat9.equals((Object)cSVFormat5));
assertFalse(cSVFormat9.equals((Object)cSVFormat7));
assertTrue(cSVFormat9.equals((Object)cSVFormat2));
assertFalse(cSVFormat9.equals((Object)cSVFormat3));
assertFalse(cSVFormat9.equals((Object)cSVFormat8));
assertTrue(cSVFormat9.equals((Object)cSVFormat1));
assertTrue(cSVFormat9.equals((Object)cSVFormat0));
assertFalse(cSVFormat9.equals((Object)cSVFormat6));
assertFalse(cSVFormat9.getIgnoreHeaderCase());
assertNull(cSVFormat9.getEscapeCharacter());
assertTrue(cSVFormat9.isQuoteCharacterSet());
assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat9.getTrim());
assertEquals(',', cSVFormat9.getDelimiter());
assertFalse(cSVFormat9.getSkipHeaderRecord());
assertFalse(cSVFormat9.getTrailingDelimiter());
assertNull(cSVFormat9.getNullString());
assertNull(cSVFormat9.getQuoteMode());
assertFalse(cSVFormat9.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
assertFalse(cSVFormat9.getAllowMissingColumnNames());
assertFalse(cSVFormat9.isNullStringSet());
assertFalse(cSVFormat9.isEscapeCharacterSet());
assertFalse(cSVFormat9.isCommentMarkerSet());
assertNull(cSVFormat9.getCommentMarker());
assertEquals("\r\n", cSVFormat9.getRecordSeparator());
assertNotNull(cSVFormat9);

boolean boolean0 = cSVFormat9.equals(cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat6);
assertNotSame(cSVFormat0, cSVFormat7);
assertNotSame(cSVFormat0, cSVFormat8);
assertNotSame(cSVFormat0, cSVFormat9);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(quoteMode0, quoteMode1);
assertNotSame(cSVFormat3, cSVFormat9);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat7);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat8);
assertNotSame(cSVFormat3, cSVFormat6);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat5);
assertNotSame(cSVFormat9, cSVFormat0);
assertNotSame(cSVFormat9, cSVFormat5);
assertNotSame(cSVFormat9, cSVFormat7);
assertNotSame(cSVFormat9, cSVFormat3);
assertNotSame(cSVFormat9, cSVFormat1);
assertNotSame(cSVFormat9, cSVFormat2);
assertNotSame(cSVFormat9, cSVFormat8);
assertNotSame(cSVFormat9, cSVFormat4);
assertNotSame(cSVFormat9, cSVFormat6);
assertFalse(cSVFormat0.equals((Object)cSVFormat6));
assertFalse(cSVFormat0.equals((Object)cSVFormat7));
assertFalse(cSVFormat0.equals((Object)cSVFormat8));
assertTrue(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat0.equals((Object)cSVFormat4));
assertTrue(cSVFormat0.equals((Object)cSVFormat9));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertFalse(quoteMode0.equals((Object)quoteMode1));
assertFalse(cSVFormat3.equals((Object)cSVFormat9));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat7));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat8));
assertFalse(cSVFormat3.equals((Object)cSVFormat6));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat4));
assertFalse(cSVFormat3.equals((Object)cSVFormat5));
assertTrue(cSVFormat9.equals((Object)cSVFormat4));
assertFalse(cSVFormat9.equals((Object)cSVFormat5));
assertFalse(cSVFormat9.equals((Object)cSVFormat7));
assertTrue(cSVFormat9.equals((Object)cSVFormat2));
assertFalse(cSVFormat9.equals((Object)cSVFormat3));
assertFalse(cSVFormat9.equals((Object)cSVFormat8));
assertTrue(cSVFormat9.equals((Object)cSVFormat1));
assertTrue(cSVFormat9.equals((Object)cSVFormat0));
assertFalse(cSVFormat9.equals((Object)cSVFormat6));
assertFalse(boolean0);
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getTrim());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat3.getTrim());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertTrue(cSVFormat3.isQuoteCharacterSet());
assertNull(cSVFormat3.getEscapeCharacter());
assertFalse(cSVFormat3.getIgnoreHeaderCase());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertFalse(cSVFormat3.isEscapeCharacterSet());
assertEquals(QuoteMode.ALL, cSVFormat3.getQuoteMode());
assertFalse(cSVFormat3.isCommentMarkerSet());
assertNull(cSVFormat3.getCommentMarker());
assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
assertFalse(cSVFormat3.isNullStringSet());
assertFalse(cSVFormat3.getAllowMissingColumnNames());
assertFalse(cSVFormat3.getTrailingDelimiter());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat9.getIgnoreHeaderCase());
assertNull(cSVFormat9.getEscapeCharacter());
assertTrue(cSVFormat9.isQuoteCharacterSet());
assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat9.getTrim());
assertEquals(',', cSVFormat9.getDelimiter());
assertFalse(cSVFormat9.getSkipHeaderRecord());
assertFalse(cSVFormat9.getTrailingDelimiter());
assertNull(cSVFormat9.getNullString());
assertNull(cSVFormat9.getQuoteMode());
assertFalse(cSVFormat9.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
assertFalse(cSVFormat9.getAllowMissingColumnNames());
assertFalse(cSVFormat9.isNullStringSet());
assertFalse(cSVFormat9.isEscapeCharacterSet());
assertFalse(cSVFormat9.isCommentMarkerSet());
assertNull(cSVFormat9.getCommentMarker());
assertEquals("\r\n", cSVFormat9.getRecordSeparator());

ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
CSVFormat cSVFormat10 = cSVFormat1.withHeader(resultSet0);
assertNotSame(cSVFormat10, cSVFormat6);
assertNotSame(cSVFormat10, cSVFormat9);
assertNotSame(cSVFormat10, cSVFormat5);
assertNotSame(cSVFormat10, cSVFormat2);
assertNotSame(cSVFormat10, cSVFormat4);
assertNotSame(cSVFormat10, cSVFormat7);
assertNotSame(cSVFormat10, cSVFormat3);
assertNotSame(cSVFormat10, cSVFormat8);
assertNotSame(cSVFormat10, cSVFormat0);
assertNotSame(cSVFormat10, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat6);
assertNotSame(cSVFormat0, cSVFormat7);
assertNotSame(cSVFormat0, cSVFormat8);
assertNotSame(cSVFormat0, cSVFormat9);
assertNotSame(cSVFormat0, cSVFormat10);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat7);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat8);
assertNotSame(cSVFormat1, cSVFormat9);
assertNotSame(cSVFormat1, cSVFormat10);
assertNotSame(cSVFormat1, cSVFormat6);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertFalse(cSVFormat10.equals((Object)cSVFormat6));
assertTrue(cSVFormat10.equals((Object)cSVFormat4));
assertFalse(cSVFormat10.equals((Object)cSVFormat5));
assertTrue(cSVFormat10.equals((Object)cSVFormat0));
assertTrue(cSVFormat10.equals((Object)cSVFormat1));
assertFalse(cSVFormat10.equals((Object)cSVFormat7));
assertFalse(cSVFormat10.equals((Object)cSVFormat3));
assertFalse(cSVFormat10.equals((Object)cSVFormat8));
assertTrue(cSVFormat10.equals((Object)cSVFormat2));
assertTrue(cSVFormat10.equals((Object)cSVFormat9));
assertFalse(cSVFormat0.equals((Object)cSVFormat6));
assertFalse(cSVFormat0.equals((Object)cSVFormat7));
assertFalse(cSVFormat0.equals((Object)cSVFormat8));
assertTrue(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat0.equals((Object)cSVFormat4));
assertTrue(cSVFormat0.equals((Object)cSVFormat9));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertFalse(cSVFormat1.equals((Object)cSVFormat7));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat5));
assertFalse(cSVFormat1.equals((Object)cSVFormat8));
assertTrue(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat4));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat6));
assertTrue(cSVFormat1.equals((Object)cSVFormat9));
assertNull(cSVFormat10.getCommentMarker());
assertEquals("\r\n", cSVFormat10.getRecordSeparator());
assertFalse(cSVFormat10.getTrim());
assertFalse(cSVFormat10.getIgnoreHeaderCase());
assertFalse(cSVFormat10.getIgnoreEmptyLines());
assertNull(cSVFormat10.getQuoteMode());
assertTrue(cSVFormat10.isQuoteCharacterSet());
assertFalse(cSVFormat10.isEscapeCharacterSet());
assertFalse(cSVFormat10.getSkipHeaderRecord());
assertNull(cSVFormat10.getNullString());
assertEquals('\"', (char)cSVFormat10.getQuoteCharacter());
assertFalse(cSVFormat10.isNullStringSet());
assertFalse(cSVFormat10.isCommentMarkerSet());
assertFalse(cSVFormat10.getIgnoreSurroundingSpaces());
assertNull(cSVFormat10.getEscapeCharacter());
assertFalse(cSVFormat10.getAllowMissingColumnNames());
assertEquals(',', cSVFormat10.getDelimiter());
assertFalse(cSVFormat10.getTrailingDelimiter());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getTrim());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getTrailingDelimiter());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuoteMode());
assertNull(cSVFormat1.getEscapeCharacter());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getTrim());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertNotNull(cSVFormat10);

boolean boolean1 = cSVFormat10.getTrim();
assertNotSame(cSVFormat10, cSVFormat6);
assertNotSame(cSVFormat10, cSVFormat9);
assertNotSame(cSVFormat10, cSVFormat5);
assertNotSame(cSVFormat10, cSVFormat2);
assertNotSame(cSVFormat10, cSVFormat4);
assertNotSame(cSVFormat10, cSVFormat7);
assertNotSame(cSVFormat10, cSVFormat3);
assertNotSame(cSVFormat10, cSVFormat8);
assertNotSame(cSVFormat10, cSVFormat0);
assertNotSame(cSVFormat10, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat6);
assertNotSame(cSVFormat0, cSVFormat7);
assertNotSame(cSVFormat0, cSVFormat8);
assertNotSame(cSVFormat0, cSVFormat9);
assertNotSame(cSVFormat0, cSVFormat10);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat7);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat8);
assertNotSame(cSVFormat1, cSVFormat9);
assertNotSame(cSVFormat1, cSVFormat10);
assertNotSame(cSVFormat1, cSVFormat6);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertFalse(cSVFormat10.equals((Object)cSVFormat6));
assertTrue(cSVFormat10.equals((Object)cSVFormat4));
assertFalse(cSVFormat10.equals((Object)cSVFormat5));
assertTrue(cSVFormat10.equals((Object)cSVFormat0));
assertTrue(cSVFormat10.equals((Object)cSVFormat1));
assertFalse(cSVFormat10.equals((Object)cSVFormat7));
assertFalse(cSVFormat10.equals((Object)cSVFormat3));
assertFalse(cSVFormat10.equals((Object)cSVFormat8));
assertTrue(cSVFormat10.equals((Object)cSVFormat2));
assertTrue(cSVFormat10.equals((Object)cSVFormat9));
assertFalse(cSVFormat0.equals((Object)cSVFormat6));
assertFalse(cSVFormat0.equals((Object)cSVFormat7));
assertFalse(cSVFormat0.equals((Object)cSVFormat8));
assertTrue(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat0.equals((Object)cSVFormat4));
assertTrue(cSVFormat0.equals((Object)cSVFormat9));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertTrue(cSVFormat0.equals((Object)cSVFormat10));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertTrue(boolean1 == boolean0);
assertFalse(cSVFormat1.equals((Object)cSVFormat7));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertTrue(cSVFormat1.equals((Object)cSVFormat10));
assertFalse(cSVFormat1.equals((Object)cSVFormat5));
assertFalse(cSVFormat1.equals((Object)cSVFormat8));
assertTrue(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat4));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat6));
assertTrue(cSVFormat1.equals((Object)cSVFormat9));
assertFalse(boolean1);
assertNull(cSVFormat10.getCommentMarker());
assertEquals("\r\n", cSVFormat10.getRecordSeparator());
assertFalse(cSVFormat10.getTrim());
assertFalse(cSVFormat10.getIgnoreHeaderCase());
assertFalse(cSVFormat10.getIgnoreEmptyLines());
assertNull(cSVFormat10.getQuoteMode());
assertTrue(cSVFormat10.isQuoteCharacterSet());
assertFalse(cSVFormat10.isEscapeCharacterSet());
assertFalse(cSVFormat10.getSkipHeaderRecord());
assertNull(cSVFormat10.getNullString());
assertEquals('\"', (char)cSVFormat10.getQuoteCharacter());
assertFalse(cSVFormat10.isNullStringSet());
assertFalse(cSVFormat10.isCommentMarkerSet());
assertFalse(cSVFormat10.getIgnoreSurroundingSpaces());
assertNull(cSVFormat10.getEscapeCharacter());
assertFalse(cSVFormat10.getAllowMissingColumnNames());
assertEquals(',', cSVFormat10.getDelimiter());
assertFalse(cSVFormat10.getTrailingDelimiter());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getTrim());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getTrailingDelimiter());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuoteMode());
assertNull(cSVFormat1.getEscapeCharacter());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getTrim());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertTrue(cSVFormat1.isQuoteCharacterSet());

char char0 = cSVFormat1.getDelimiter();
assertNotSame(cSVFormat0, cSVFormat6);
assertNotSame(cSVFormat0, cSVFormat7);
assertNotSame(cSVFormat0, cSVFormat8);
assertNotSame(cSVFormat0, cSVFormat9);
assertNotSame(cSVFormat0, cSVFormat10);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat7);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat8);
assertNotSame(cSVFormat1, cSVFormat9);
assertNotSame(cSVFormat1, cSVFormat10);
assertNotSame(cSVFormat1, cSVFormat6);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertFalse(cSVFormat0.equals((Object)cSVFormat6));
assertFalse(cSVFormat0.equals((Object)cSVFormat7));
assertFalse(cSVFormat0.equals((Object)cSVFormat8));
assertTrue(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat0.equals((Object)cSVFormat4));
assertTrue(cSVFormat0.equals((Object)cSVFormat9));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertTrue(cSVFormat0.equals((Object)cSVFormat10));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertFalse(cSVFormat1.equals((Object)cSVFormat7));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertTrue(cSVFormat1.equals((Object)cSVFormat10));
assertFalse(cSVFormat1.equals((Object)cSVFormat5));
assertFalse(cSVFormat1.equals((Object)cSVFormat8));
assertTrue(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat4));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat6));
assertTrue(cSVFormat1.equals((Object)cSVFormat9));
assertEquals(',', char0);
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getTrim());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getTrailingDelimiter());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuoteMode());
assertNull(cSVFormat1.getEscapeCharacter());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getTrim());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertTrue(cSVFormat1.isQuoteCharacterSet());


[MASTER] 12:52:29.722 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Writing tests to file
* Writing JUnit test case 'CSVFormat_ESTest' to results/Csv-14/org.apache.commons.csv.CSVFormat/BBC-F0-opt-40/tests/6
* Done!

* Computation finished
