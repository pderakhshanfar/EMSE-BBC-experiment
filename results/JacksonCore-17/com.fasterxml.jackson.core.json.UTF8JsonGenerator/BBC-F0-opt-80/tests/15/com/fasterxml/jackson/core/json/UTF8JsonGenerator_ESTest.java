/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 10:07:33 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(#f-}K#pV", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)0;
      byteArray0[2] = (byte) (-65);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2412, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      int int0 = (-894);
      uTF8JsonGenerator0.writeStartArray((-894));
      char[] charArray0 = new char[8];
      charArray0[0] = '\u009F';
      charArray0[1] = '\u009F';
      charArray0[2] = '\u009F';
      charArray0[3] = 'j';
      charArray0[4] = '\u009F';
      charArray0[5] = '\u009F';
      charArray0[6] = '\u009F';
      charArray0[7] = '\u009F';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 2412);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      char[] charArray0 = iOContext0.allocTokenBuffer(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString(charArray0, 9, 114);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      SerializedString serializedString0 = new SerializedString("Can not write a field name, expecting a value");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      int int0 = GeneratorBase.SURR1_FIRST;
      uTF8JsonGenerator0.writeString(charArray0, 81, 2345);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)46, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", (int) (byte)0, 595);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray0 = new byte[10];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2048, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeBooleanField("B}ed)P8wb{\"O|", false);
      mockFileOutputStream0.close();
      uTF8JsonGenerator0.writeRaw('');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 35, (-2894));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1#fKJpVI", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-66);
      String string0 = "@S&AX0{PjM+0x7#1ar";
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("@S&AX0{PjM+0x7#1ar", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 2, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 32);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 23 bytes (out of 32)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@/", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-117), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[5];
      uTF8JsonGenerator0._checkStdFeatureChanges((-3702), (-3702));
      charArray0[0] = '';
      charArray0[1] = '';
      uTF8JsonGenerator0.writeString(charArray0, 3, 1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      int int0 = GeneratorBase.SURR1_FIRST;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 55296);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "]_s0~X$]", true);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      char[] charArray0 = new char[6];
      try { 
        uTF8JsonGenerator0.writeNumber((long) 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)46;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)46, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 56319, false);
      iOContext0.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      Locale locale0 = Locale.ITALY;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "V=\u0004$#i6", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 102, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 56320;
      longArray0[4] = (long) 55296;
      longArray0[5] = (long) 3;
      longArray0[6] = (long) 57343;
      uTF8JsonGenerator0.writeArray(longArray0, 0, 2);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "p/BLDE", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream("p/BLDE");
      mockPrintStream0.print((double) (byte)14);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber((-0.6085392F));
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      String string0 = "write a string";
      IOContext iOContext1 = new IOContext(bufferRecycler0, "write a string", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 3, true);
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = '\u008F';
      charArray0[2] = 'Y';
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 70, (-2433));
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1187);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1187 bytes (out of 1187)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte) (-4);
      byteArray1[2] = (byte)17;
      byteArray1[3] = (byte)104;
      byteArray1[4] = (byte)125;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream0.reset();
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 250 bytes (out of 255)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "p/BLDE", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.print((double) (byte)14);
      mockPrintStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber(0.0F);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      Locale locale0 = Locale.ITALY;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "V=\u0004$#i6", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-54), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2);
      SerializedString serializedString0 = new SerializedString("V=\u0004$#i6");
      uTF8JsonGenerator0.writeNull();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "V=\u0004$#i6", false, 'h', 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "p/BLDE", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.print((double) (byte)14);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber(0.0F);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a raw (unencoded) value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 49, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for chracter code 0x");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.writeNumberField("", (long) 0);
      jsonGenerator0.writeStartObject((Object) null);
      System.setCurrentTimeMillis(3);
      mockFileOutputStream0.getChannel();
      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "com.fasterxmljackson.core.base.GeneratorBase";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxmljackson.core.base.GeneratorBase", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxmljackson.core.base.GeneratorBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocTokenBuffer(1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-78), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxmljackson.core.base.GeneratorBase", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxmljackson.core.base.GeneratorBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocTokenBuffer(1);
      byte[] byteArray0 = new byte[12];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-78), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-973));
      SerializedString serializedString0 = new SerializedString("com.fasterxmljackson.core.base.GeneratorBase");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "%", false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-135), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumberField("%", (long) 3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, (-2149), 1051);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")l'sMVw/&");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2048, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.writeNumberField("com.fasterxml.jackson.core.base.GeneratorBase", (long) 2);
      uTF8JsonGenerator0.writeStartObject((Object) null);
      System.setCurrentTimeMillis(3);
      mockFileOutputStream0.getChannel();
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      try { 
        uTF8JsonGenerator0.writeString("write a string");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for chracter code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeStartObject((Object) iOContext0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.writeNumberField("", (long) 0);
      System.setCurrentTimeMillis(3);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 85, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "com.fasterxml.jackson.core.base.GeneratorBase";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for chracter code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.writeNumberField("", (long) 0);
      jsonGenerator0.writeStartObject((Object) null);
      System.setCurrentTimeMillis(3);
      mockFileOutputStream0.getChannel();
      try { 
        jsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray0 = new byte[10];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[1] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 18, false);
      iOContext0.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      uTF8JsonGenerator0.writeFieldName("[Nh\"p?$aY=4\"d-Cq$y");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      Random.setNextRandom(3);
      uTF8JsonGenerator0.writeNumber((-133.3895914085979));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeNumber("?,N_YrV");
      uTF8JsonGenerator0._releaseBuffers();
      iOContext0.allocTokenBuffer(310);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 310, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRawUTF8String(byteArray0, 2, (-240));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)20;
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 43, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber((short) (byte)20);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "]!#z{qM09";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]!#z{qM09");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string1 = "p/BLDE";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "p/BLDE", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 18);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4525, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1130));
      SerializedString serializedString0 = new SerializedString("[Nh\"p?$aY=4\"d-Cq$y");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNull();
      Base64Variant base64Variant0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (-5350), 7220);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.setEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      Locale locale0 = Locale.ITALY;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeNumber("}-'p<^i*");
      uTF8JsonGenerator1._releaseBuffers();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)127;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocTokenBuffer(2031);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 114, false);
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (-428));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocTokenBuffer(1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-92), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      iOContext0.allocWriteEncodingBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = ".QVl=\\r,";
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "]_s0~X$]", true);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      char char0 = '\u0015';
      int int0 = 117;
      try { 
        uTF8JsonGenerator0.writeNumber((short)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBase", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = new Locale("w.>Gk3/^C<)");
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.print((double) 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 7998, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeNumber((-1.0F));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeString("?,N_YrV");
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = '\\';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.setEncoding(jsonEncoding0);
      String string0 = "[Nh\"p?$aY=4\"d-Cq$y";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      Locale locale0 = Locale.ITALY;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeNumber("}-'p<^i*");
      uTF8JsonGenerator1._releaseBuffers();
      uTF8JsonGenerator0.writeStartArray();
      iOContext1.allocWriteEncodingBuffer(2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(89);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Locale locale0 = Locale.FRANCE;
      mockPrintStream0.write(byteArray0, 110, 89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeBooleanField("write a string", true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeRaw('\u008B');
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 8, 110);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 3);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocTokenBuffer(1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocReadIOBuffer(2326);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      iOContext1.constructTextBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2326, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber("M2r|>sH%I{E1d1");
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyValueWrite("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 358, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 358, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 1, 66);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(89);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Locale locale0 = Locale.FRANCE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeBooleanField("write a string", true);
      uTF8JsonGenerator0.writeRaw('\u008B');
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 3);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocNameCopyBuffer(1);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte) (-66);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 794, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "write a string", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 3, true);
      int int0 = 42;
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = '\u008F';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = '\u008F';
      charArray0[5] = 'Y';
      charArray0[6] = '\u008F';
      charArray0[7] = 'Y';
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 1, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-458), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[3] = (byte)7;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonGenerator0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumberField("`%px[N=\"W\"cL", 1L);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, (-2950));
      String string0 = null;
      SerializedString serializedString0 = new SerializedString("");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y", false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4525, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1130));
      SerializedString serializedString0 = new SerializedString("[Nh\"p?$aY=4\"d-Cq$y");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "V", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      mockPrintStream0.print((-1167.45295896));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      iOContext1.allocReadIOBuffer(0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 25, true);
      int int0 = 65535;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 89, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumberField("x Ufn%{vH``$c!SR", (long) (byte)99);
      uTF8JsonGenerator0.writeNumber((short) (-528));
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ijEs=UUwV", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-137), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumberField("ijEs=UUwV", (long) 3);
      uTF8JsonGenerator0.writeNumber(1106.37375);
      uTF8JsonGenerator0.writeNumber(4635);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeString("ijEs=UUwV");
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Locale locale0 = Locale.ITALY;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)46, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      iOContext0.allocTokenBuffer(3);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("d5_OIqIcZCd, b;");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 506, true);
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '6';
      charArray0[2] = 'f';
      charArray0[3] = '4';
      charArray0[4] = 'M';
      charArray0[5] = '$';
      uTF8JsonGenerator0.writeRaw(charArray0, 1, 3);
      SerializedString serializedString0 = null;
      try {
        serializedString0 = new SerializedString((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Null String illegal for SerializedString
         //
         verifyException("com.fasterxml.jackson.core.io.SerializedString", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte byte0 = (byte)0;
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3815, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[2] = '\u008F';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)14, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray1 = new byte[10];
      byteArray1[1] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 18, false);
      iOContext0.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      uTF8JsonGenerator0.writeNumber(13.563047696860359);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 2);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 49, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("xc7>olu@HL6E_");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "V";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "V", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 48, true);
      uTF8JsonGenerator0.writeBinaryField("V", byteArray0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-210L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "com.fasterxml.jackson.core.base.GeneratorBase";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocTokenBuffer(1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-78), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-973));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF16_BE", true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      byteArray0[4] = (byte) (-23);
      byteArray0[6] = (byte) (-23);
      byteArray0[8] = (byte) (-23);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 4, true);
      uTF8JsonGenerator0.writeStartArray(1);
      byteArrayOutputStream0.flush();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.writeNumberField("UTF16_BE", (-308L));
      System.setCurrentTimeMillis(3);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("?j7,$\"~)EpL", "UTF16_BE", false, 'w', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 8)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 48, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 3684);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      Locale locale0 = Locale.ITALY;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "V=\u0004$#i6", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-54), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber((-397.25F));
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (-2106));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 0);
      uTF8JsonGenerator0.writeRaw("LxOI(i@");
      uTF8JsonGenerator0.writeNumber((-810.0F));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNullField("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1048, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer((-706));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("MvV{cx#o+ )j a-;D", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 3254, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 873);
      SerializedString serializedString0 = new SerializedString("MIME-NO-LINEFEEDS");
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 18, false);
      iOContext0.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeFieldName("[Nh\"p?$aY=4\"d-Cq$y");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Too few bytes available: missing ");
      Random.setNextRandom(54);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 487, (ObjectCodec) null, byteArrayOutputStream0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.setEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext2.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 491, true);
      uTF8JsonGenerator0.writeNumber((short)2000);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      int int0 = GeneratorBase.SURR2_FIRST;
      uTF8JsonGenerator0.writeRaw('');
      SerializedString serializedString1 = new SerializedString("gG/oB./a#t]");
      System.setCurrentTimeMillis(9223372036854775807L);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 55296, (ObjectCodec) null, byteArrayOutputStream1, byteArray1, 0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57375, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1114111, false);
      SerializedString serializedString0 = new SerializedString("#");
      SerializedString serializedString1 = new SerializedString("#");
      FileDescriptor fileDescriptor0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "p/BLDE", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.print((double) (byte)14);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber(0.0F);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (short)56, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1170, true);
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1857, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeStartObject((Object) pipedOutputStream0);
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-137), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber(1106.37375);
      uTF8JsonGenerator0.writeNumber(4635);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2250, true);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1849, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      serializedString0.asQuotedChars();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeArrayFieldStart("A");
      uTF8JsonGenerator0.writeNumber((short)56);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF16_BE", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      byteArray0[4] = (byte) (-23);
      byteArray0[6] = (byte) (-23);
      byteArray0[8] = (byte) (-23);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 4, true);
      byteArrayOutputStream0.flush();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.writeNumberField("UTF16_BE", (-308L));
      System.setCurrentTimeMillis(3);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1#fKJpVI");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[2] = (byte) (-65);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2240), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      char[] charArray0 = new char[6];
      charArray0[1] = 'Q';
      charArray0[2] = '5';
      charArray0[3] = 'Y';
      charArray0[4] = '_';
      charArray0[5] = 't';
      uTF8JsonGenerator0.writeBinary(byteArray0, 3, 2);
      uTF8JsonGenerator0.writeBinary(byteArray0, (int) (byte)81, (-1817));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("vhW9>");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.setEncoding(jsonEncoding0);
      iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      Locale locale0 = Locale.ITALY;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 49, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      uTF8JsonGenerator0.writeString(charArray0, 13, 0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeString(charArray0, 11, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, (byte)32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      iOContext0.allocTokenBuffer(1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 102, false);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.base.GeneratorBase");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-117), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte) (-23), true);
      byteArrayOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._verifyPrettyValueWrite("", 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -23
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Locale locale0 = Locale.ITALY;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)46, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "V", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 48, true);
      uTF8JsonGenerator0.writeBinaryField("V", byteArray0);
      uTF8JsonGenerator0.close();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(22);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-80);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, pipedInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 76, (-1089), true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 361, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (byte)58, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (-2106));
      uTF8JsonGenerator0.writeNumber((-810.0F));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1048, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 43, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      Locale locale0 = Locale.ITALY;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 56319, true);
      iOContext0.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocTokenBuffer(1);
      try { 
        uTF8JsonGenerator0.writeFieldName("('true', 'false' or 'null')");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-117), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumberField("", (long) 3);
      uTF8JsonGenerator0.writeNumber(1106.37375);
      uTF8JsonGenerator0.writeNumber(3);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-32768));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]!#z{qM09");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "p/BLDE", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte)14;
      byteArray1[4] = (byte)14;
      byteArray1[5] = (byte)14;
      byteArray1[6] = (byte)89;
      byteArray1[7] = (byte)14;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayBuilder0, byteArray1, (byte)14, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      iOContext0.allocTokenBuffer(1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 102, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._entityBuffer = byteArray0;
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale locale0 = Locale.ITALY;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Locale locale1 = Locale.PRC;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 50, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)46, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "]!#z{qM09";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]!#z{qM09");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "p/BLDE", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1._writePPFieldName(serializedString0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      int int0 = GeneratorBase.SURR2_FIRST;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-788), (ObjectCodec) null, mockPrintStream0, byteArray0, 21, false);
      uTF8JsonGenerator0.writeRaw('/');
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.base.GeneratorBasl");
      SerializedString serializedString1 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-117), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumberField("v", (long) 3);
      uTF8JsonGenerator0.writeNumber(1106.37375);
      uTF8JsonGenerator0.writeNumber(4635);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0._flushBuffer();
      SerializedString serializedString0 = new SerializedString("v");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(55296);
      BigInteger bigInteger0 = BigInteger.probablePrime(16, mockRandom0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 49, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-1006), (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Locale locale0 = Locale.ITALY;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)46, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber(313);
      System.setCurrentTimeMillis(3);
      iOContext1.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray1 = new byte[7];
      iOContext1.withEncoding(jsonEncoding0);
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)46;
      byteArray1[3] = (byte)46;
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte)46;
      byteArray1[6] = (byte)69;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (byte)69, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)21, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-282), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(1106.37375);
      uTF8JsonGenerator0.writeNumber((-363));
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.setEncoding(jsonEncoding0);
      iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      Locale locale0 = Locale.ITALY;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 49, true);
      iOContext0.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'C';
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      pipedOutputStream0.connect(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext3, 45, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeString(";7pE2i`k`T=wKY]}");
      uTF8JsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-117), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      BigDecimal bigDecimal0 = new BigDecimal((long) 2);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, (-1709));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qD)o*c)FIlwM>xzP");
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 48, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = 'j';
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (-2184));
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((float) 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y", false);
      mockFileOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 18, false);
      iOContext0.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      uTF8JsonGenerator0.writeNumber(13.563047696860359);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (byte)46, 1885);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 15, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-3773.5012F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1#fKJpVI");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)1;
      byteArray1[2] = (byte) (-65);
      byteArray1[5] = (byte) (-66);
      byteArray1[6] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2227), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 2, false);
      char[] charArray0 = new char[6];
      charArray0[1] = 'Q';
      charArray0[2] = '5';
      charArray0[3] = '5';
      uTF8JsonGenerator0.writeArrayFieldStart("");
      charArray0[4] = '_';
      charArray0[5] = 't';
      uTF8JsonGenerator0.writeBinary(byteArray1, 3, 2);
      uTF8JsonGenerator0.writeBinary(byteArray1, (int) (byte)108, (-1817));
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-353), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 4272, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iOContext2.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext2.allocReadIOBuffer(0);
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNull();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, (-2418), false);
      SerializedString serializedString0 = new SerializedString("Qx");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2418
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 48, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = 'j';
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (-2184));
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext2.allocReadIOBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, (-2), (ObjectCodec) null, (OutputStream) null, byteArray0, 255, false);
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0016';
      charArray0[3] = '\u0016';
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-117), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      try { 
        uTF8JsonGenerator0.writeFieldName("$z7Wci8,V");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      iOContext0.allocTokenBuffer(1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 102, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]!#z{qM09");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "p/BLDE", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.print((double) (byte)14);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "yGLW6HWht'p<", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2437), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1830), true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.configure(jsonGenerator_Feature0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator1, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1830
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)103;
      iOContext1.allocWriteEncodingBuffer();
      System.setCurrentTimeMillis((-5658));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 455, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(52);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-413), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber("h.$<LPu;d");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 789, 2098);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray1 = new byte[10];
      byteArray1[1] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 18, false);
      iOContext0.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      uTF8JsonGenerator0.writeNumber(13.563047696860359);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 35);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext1.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)41, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1165, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)42);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      int int0 = (-332);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      uTF8JsonGenerator0.writeStartObject();
      iOContext0.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 584, 584);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler1, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)103;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 55, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 24, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-117), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte) (-23), true);
      byteArrayOutputStream0.flush();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, false);
      filteringGeneratorDelegate0.getCharacterEscapes();
      uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      String string0 = "Split surrogate on writeRaw() input (last character)";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField("Split surrogate on writeRaw() input (last character)", (long) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -23
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 41, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = new SerializedString("Parser of type ");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.appendQuotedUTF8(byteArray0, 3);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 12, 4823);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1114111, false);
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocReadIOBuffer(2326);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2326, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw(')');
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.getOutputBuffered();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-964), (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = ".QVl=\\r,";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "]_s0~X$]", true);
      byte[] byteArray0 = new byte[5];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale locale0 = Locale.FRANCE;
      locale0.stripExtensions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1994, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = '*';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      uTF8JsonGenerator0.writeString(charArray0, 1, (-1595));
      try { 
        uTF8JsonGenerator0.writeRaw(".QVl=\r,", 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 'Y';
      charArray0[2] = 'T';
      charArray0[3] = 't';
      uTF8JsonGenerator0.writeNumber((-4074.1033F));
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 0);
      String string0 = "!F~XV,$j'D_c$S?V7";
      int int0 = 378;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("ir5]w,,{&QZq=LsAq", "", true, 'H', 22);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      iOContext2.allocReadIOBuffer(0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'r';
      charArray0[2] = '@';
      charArray0[3] = '.';
      charArray0[4] = 'a';
      charArray0[5] = '\\';
      charArray0[6] = 'q';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 11, false);
      byte[] byteArray1 = iOContext1.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 0, 18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, byteArrayOutputStream0);
      char char0 = 'x';
      uTF8JsonGenerator0.writeRaw('x');
      String string0 = "!'O%N1mk14";
      uTF8JsonGenerator0.writeNumber("!'O%N1mk14");
      uTF8JsonGenerator0._releaseBuffers();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.ITALY;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "[Nh\"p?$aY=4\"d-Cq$y", true);
      byte[] byteArray1 = iOContext2.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (-332), 106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte byte0 = (byte)0;
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3815, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = '\u0016';
      charArray0[2] = '}';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "yGLW6HWht'p<", true);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2437), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1830), true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1065, (ObjectCodec) null, pipedOutputStream1, byteArrayBuilder0.NO_BYTES, 1031, false);
      char char0 = '\u0016';
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber("-1");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        pipedOutputStream0.write(byteArray0, 3441, (-354));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "]_s0~X$]", true);
      byte[] byteArray0 = new byte[5];
      iOContext0.allocReadIOBuffer(15951);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 89, false);
      char char0 = '\u0016';
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-66);
      byteArray0[4] = (byte)103;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1493, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumberField("#>#3+^|=X", 380L);
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeNumber(4635);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 48, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = 'j';
      charArray0[2] = '\u0016';
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1279, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      iOContext2.allocReadIOBuffer(0);
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0016';
      charArray0[2] = '\u0016';
      charArray0[3] = '\u0016';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 65535, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-46);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 24, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-931), true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-441));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-66);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)36;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNull();
      Locale locale0 = Locale.CANADA_FRENCH;
      IOContext iOContext2 = new IOContext(bufferRecycler0, locale0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 56319, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)36, false);
      uTF8JsonGenerator0.writeNumber(44);
      System.setCurrentTimeMillis((-6L));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber(bigDecimal0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 6, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      uTF8JsonGenerator0.writeNull();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, (-1030));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "yGLW6HWht'p<", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2437), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1830), true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, "yGLW6HWht'p<", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext2.allocReadIOBuffer(0);
      int int0 = 1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0016';
      charArray0[2] = '\u0016';
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-588));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)876);
      uTF8JsonGenerator0.writeNumber((float) 3);
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber(940);
      System.setCurrentTimeMillis((-2686L));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 49, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw('x');
      uTF8JsonGenerator0.writeNumber("!'O%N1mk14");
      uTF8JsonGenerator0._releaseBuffers();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      int int0 = (-332);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 49, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      iOContext0.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 584, 584);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "]_s0~X$]", true);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, false);
      char char0 = '\u0016';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.base.GeneratorBasl", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) jsonEncoding0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4310, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)108, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)13;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)13, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('m');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "]_s0~X$]", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-27);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      try { 
        uTF8JsonGenerator0.writeRaw(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte byte0 = (byte)103;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0._verifyPrettyValueWrite("BM0SQE?flyZ.", 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      iOContext0.allocTokenBuffer(1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-78), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("");
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 93, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((-1020));
      System.setCurrentTimeMillis(0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((-2501.8563517166));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1#fKJpVI");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1399), (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, false, false);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeRaw('i');
      jsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw('c');
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw('x');
      uTF8JsonGenerator0.writeNumber("!'O%N1mk14");
      uTF8JsonGenerator0._releaseBuffers();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 49, false);
      uTF8JsonGenerator0.writeNumber(44);
      System.setCurrentTimeMillis((-654L));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((double) 1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-117), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 25, false);
      uTF8JsonGenerator0.writeString("]");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "com.fasterxml.jackson.core.base.GeneratorBasl";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 53, (ObjectCodec) null, pipedOutputStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      uTF8JsonGenerator0.writeBinaryField("com.fasterxml.jackson.core.base.GeneratorBasl", byteArray0);
      System.setCurrentTimeMillis((-1L));
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.US;
      locale1.getDisplayLanguage();
      iOContext1.allocBase64Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 29, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeString("");
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1#fKJpVI");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      byteArray0[2] = (byte) (-65);
      byteArray0[5] = (byte) (-66);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2240), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      char[] charArray0 = new char[6];
      charArray0[1] = 'Q';
      charArray0[2] = '%';
      charArray0[3] = 'Y';
      charArray0[4] = '_';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext2.allocReadIOBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0016';
      charArray0[2] = '\u0016';
      uTF8JsonGenerator0.writeNumber((short) (-588));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.appendUnquotedUTF8(byteArray0, 0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2326);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2326, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw(')');
      String string0 = "!'O%N1mk14";
      String string1 = "M2r|>sH%I{E1d1";
      mockPrintStream0.write(byteArray0);
      uTF8JsonGenerator0.writeNumber("M2r|>sH%I{E1d1");
      Base64Variant base64Variant0 = null;
      uTF8JsonGenerator0._releaseBuffers();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 55296);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 1939);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.US;
      locale1.getDisplayLanguage();
      iOContext1.allocBase64Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 29, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext2.allocReadIOBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0016';
      charArray0[2] = '\u0016';
      uTF8JsonGenerator0.writeNumber((short) (-588));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.appendUnquotedUTF8(byteArray0, 1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "yGLW6\\HWht'p<";
      IOContext iOContext1 = new IOContext(bufferRecycler0, "yGLW6HWht'p<", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      byte byte0 = (byte)96;
      int int0 = 1429;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 1429, true);
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-117), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumberField("P yjc$", 2756L);
      uTF8JsonGenerator0.writeNumber(1106.37375);
      uTF8JsonGenerator0.writeNumber(4635);
      uTF8JsonGenerator0.writeString("RWHQmrd_W-Om");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-117), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 25, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "com.fasterxml.jackson.core.base.GeneratorBase";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      iOContext0.allocTokenBuffer(1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3759, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      try { 
        uTF8JsonGenerator0.writeNumber("Invalid custom escape definitions; custom escape not found for character code 0x");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 49, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      iOContext0.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 115, 4263);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) 2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte byte0 = (byte) (-46);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 53, (ObjectCodec) null, pipedOutputStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-46);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumberField("com.fasterxml.jackson.core.base.GeneratorBasl", (long) 1);
      uTF8JsonGenerator1.writeNumber(1.0);
      uTF8JsonGenerator0.writeNumber(56320);
      uTF8JsonGenerator1.writeNumber((-129L));
      System.setCurrentTimeMillis(2756L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeString("?,N_YrV");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 5, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-111), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      String string1 = "P yjc$";
      uTF8JsonGenerator0.writeNumberField("P yjc$", 2756L);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)108);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      int int0 = 1431;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 5, 1431);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)876);
      uTF8JsonGenerator0.writeNumber((float) 3);
      iOContext0.withEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 32, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 48, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = 'j';
      charArray0[2] = '\u0016';
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 93;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 93, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2147, true);
      pipedOutputStream0.flush();
      try { 
        uTF8JsonGenerator0.writeNumberField("P yjc$", (long) (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      int int0 = 5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 27, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 27, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1#fKJpVI");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)1;
      byteArray0[2] = (byte) (-65);
      byteArray0[5] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 65, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3594, 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = locale0.stripExtensions();
      locale1.getDisplayLanguage();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 29, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber(1280.183987133);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.base.GeneratorBasl", 0, 27);
      uTF8JsonGenerator0._verifyPrettyValueWrite("", (byte)0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write((-339));
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-111), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumberField("P yjc$", 2756L);
      uTF8JsonGenerator0.writeNumber(1106.37375);
      uTF8JsonGenerator0.writeNumber(4635);
      uTF8JsonGenerator0.writeNumber((-9223372036854775808L));
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte) (-66);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)36;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString((char[]) null, (int) (byte)96, (int) (byte) (-66));
      uTF8JsonGenerator0.writeNumber((long) (byte)49);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 2, 1122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-111), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumberField("P yjc$", 2756L);
      uTF8JsonGenerator0.writeNumber(1106.37375);
      uTF8JsonGenerator0.writeNumber((long) (-111));
      uTF8JsonGenerator0.writeBinary(byteArray0, 1, 0);
      System.setCurrentTimeMillis(1);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.US;
      locale1.getDisplayLanguage();
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 29, (ObjectCodec) null, mockPrintStream0, byteArray1, 3, true);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 3871, (int) (byte)0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3871, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext2.allocReadIOBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0016';
      charArray0[2] = '\u0016';
      int int0 = (-1262);
      int int1 = 8000;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)876);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 32, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H'Qpqk/x@6");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.US;
      locale1.getDisplayLanguage();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 29, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 21, true);
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = 't';
      charArray0[2] = ',';
      charArray0[3] = '4';
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, (int) (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-830), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = '\u0016';
      charArray0[2] = 'V';
      charArray0[3] = 'j';
      charArray0[4] = 'V';
      charArray0[5] = '\u0016';
      charArray0[6] = 'V';
      charArray0[7] = 'j';
      charArray0[8] = '\u0016';
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)48;
      uTF8JsonGenerator0.writeBinaryField("com.fasterxml.jackson.core.base.GeneratorBasl", byteArray1);
      uTF8JsonGenerator0.writeString(charArray0, 765, (-870));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-870), (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext2.allocReadIOBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1293, false);
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0016';
      charArray0[2] = '\u0016';
      charArray0[3] = '\u0016';
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 65535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 263, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      iOContext0.allocBase64Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(56320);
      pipedOutputStream0.connect(pipedInputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber((double) 57343);
      uTF8JsonGenerator0.writeNumber((short)56);
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 1053);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = locale0.stripExtensions();
      locale1.getDisplayLanguage();
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      locale1.stripExtensions();
      byteArray0[3] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)96;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 180, true);
      uTF8JsonGenerator0._entityBuffer = byteArray0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, (int) (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3976, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(1713.81);
      uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-66);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)36;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNull();
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeStartObject(object0);
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, (int) (byte)96, (int) (byte) (-66));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-111), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumberField("P yjc$", 2756L);
      uTF8JsonGenerator0.writeNumber(1106.37375);
      uTF8JsonGenerator0.writeNumber(4635);
      uTF8JsonGenerator0.writeNumber((-9223372036854775808L));
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1747), (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber(5);
      System.setCurrentTimeMillis(2);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      jsonGenerator0.writeNumber((double) 2);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-544), (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber((float) (-544));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(58);
      pipedOutputStream0.connect(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1786, (ObjectCodec) null, mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-544), (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((-3027.349184228633));
      uTF8JsonGenerator0.writeString(";7pE2i`k`T=wKY]}");
      uTF8JsonGenerator0.writeFieldName(";7pE2i`k`T=wKY]}");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 48, false);
      char[] charArray0 = new char[3];
      uTF8JsonGenerator0.writeStringField("", "");
      int int0 = 1547;
      int int1 = 34;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 48, 34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      locale0.getDisplayLanguage();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Italian", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (-2504), true);
      char[] charArray0 = new char[5];
      charArray0[1] = 's';
      charArray0[2] = 'I';
      charArray0[3] = ':';
      charArray0[4] = '0';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2504
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = '5';
      charArray0[2] = 'c';
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4635, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(4635);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-66);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)36;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeString((char[]) null, (int) (byte)96, (int) (byte) (-66));
      uTF8JsonGenerator0.writeNumber((long) (byte)52);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 2, 1099);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1#fKJpVI");
      byte[] byteArray0 = new byte[7];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1399), (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, false, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte)96, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2427, false);
      uTF8JsonGenerator0.writeNumber(0.0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeString("1#fKJpVI");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(128);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 91, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._flushBuffer();
      String string0 = "write a string";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("write a string", (-635));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = locale0.stripExtensions();
      locale1.getDisplayLanguage();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 29, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 3871, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) jsonEncoding0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4310, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw("L~&&E(m,{S");
      uTF8JsonGenerator0._verifyValueWrite("L~&&E(m,{S");
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = '\'';
      charArray0[2] = '!';
      charArray0[3] = '~';
      charArray0[4] = 'T';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 3, 9);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-46);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1451, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      charArray0[5] = 'V';
      uTF8JsonGenerator0.writeString(charArray0, 11, (int) (byte) (-46));
      uTF8JsonGenerator0.writeNumber((short) (byte) (-46));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1#fKJpVI");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)1;
      byteArray0[2] = (byte) (-65);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2240), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      char[] charArray0 = new char[6];
      charArray0[1] = 'Q';
      charArray0[2] = '5';
      charArray0[3] = 'Y';
      charArray0[4] = '_';
      charArray0[5] = 't';
      uTF8JsonGenerator0.writeString(charArray0, 9, 0);
      uTF8JsonGenerator0.writeBinary(byteArray0, 3, 2);
      uTF8JsonGenerator0.writeBinary(byteArray0, 26, (-1817));
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("\"Z4");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "yGLW6HWht'p<", true);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2437), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1830), true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1830
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)36;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      char[] charArray0 = null;
      uTF8JsonGenerator0.writeString((char[]) null, (int) (byte)96, (int) (byte) (-66));
      uTF8JsonGenerator0.writeNumber((long) (byte)52);
      uTF8JsonGenerator0.writeNumber((-2527.12359));
      uTF8JsonGenerator0.writeNumber((short) (byte) (-66));
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "tNV1fU*|OVVpQ|", false, 'G', 1731);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 14)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)96;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 5, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte) (-66), 2);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1293, true);
      uTF8JsonGenerator0.setHighestNonEscapedChar(0);
      char[] charArray0 = new char[4];
      charArray0[1] = 'V';
      charArray0[2] = '\u0016';
      charArray0[3] = 'j';
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 65535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte) (-66);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1648, false);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, (-98), (-2785));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      char[] charArray0 = iOContext1.allocTokenBuffer(1);
      int int0 = (-819);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 6, (ObjectCodec) null, mockFileOutputStream0);
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, 57343);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      int int0 = (-822);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-822), (ObjectCodec) null, (OutputStream) null, byteArray0, (-822), false);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, (-4395), 6697);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)96;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 946, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '2';
      charArray0[2] = '.';
      charArray0[3] = '.';
      charArray0[4] = '?';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-197), (-42));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext3.allocWriteEncodingBuffer();
      int int0 = (-1619);
      iOContext2.allocBase64Buffer();
      int int1 = (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1619), (ObjectCodec) null, (OutputStream) null, byteArray0, (-1), false);
      String string1 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField("", 1752L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 109, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-4339), true);
      char char0 = '\u0016';
      char char1 = 'j';
      char char2 = 'V';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      int int0 = (-332);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      mockFileOutputStream0.getChannel();
      byteArray0[1] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2174), (ObjectCodec) null, mockPrintStream0, byteArray0, 6128, false);
      uTF8JsonGenerator0.writeNumber((double) (-2174));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-3182));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)96;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1747), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber(5);
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = locale0.stripExtensions();
      locale1.getDisplayLanguage();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 29, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber(1280.183987133);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocReadIOBuffer(2326);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 49, false);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeNumber("-1");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      int int0 = (-111);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)78;
      byteArray0[0] = (byte)78;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      String string0 = "`P+==Gb6s.HQ\\H!j9";
      try { 
        uTF8JsonGenerator0.writeNumberField("`P+==Gb6s.HQH!j9", 2147483647L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-111), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumberField("P yjc$", 2756L);
      uTF8JsonGenerator0.writeNumber(1106.37375);
      uTF8JsonGenerator0.writeNumber(4635);
      uTF8JsonGenerator0.writeNumber((-9223372036854775808L));
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = locale0.stripExtensions();
      locale1.getDisplayLanguage();
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber("Italian");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "yGLWHWqht'p<", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      try { 
        uTF8JsonGenerator0.writeNumber(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) jsonEncoding0;
      objectArray0[4] = (Object) bufferRecycler0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4310, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.base.GeneratorBase");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 306, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      PipedInputStream pipedInputStream0 = new PipedInputStream(957);
      pipedOutputStream0.connect(pipedInputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeNumber((short)56);
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-46);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1451, true);
      uTF8JsonGenerator0.writeString((String) null);
      pipedOutputStream0.flush();
      uTF8JsonGenerator0.writeNumber((-2726.8851));
      uTF8JsonGenerator0.writeNumber((short)219);
      uTF8JsonGenerator0.writeNumber((float) 0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 48, false);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 48, 6697);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocReadIOBuffer(2326);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 49, false);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeNumber("-1");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "yGLW6HWht'p<", true);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1341), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1596, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-2960), (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeString("0A9-B1,Dt");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 306, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      serializedString0.asQuotedUTF8();
      PipedInputStream pipedInputStream0 = new PipedInputStream(957);
      pipedOutputStream0.connect(pipedInputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeNumber((short)56);
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 1053);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      uTF8JsonGenerator0.writeBoolean(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0016';
      charArray0[1] = '\u0016';
      charArray0[2] = 'V';
      uTF8JsonGenerator0.writeString(charArray0, (-1842), (-4881));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte byte0 = (byte) (-1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte) (-1), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.type.TypeReference");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-111), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumberField("P yjc$", 2756L);
      uTF8JsonGenerator0.writeNumber(1106.37375);
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      iOContext1.allocTokenBuffer((-1876));
      uTF8JsonGenerator0.writeString(charArray0, 2, (-819));
      uTF8JsonGenerator0.writeRaw("", 0, (-819));
      uTF8JsonGenerator0.writeString("~@|TCNuh Q.d]3LU<5");
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "yGLW6\\HWht'p<";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yGLW6HWht'p<");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "yGLW6HWht'p<", true);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte) (-46), (-2167));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) jsonEncoding0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-3), true);
      String string0 = "-1";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("-1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1293, true);
      uTF8JsonGenerator0._rootValueSeparator = null;
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = 'j';
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 65535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-111), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumberField("P yjc$", 2756L);
      uTF8JsonGenerator0.writeNumber(1106.37375);
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      uTF8JsonGenerator0.writeString(charArray0, 2, (-819));
      uTF8JsonGenerator0.writeRaw("", 0, (-819));
      uTF8JsonGenerator0.writeString("~@|TCNuh Q.d]3LU<5");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = locale0.stripExtensions();
      locale1.getDisplayLanguage();
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.lookup(linkedList0, list1);
      byteArray0[3] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)96;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 180, true);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeNumber((long) 2);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 119, 115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 119
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1#fKJpVI");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)1;
      byteArray0[2] = (byte) (-65);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2240), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      char[] charArray0 = new char[6];
      char char0 = 'Q';
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 306, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      PipedInputStream pipedInputStream0 = new PipedInputStream(957);
      pipedOutputStream0.connect(pipedInputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeNumber((long) 0);
      System.setCurrentTimeMillis(0L);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = false;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      Locale locale0 = Locale.ITALY;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 100, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("-1");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 639, (ObjectCodec) null, mockPrintStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler1, object0, true);
      IOContext iOContext3 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext3, 0, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[Nh\"p?$aY=4\"d-Cq$y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-332), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 49, false);
      uTF8JsonGenerator0.writeNumber("-1");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "com.fasterxml.jackson.core.base.GeneratorBasl";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = locale0.stripExtensions();
      locale1.getDisplayLanguage();
      byte byte0 = (byte) (-66);
      byte byte1 = (byte)96;
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.lookup(linkedList0, list1);
      byteArray0[3] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)96;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 180, true);
      uTF8JsonGenerator0._entityBuffer = byteArray0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, (int) (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      String string0 = null;
      String string1 = "";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4, 2747);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 57343;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw('8');
      uTF8JsonGenerator0.writeNumber("");
      Base64Variant base64Variant0 = null;
      boolean boolean0 = true;
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) jsonEncoding0;
      objectArray0[4] = (Object) bufferRecycler0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber("-1");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 0, 3279);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      iOContext0.allocReadIOBuffer(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      iOContext1.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      char[] charArray0 = new char[6];
      charArray0[1] = 'P';
      charArray0[2] = '\'';
      char char0 = '+';
      charArray0[3] = '+';
      charArray0[4] = 'Y';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1#fKJpVI");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)1;
      byteArray0[2] = (byte) (-65);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2240), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      char[] charArray0 = new char[6];
      charArray0[1] = 'Q';
      charArray0[2] = '5';
      charArray0[3] = 'Y';
      charArray0[4] = '_';
      charArray0[5] = 't';
      uTF8JsonGenerator0.writeString(charArray0, 9, 0);
      uTF8JsonGenerator0.writeBinary(byteArray0, 3, 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 114, (int) (byte)73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 114
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(192);
      uTF8JsonGenerator0.writeNumber(842L);
      System.setCurrentTimeMillis(5);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 29, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d3PUH}E|$");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "yGLWHWqht'p<", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeBinary(byteArray0, (-798), (int) (byte)0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, (int) (byte)13, (int) (byte)13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "yGLW6HWht'p<", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      try { 
        uTF8JsonGenerator0.writeString("yGLW6HWht'p<");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d3PUH}E|$");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "yGLWHWqht'p<", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 2511, 2048);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2511
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-111), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumberField("P yjc$", 2756L);
      uTF8JsonGenerator0.writeNumber(1106.37375);
      uTF8JsonGenerator0.writeNumber(4635);
      uTF8JsonGenerator0.writeNumber((-9223372036854775808L));
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(957);
      pipedOutputStream0.connect(pipedInputStream0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber((short)56);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = 55296;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte) (-66);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 794, true);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte) (-1), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      iOContext0.constructTextBuffer();
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-66);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-563), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeStartArray();
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4, 2747);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 106, (ObjectCodec) null, (OutputStream) null, byteArray1, 794, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-321.879));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) jsonEncoding0;
      objectArray0[4] = (Object) bufferRecycler0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4310, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)96;
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1747), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(5);
      uTF8JsonGenerator0.writeNumber(0L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "yGLW\\HWqht'p<";
      IOContext iOContext1 = new IOContext(bufferRecycler0, "yGLWHWqht'p<", false);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      int int0 = 65535;
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = '\u0016';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 23, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      String string0 = "";
      int int0 = 78;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1#fKJpVI");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2240), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = 'Q';
      charArray0[2] = '5';
      charArray0[3] = 'Y';
      charArray0[4] = '_';
      charArray0[5] = 't';
      uTF8JsonGenerator0.writeString(charArray0, 9, 0);
      uTF8JsonGenerator0.writeNumber(4);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("1#fKJpVI", "", true, 'g', 35);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1#fKJpVI");
      byte[] byteArray0 = new byte[7];
      mockFileOutputStream0.write(byteArray0);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2240), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = 'Q';
      charArray0[2] = '5';
      charArray0[3] = 'Y';
      charArray0[4] = '_';
      charArray0[5] = 't';
      uTF8JsonGenerator0.writeString(charArray0, 9, 0);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte) (-66);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 48, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)103, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-111), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumberField("P yjc$", 2756L);
      uTF8JsonGenerator0.writeNumber(1106.37375);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("TrI,Bf|IlIc+/_=LBl", "+pGA", true, '{', 647);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 4)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) jsonEncoding0;
      objectArray0[4] = (Object) bufferRecycler0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber("-1");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte) (-66);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 794, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      byteArrayOutputStream0.flush();
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2582, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(224);
      uTF8JsonGenerator0.writeNumber((long) 3);
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1293, true);
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = '\u0016';
      charArray0[3] = 'j';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 65535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = locale0.stripExtensions();
      locale1.getDisplayLanguage();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.lookup(linkedList0, list1);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)96;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 180, true);
      uTF8JsonGenerator0._entityBuffer = byteArray0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 3, (int) (byte)34);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)103;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = '+';
      charArray0[3] = 'V';
      charArray0[4] = '+';
      charArray0[5] = 'V';
      charArray0[6] = '+';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-66), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) (byte)103);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)96;
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1747), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(5);
      uTF8JsonGenerator0.writeNumber(0L);
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, "yGLWHWqht'p<", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 2, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((byte[]) null, 2204, 2204);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 306, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      PipedInputStream pipedInputStream0 = new PipedInputStream(957);
      pipedOutputStream0.connect(pipedInputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeNumber((short)56);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1#fKJpVI");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2240), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = 'Q';
      charArray0[2] = '5';
      charArray0[3] = 'Y';
      charArray0[4] = '_';
      charArray0[5] = 't';
      uTF8JsonGenerator0.writeString(charArray0, 9, 0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBasl", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBasl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = locale0.stripExtensions();
      locale1.getDisplayLanguage();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)96;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 180, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 3, (int) (byte)34);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FI=Gk$QA}4E,m``r");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1895, (ObjectCodec) null, dataOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte byte0 = (byte) (-75);
      byte byte1 = (byte)0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2684, (ObjectCodec) null, pipedOutputStream0, byteArray0, 361, true);
      try { 
        uTF8JsonGenerator0.writeNumber(1372.4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)36;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-16), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(12);
      String string0 = "";
      IOContext iOContext2 = new IOContext(bufferRecycler0, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "yGLWHWqht'p<", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 2, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-740), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1000, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4, 2747);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw("", 57343, (-3487));
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(12);
      iOContext1.allocReadIOBuffer();
      IOContext iOContext2 = new IOContext(bufferRecycler0, "", true);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder((byte)0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1345), (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder1.NO_BYTES, (-1345), true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 55296, (ObjectCodec) null, byteArrayBuilder1);
      uTF8JsonGenerator0.writeRaw("", (-879), 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1345
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)69;
      iOContext0.allocWriteEncodingBuffer(2684);
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2684, (ObjectCodec) null, pipedOutputStream0, byteArray0, 389, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2684, (ObjectCodec) null, pipedOutputStream0, byteArray0, 389, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 306, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      String string0 = "";
      try { 
        uTF8JsonGenerator0._outputSurrogates(2, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x2, second 0x1
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      String string0 = null;
      char[] charArray0 = new char[1];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4, 2747);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw('8');
      uTF8JsonGenerator0.writeNumber("");
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "", true, 'y', 57343);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)96;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, 3);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2053), (ObjectCodec) null, dataOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 1016, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      iOContext1.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = 'P';
      charArray0[2] = '\'';
      charArray0[3] = '+';
      charArray0[4] = 'j';
      charArray0[5] = 'V';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 45, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2684, (ObjectCodec) null, pipedOutputStream0, byteArray0, 389, true);
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",Xo+");
      PrintStream printStream0 = mockPrintStream0.append('Y');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1279, (ObjectCodec) null, printStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) jsonEncoding0;
      objectArray0[4] = (Object) bufferRecycler0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      mockPrintStream0.printf(locale1, "", objectArray0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 255, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(501, 255);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2938), (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.OutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-1215);
      int int1 = 12;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(12);
      iOContext1.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = "com.fasterxml.jackson.core.json.UTF8StreamJsonParser";
      uTF8JsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.UTF8StreamJsonParser");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(") not numeric, can not use numeric value accessors");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 0, 78);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)36;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber((double) 3);
      char char0 = '{';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("+pGA", "", true, '{', 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 114, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-1490), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(12);
      iOContext1.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.isClosed();
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-1215), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 572, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.GeneratorBase", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.base.GeneratorBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) jsonEncoding0;
      objectArray0[4] = (Object) bufferRecycler0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale1, "", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber("-1");
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("?|U8dR", "com.fasterxml.jackson.core.base.GeneratorBase", false, 'k', 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 45)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }
}
