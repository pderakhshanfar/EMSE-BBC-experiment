/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 26 00:28:02 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.TextBuffer;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 599, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.write((-2113));
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 52, (ObjectCodec) null, pipedOutputStream0, byteArray0, 52, true);
      uTF8JsonGenerator0.writeRaw("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 599, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("CTjwtCU8%Z@");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 4, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[13];
      iOContext0.allocBase64Buffer();
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumberField("_,\u0001pf!{", 0.0F);
      uTF8JsonGenerator0.writeRaw("_,\u0001pf!{");
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, pipedOutputStream0, byteArray0, 91, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("write a raw (unencoded) value");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      byte[] byteArray0 = new byte[13];
      iOContext0.allocBase64Buffer();
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      uTF8JsonGenerator0.writeString(charArray0, (-707), 0);
      uTF8JsonGenerator0.writeNumber((-479L));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(1L);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a raw (unencoded) value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{G#|JqsDa7JT*o");
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream1, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-5);
      byteArray0[8] = (byte)64;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-1), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-1), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)95, (byte) (-5), (byte) (-1), (byte) (-1), (byte) (-5), (byte) (-1), (byte)93, (byte) (-5), (byte)64}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      uTF8JsonGenerator0.writeNumber((-1950L));
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-1), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)34, (byte)45, (byte)49, (byte)57, (byte)53, (byte)48, (byte)34, (byte) (-5), (byte)64}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString1.toString());
      assertEquals(1, serializedString1.charLength());
      assertEquals(" ", serializedString1.getValue());
      assertNotNull(serializedString1);
      assertSame(serializedString1, serializedString0);
      
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      assertEquals(" ", serializedString1.toString());
      assertEquals(1, serializedString1.charLength());
      assertEquals(" ", serializedString1.getValue());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-1), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)32, (byte)34, (byte)49, (byte)57, (byte)53, (byte)48, (byte)34, (byte)44, (byte)34}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertSame(serializedString1, serializedString0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      assertEquals(" ", serializedString1.toString());
      assertEquals(1, serializedString1.charLength());
      assertEquals(" ", serializedString1.getValue());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-1), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)32, (byte)34, (byte)32, (byte)32, (byte)53, (byte)48, (byte)34, (byte)44, (byte)34}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertSame(serializedString1, serializedString0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      int int0 = uTF8JsonGenerator0.getOutputBuffered();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-1), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)32, (byte)34, (byte)32, (byte)32, (byte)53, (byte)48, (byte)34, (byte)44, (byte)34}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertEquals(4, int0);
      
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      SerializedString serializedString0 = new SerializedString("])5/pB");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-520), (ObjectCodec) null, pipedOutputStream0);
      serializedString0.asUnquotedUTF8();
      uTF8JsonGenerator0.writeNumberField("])5/pB", bigDecimal0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2470), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[2] = 'j';
      charArray0[3] = 'U';
      charArray0[5] = '\u0000';
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(1);
      jsonGenerator0.writeStringField("lNsQ|0R2Kbo. u.MFt", "lNsQ|0R2Kbo. u.MFt");
      charArray0[7] = 'S';
      charArray0[8] = 'f';
      pipedOutputStream0.write(2);
      uTF8JsonGenerator0.writeString(charArray0, 6, 3);
      pipedOutputStream0.flush();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 40, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("_L");
      uTF8JsonGenerator0._verifyValueWrite("_L");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-723), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)91, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 61, false);
      uTF8JsonGenerator0._maximumNonEscapedChar = 224;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)1109);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber("D");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 599, 599);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ZFik/`", false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2138, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 2138, true);
      uTF8JsonGenerator0.setHighestNonEscapedChar((-1299));
      pipedOutputStream0.write(0);
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'Z';
      charArray0[2] = '@';
      charArray0[3] = 'Z';
      charArray0[4] = 'U';
      charArray0[5] = 'l';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 5, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 695, true);
      uTF8JsonGenerator0.writeArrayFieldStart(":%Ci");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.asUnquotedUTF8();
      uTF8JsonGenerator0.writeNumberField("", bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 695, true);
      uTF8JsonGenerator0.writeArrayFieldStart(":%Ci");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeNumberField("", bigDecimal0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((short) (byte)14);
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 717, true);
      uTF8JsonGenerator0.writeNumber((long) 0);
      iOContext0.allocBase64Buffer();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw('\u008B');
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 717, true);
      iOContext0.allocBase64Buffer();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw('\u008B');
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      MockPrintStream mockPrintStream0 = new MockPrintStream(":%Ci");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 717, true);
      iOContext0.allocBase64Buffer();
      BigInteger bigInteger0 = BigInteger.TEN;
      iOContext0.allocWriteEncodingBuffer();
      BigInteger bigInteger1 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1351, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, (-1266), true);
      uTF8JsonGenerator0.writeRaw("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1266
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 695, true);
      uTF8JsonGenerator0.writeNumber((long) 0);
      uTF8JsonGenerator0.writeArrayFieldStart(":%Ci");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumberField("", bigDecimal0);
      uTF8JsonGenerator0.writeString("CTjwtCU8%Z@");
      System.setCurrentTimeMillis((byte)14);
      uTF8JsonGenerator0.writeEndArray();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-2431), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "S*[WwCpz4E%'df|jCdw", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", althouch was >uppos<d to have one");
      mockPrintStream0.print(false);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-813), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2470), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[2] = 'j';
      charArray0[3] = 'U';
      charArray0[4] = 'Z';
      charArray0[5] = '\u0000';
      uTF8JsonGenerator0.setHighestNonEscapedChar(1);
      charArray0[7] = 'S';
      charArray0[8] = 'f';
      pipedOutputStream0.write(2);
      uTF8JsonGenerator0.writeString(charArray0, 6, 3);
      pipedOutputStream0.flush();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 40, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byte byte0 = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)76;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)91, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2240, false);
      uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, 0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocNameCopyBuffer(2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":wri");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":wri");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      String string0 = "]/pB";
      SerializedString serializedString0 = new SerializedString("]/pB");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      serializedString0.asUnquotedUTF8();
      uTF8JsonGenerator0.writeNumberField("yHR`U\"c{", bigDecimal0);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      serializedString0.asQuotedChars();
      serializedString0.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString2);
      uTF8JsonGenerator0.writeNumber((double) 2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      IOContext iOContext1 = new IOContext(bufferRecycler0, " Sx}YPN#~JF_^n", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1203, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator1.writeNumber((-172L));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = true;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      serializedString0.asQuotedChars();
      serializedString0.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 14, (-1774));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      BigInteger bigInteger0 = BigInteger.ZERO;
      mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      mockFileOutputStream0.write(56319);
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'U';
      charArray0[2] = 'r';
      charArray0[3] = 'U';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      uTF8JsonGenerator0.writeString(charArray0, 0, 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Jd;bjCd4D9|pW", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumberField("xD5&<bQv0CSs{", bigDecimal0);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{G#|JqsDa7JT*o");
      MockPrintStream mockPrintStream0 = new MockPrintStream("{G#|JqsDa7JT*o");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream1, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-5);
      byteArray0[8] = (byte)64;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-1), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((-1950L));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      serializedString1.asQuotedChars();
      uTF8JsonGenerator0.writeString("' for name");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBinaryField("", byteArray1);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 8;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 1;
      intArray0[5] = 1;
      uTF8JsonGenerator0.writeArray(intArray0, 3, (-95));
      uTF8JsonGenerator0.writeString("WC<+qK[;^p/");
      uTF8JsonGenerator0.writeRaw('T');
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBinaryField("", byteArray1);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 8;
      intArray0[2] = 3;
      char[] charArray0 = new char[7];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'q';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      charArray0[6] = 'j';
      int int0 = 5;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 512, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 512
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.append((CharSequence) ":%Ci");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 695, true);
      uTF8JsonGenerator0.writeNumber((long) 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeNumber((short)2485);
      BigDecimal bigDecimal2 = new BigDecimal((double) 0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((short)2485);
      iOContext0.allocNameCopyBuffer(695);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-2443), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)14, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-55), (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte) (-55), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -55
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)95;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((long) (byte)95);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      iOContext1.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeNumber((short) (byte)95);
      BigDecimal bigDecimal0 = new BigDecimal((-602.54894));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((short) (byte)55);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[3] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2941), (ObjectCodec) null, dataOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(212L);
      iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}");
      uTF8JsonGenerator0.writeNumber((short) (-2028));
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte)56);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((short)93);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((long) 2);
      iOContext0.allocBase64Buffer();
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw("_,\u0001pf!{");
      uTF8JsonGenerator0.writeNumber(0.0F);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      pipedInputStream0.close();
      byteArray0[7] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[3] = (byte)6;
      boolean boolean1 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2941), (ObjectCodec) null, dataOutputStream0, byteArray0, 3, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      String string0 = "_,\\1pf!{";
      try { 
        uTF8JsonGenerator0.writeRaw("_,\u0001pf!{");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)87;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, (OutputStream) null, byteArray0, 263, false);
      iOContext0.constructTextBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-418L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":wCi");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":wCi");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      SerializedString serializedString0 = new SerializedString("]/pB");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      mockFileOutputStream0.release();
      uTF8JsonGenerator0.writeNumberField("yHR`U\"c{", bigDecimal0);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":wCi");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":wCi");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      SerializedString serializedString0 = new SerializedString("]/pB");
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1915), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject((Object) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)125;
      byteArray0[0] = (byte)125;
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 54, (ObjectCodec) null, pipedOutputStream0, byteArray0, 9, false);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)10, (byte)10, (byte)72, (byte)10, (byte)10, (byte)125, (byte)10, (byte)0}, byteArray0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)10, (byte)10, (byte)72, (byte)10, (byte)10, (byte)125, (byte)10, (byte)0}, byteArray0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(9, byteArray0.length);
      assertNotNull(object0);
      assertSame(object0, pipedOutputStream0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertSame(pipedOutputStream0, object0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      IOContext iOContext3 = new IOContext(bufferRecycler0, object0, true);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(iOContext3.isResourceManaged());
      assertNull(iOContext3.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)10, (byte)10, (byte)72, (byte)10, (byte)10, (byte)125, (byte)10, (byte)0}, byteArray0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(9, byteArray0.length);
      assertNotNull(iOContext3);
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext0));
      assertFalse(iOContext3.equals((Object)iOContext2));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(8000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger1.negate();
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertEquals(9, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte)48, (byte)34, (byte)72, (byte)10, (byte)10, (byte)125, (byte)10, (byte)0}, byteArray0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(9, byteArray0.length);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertNotSame(iOContext2, iOContext3);
      assertSame(pipedOutputStream0, object0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(iOContext2.equals((Object)iOContext3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Object object1 = uTF8JsonGenerator0.getCurrentValue();
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertEquals(9, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte)48, (byte)34, (byte)72, (byte)10, (byte)10, (byte)125, (byte)10, (byte)0}, byteArray0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(9, byteArray0.length);
      assertNull(object1);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertNotSame(iOContext2, iOContext3);
      assertSame(pipedOutputStream0, object0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      assertFalse(iOContext2.equals((Object)iOContext3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber((-2));
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertEquals(13, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte)45, (byte)50, (byte)34, (byte)10, (byte)10, (byte)125, (byte)10, (byte)0}, byteArray0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(9, byteArray0.length);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertNotSame(iOContext2, iOContext3);
      assertSame(pipedOutputStream0, object0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      assertFalse(iOContext2.equals((Object)iOContext3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertEquals(13, pipedInputStream0.available());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertArrayEquals(new byte[] {(byte)34, (byte)45, (byte)50, (byte)34, (byte)44, (byte)32, (byte)125, (byte)10, (byte)0}, byteArray0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(9, byteArray0.length);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertNotSame(iOContext2, iOContext3);
      assertSame(pipedOutputStream0, object0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      assertFalse(iOContext2.equals((Object)iOContext3));
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString("@");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.flush();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Object object0 = uTF8JsonGenerator0.getCurrentValue();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertNull(object0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(110);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertNotNull(object1);
      assertSame(mockFileOutputStream0, object1);
      assertNotSame(byteArray0, byteArray1);
      assertSame(object1, mockFileOutputStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = '=';
      charArray0[2] = '-';
      uTF8JsonGenerator0.writeRaw(charArray0, 2, 0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new char[] {'T', '=', '-'}, charArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertEquals(3, charArray0.length);
      assertSame(mockFileOutputStream0, object1);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertNotNull(fileChannel0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)73;
      byteArray0[0] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)73}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(1, byteArray0.length);
      
      uTF8JsonGenerator0.writeString("");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      uTF8JsonGenerator0.writeString(charArray0, (-1832), (-1832));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertArrayEquals(new char[] {'B', 'B', 'j', 'M'}, charArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(1, byteArray0.length);
      assertEquals(4, charArray0.length);
      
      uTF8JsonGenerator0.writeStartArray();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(1, byteArray0.length);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2000, byteArray0.length);
      assertNotNull(byteArray0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("|4`KC( F-QI");
      assertNotNull(mockPrintStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1031), (ObjectCodec) null, mockPrintStream0, byteArray0, 116, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(116, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2000, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(117, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2000, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'v';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(126, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new char[] {'\u0000', 'v'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2000, byteArray0.length);
      assertEquals(2, charArray0.length);
      
      uTF8JsonGenerator0.writeString("");
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(129, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2000, byteArray0.length);
      
      uTF8JsonGenerator0.flush();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2000, byteArray0.length);
      
      uTF8JsonGenerator0.writeString(charArray0, (-2634), (-1031));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new char[] {'\u0000', 'v'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2000, byteArray0.length);
      assertEquals(2, charArray0.length);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2000, byteArray0.length);
      
      uTF8JsonGenerator0.writeRaw("|4`KC( F-QI");
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(18, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2000, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2000, byteArray0.length);
      assertNotNull(byteArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("|4`KC( F-QI");
      assertNotNull(mockPrintStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1031), (ObjectCodec) null, mockPrintStream0, byteArray0, 116, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(116, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(117, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'v';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(126, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new char[] {'\u0000', 'v'}, charArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray0.length);
      assertEquals(2, charArray0.length);
      
      uTF8JsonGenerator0.writeString("");
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(129, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray0.length);
      
      uTF8JsonGenerator0.flush();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray0.length);
      
      Object object0 = uTF8JsonGenerator0.getCurrentValue();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray0.length);
      assertNull(object0);
      
      uTF8JsonGenerator0.writeNumber((-3246));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray0.length);
      
      uTF8JsonGenerator0.writeNumber(2147483647L);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(21, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray0.length);
      
      try { 
        uTF8JsonGenerator0._outputSurrogates(1513, (-1000));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x5e9, second 0xfffffc18
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%CA", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      mockPrintStream0.write(1);
      byte[] byteArray0 = new byte[33];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(33, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber("");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(33, byteArray0.length);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2242, 644);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(33, byteArray0.length);
      
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext1);
      assertSame(iOContext2, iOContext0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertEquals(0, pipedInputStream1.available());
      assertNotNull(pipedInputStream1);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream1);
      assertEquals(0, pipedInputStream1.available());
      assertNotNull(pipedOutputStream1);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertFalse(pipedOutputStream1.equals((Object)pipedOutputStream0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 64, false);
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(64, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)10, (byte)52, (byte)10, (byte)10}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(6, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      dataOutputStream0.write(1);
      assertEquals(1, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[7] = (byte)6;
      pipedOutputStream0.write(0);
      assertEquals(2, pipedInputStream0.available());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2615, (ObjectCodec) null, pipedOutputStream0, byteArray0, 55, true);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(55, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2615, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)0, (byte)6, (byte)0}, byteArray0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(2, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("D");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertNotNull(dataOutputStream0);
      
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream1);
      assertFalse(pipedOutputStream1.equals((Object)pipedOutputStream0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1825, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1320, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1320, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1825, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)6}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(pipedOutputStream0.equals((Object)pipedOutputStream1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = '&';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-1445), (int) (byte)6);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = bigInteger0.clearBit(930);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)49, (byte)48, (byte)32, (byte)32, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      
      uTF8JsonGenerator0.writeString(":%Ci");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new byte[] {(byte)34, (byte)48, (byte)32, (byte)34, (byte)58, (byte)37, (byte)67, (byte)105}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeRaw("c ,=d]");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new byte[] {(byte)34, (byte)99, (byte)32, (byte)127, (byte)44, (byte)61, (byte)100, (byte)93}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.flush();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new byte[] {(byte)34, (byte)99, (byte)32, (byte)127, (byte)44, (byte)61, (byte)100, (byte)93}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(bigInteger0, bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      uTF8JsonGenerator0.writeString("");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)48, (byte)32, (byte)34, (byte)34, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'B';
      charArray1[1] = 'B';
      charArray1[2] = 'B';
      charArray1[3] = 'B';
      charArray1[4] = 'B';
      charArray1[5] = 'B';
      charArray1[6] = 'M';
      BigInteger bigInteger2 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)48, (byte)32, (byte)34, (byte)34, (byte)32, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      
      uTF8JsonGenerator0.writeString("2Yn2{");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)34, (byte)32, (byte)34, (byte)50, (byte)89, (byte)110, (byte)50, (byte)123}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[8];
      TextBuffer textBuffer0 = iOContext0.constructTextBuffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(textBuffer0);
      
      byteArray0[0] = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[3] = (byte)6;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2146, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)0, (byte)6, (byte)6, (byte)0, (byte)0, (byte)6}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((-106L));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)34, (byte)45, (byte)49, (byte)48, (byte)54, (byte)34, (byte)0, (byte)6}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(8000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      uTF8JsonGenerator0.writeNumber((short) (byte)57);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(9, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)34, (byte)53, (byte)55, (byte)34, (byte)54, (byte)34, (byte)32, (byte)6}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeFieldName("");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(9, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)34, (byte)53, (byte)55, (byte)34, (byte)44, (byte)34, (byte)32, (byte)6}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      SerializedString serializedString0 = new SerializedString("`SAC");
      assertEquals("`SAC", serializedString0.getValue());
      assertEquals(4, serializedString0.charLength());
      assertEquals("`SAC", serializedString0.toString());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      assertEquals("`SAC", serializedString0.getValue());
      assertEquals(4, serializedString0.charLength());
      assertEquals("`SAC", serializedString0.toString());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(16, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)96, (byte)83, (byte)65, (byte)67, (byte)34, (byte)32, (byte)34, (byte)6}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)8710, bigInteger0.shortValue());
      assertEquals((byte)6, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)96, (byte)83, (byte)65, (byte)67, (byte)34, (byte)32, (byte)34, (byte)6}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(bigInteger0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(40, pipedInputStream0.available());
      assertEquals((short)8710, bigInteger0.shortValue());
      assertEquals((byte)6, bigInteger0.byteValue());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)56, (byte)50, (byte)34, (byte)57, (byte)50, (byte)49, (byte)49, (byte)55}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":wCi");
      assertNotNull(mockFileOutputStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":wCi");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      int int0 = serializedString0.writeUnquotedUTF8(mockPrintStream0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotSame(mockFileOutputStream1, mockFileOutputStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      assertEquals(1, int0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1915), (ObjectCodec) null, mockFileOutputStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-1915), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-1915), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeStartArray();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-1915), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      uTF8JsonGenerator0.writeObjectFieldStart("]/pB");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-1915), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      try { 
        uTF8JsonGenerator0.writeStartObject((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeStartArray();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(13, byteArray0.length);
      assertEquals(2, charArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString("");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.flush();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      byte byte0 = (byte)95;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5101, (ObjectCodec) null, mockPrintStream0, byteArray0, 55, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(5101, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(55, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)49}, byteArray0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeNumber(":%Ci");
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(5101, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(1, byteArray0.length);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)95);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext1);
      assertSame(iOContext2, iOContext0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.write((-2113));
      assertEquals(1, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 52, (ObjectCodec) null, pipedOutputStream0, byteArray0, 52, true);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(1, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(52, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(52, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte byte0 = (byte)6;
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      int int0 = 1280;
      dataOutputStream0.write(1);
      assertEquals(1, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[7] = (byte)6;
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2615, (ObjectCodec) null, pipedOutputStream0, byteArray1, (-1824), false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((-1824), uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2615, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, pipedInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, byteArray1.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)6;
      byteArray2[1] = (byte)6;
      byteArray2[2] = (byte)6;
      byteArray2[3] = (byte)6;
      byteArray2[4] = (byte)6;
      byteArray2[5] = (byte)6;
      byteArray2[6] = (byte)6;
      byteArray2[7] = (byte)6;
      byteArray2[8] = (byte)6;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 695, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(695, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((long) 0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeArrayFieldStart(":%Ci");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)32, (byte)91, (byte)34, (byte)58, (byte)37, (byte)67, (byte)105, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeNumberField("", bigDecimal0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertArrayEquals(new byte[] {(byte)49, (byte)48, (byte)34, (byte)34, (byte)37, (byte)67, (byte)105, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeString("CTjwtCU8%Z@");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)116, (byte)67, (byte)85, (byte)56, (byte)37, (byte)90, (byte)64, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      
      System.setCurrentTimeMillis((byte)14);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      assertNotNull(objectOutputStream0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 64, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      short short0 = bigInteger0.shortValueExact();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertSame(bigInteger0, bigInteger1);
      assertEquals((short)0, short0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(13, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(bigInteger0, bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeStartArray();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(13, byteArray0.length);
      assertEquals(2, charArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString("");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("8[Q[L'+p0>q9", (short)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)10;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1941), (ObjectCodec) null, pipedOutputStream0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-1941), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-1941), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("h", "com.fasterxml.jackson.core.JsonFactory$Feature", false, 'b', 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 46)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 3, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray1.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(bufferedInputStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      String string0 = " z+L (A";
      uTF8JsonGenerator0.writeString(" z+L (A");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(12, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, byteArray0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("dFL:=7mqh;u=`v%jU^");
      assertNotNull(mockPrintStream0);
      
      String string0 = "G6OK3D$rkWw`Nqne*A";
      mockPrintStream0.println("G6OK3D$rkWw`Nqne*A");
      mockPrintStream0.print(false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2000, byteArray0.length);
      assertNotNull(byteArray0);
      assertSame(iOContext0, iOContext1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      int int0 = 142;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 142, true);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(142, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2000, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      mockPrintStream0.println((Object) iOContext0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertSame(iOContext0, iOContext1);
      
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(143, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(bigInteger1, bigInteger0);
      
      uTF8JsonGenerator0.writeString("dFL:=7mqh;u=`v%jU^");
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(164, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext1, iOContext2);
      assertSame(iOContext2, iOContext1);
      assertSame(iOContext2, iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)91, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2240, true);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2240, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(91, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%CA");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      mockPrintStream0.println(1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)49;
      byteArray0[0] = (byte)95;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-598), (ObjectCodec) null, mockPrintStream0, byteArray0, 21, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(21, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-598), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)95, (byte)49, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(":%CA");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      uTF8JsonGenerator0.writeNumber(0L);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-598), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)34, (byte)48, (byte)34}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, true);
      assertTrue(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-598), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)34, (byte)48, (byte)34}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(3, byteArray0.length);
      assertNotNull(iOContext1);
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      SerializedString serializedString0 = new SerializedString(":%CA");
      assertEquals(":%CA", serializedString0.getValue());
      assertEquals(":%CA", serializedString0.toString());
      assertEquals(4, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("9u.");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("xMpRs~$kR[RwVSl'");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2667, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2667, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      try { 
        uTF8JsonGenerator0.writeNumber(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      short short0 = bigInteger0.shortValueExact();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertSame(bigInteger0, bigInteger1);
      assertEquals((short)0, short0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(bigInteger0, bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeStartArray();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)48, (byte)32, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)92, (byte)117, (byte)48, (byte)48, (byte)48, (byte)48, (byte)34, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertEquals(2, charArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString("");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)48, (byte)48, (byte)48, (byte)48, (byte)34, (byte)44}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("8[Q[L'+p0>q9", (short)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      short short0 = bigInteger0.shortValueExact();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertSame(bigInteger0, bigInteger1);
      assertEquals((short)0, short0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(bigInteger0, bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeStartArray();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertEquals(2, charArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString("");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("8[Q[L'+p0>q9", (short)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(", althouch was >uppos<d to have one");
      assertNotNull(mockPrintStream0);
      
      mockPrintStream0.print(true);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2000, byteArray0.length);
      assertNotNull(byteArray0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2450, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2450, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2450, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(bigInteger1, bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2450, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(bigInteger1, bigInteger0);
      
      uTF8JsonGenerator0.writeString("WC<+qK[;^p/");
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2450, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(17, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeRaw('T');
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2450, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(18, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      int int0 = (-3629);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3629), (ObjectCodec) null, mockPrintStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-3629), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumberField("EV\"Ty{C2--92JGCJ`", bigDecimal0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-3629), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(21, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      String string0 = "";
      try { 
        uTF8JsonGenerator0.writeFieldName("\"~Y_");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":%Ci");
      assertFalse(boolean0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertFalse(iOContext1.equals((Object)iOContext0));
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext2.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext1, iOContext2);
      assertNotSame(iOContext1, iOContext0);
      assertNotSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)111;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2179, false);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2179, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)101, (byte) (-57), (byte)111}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(iOContext1.equals((Object)iOContext0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertEquals(2, charArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      mockFileOutputStream0.write(3189);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 1990);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      String string0 = ":%Ci";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator1);
      assertNotSame(byteArray0, byteArray1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext1);
      assertSame(iOContext2, iOContext0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)72;
      byteArray0[6] = (byte)125;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 54, (ObjectCodec) null, pipedOutputStream0, byteArray0, 9, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)72, (byte)0, (byte)0, (byte)125, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      PipedOutputStream pipedOutputStream1 = (PipedOutputStream)uTF8JsonGenerator0.getOutputTarget();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)72, (byte)0, (byte)0, (byte)125, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
      assertNotNull(pipedOutputStream1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext1);
      assertSame(iOContext2, iOContext0);
      assertSame(pipedOutputStream0, pipedOutputStream1);
      assertSame(pipedOutputStream1, pipedOutputStream0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      pipedOutputStream1.close();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)72, (byte)0, (byte)0, (byte)125, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext1);
      assertSame(iOContext2, iOContext0);
      assertSame(pipedOutputStream0, pipedOutputStream1);
      assertSame(pipedOutputStream1, pipedOutputStream0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      IOContext iOContext3 = new IOContext(bufferRecycler0, pipedOutputStream1, true);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(iOContext3.isResourceManaged());
      assertNull(iOContext3.getEncoding());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)72, (byte)0, (byte)0, (byte)125, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
      assertNotNull(iOContext3);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext2));
      assertFalse(iOContext3.equals((Object)iOContext0));
      
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(8000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(iOContext0.equals((Object)iOContext3));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      try { 
        uTF8JsonGenerator0.writeNumber(2120);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2470), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[1] = '?';
      charArray0[2] = 'j';
      charArray0[3] = 'U';
      charArray0[4] = 'Z';
      charArray0[5] = '=';
      charArray0[4] = '1';
      charArray0[7] = 'S';
      charArray0[8] = 'f';
      uTF8JsonGenerator0.writeString(charArray0, 6, 3);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(8, pipedInputStream0.available());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)83, (byte)102, (byte)34, (byte)117, (byte)48, (byte)48, (byte)48, (byte)48}, byteArray0);
      assertArrayEquals(new char[] {'@', '?', 'j', 'U', '1', '=', '\u0000', 'S', 'f'}, charArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertEquals(9, charArray0.length);
      
      pipedOutputStream0.flush();
      assertEquals(8, pipedInputStream0.available());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 8;
      intArray0[1] = 3;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      uTF8JsonGenerator0.writeNumberField("_,=*/V-8U3", bigDecimal1);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(24, pipedInputStream0.available());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertArrayEquals(new byte[] {(byte)32, (byte)49, (byte)48, (byte)45, (byte)56, (byte)85, (byte)51, (byte)34}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertSame(bigDecimal1, bigDecimal0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1014, (ObjectCodec) null, dataOutputStream0, byteArray0, (-2979), true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2470), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[2] = 'j';
      charArray0[3] = ':';
      charArray0[5] = '\u0000';
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(1);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals((-2470), uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator1.getOutputBuffered());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      
      charArray0[7] = 'K';
      charArray0[8] = 'f';
      pipedOutputStream0.write(2);
      assertEquals(1, pipedInputStream0.available());
      
      uTF8JsonGenerator0.writeString(charArray0, 6, 3);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(9, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)75, (byte)102, (byte)34, (byte)117, (byte)48, (byte)48, (byte)48, (byte)48}, byteArray0);
      assertArrayEquals(new char[] {'@', '\u0000', 'j', ':', '\u0000', '\u0000', '\u0000', 'K', 'f'}, charArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertEquals(9, charArray0.length);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      
      pipedOutputStream0.flush();
      assertEquals(9, pipedInputStream0.available());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      assertEquals(13, pipedInputStream0.available());
      assertNotNull(objectOutputStream0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 40, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      short short0 = bigInteger0.shortValueExact();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertSame(bigInteger0, bigInteger1);
      assertEquals((short)0, short0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(bigInteger0, bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[5];
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertEquals(5, charArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      int int0 = (-1479);
      mockFileOutputStream0.write((-1479));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 2375);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2470), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[1] = '?';
      charArray0[2] = 'j';
      charArray0[3] = 'U';
      charArray0[4] = 'Z';
      charArray0[5] = '=';
      charArray0[6] = '1';
      charArray0[7] = 'S';
      charArray0[8] = 'f';
      uTF8JsonGenerator0.writeString(charArray0, 6, 3);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new byte[] {(byte)6, (byte)34, (byte)49, (byte)83, (byte)102, (byte)34, (byte)6, (byte)6}, byteArray0);
      assertArrayEquals(new char[] {'@', '?', 'j', 'U', 'Z', '=', '1', 'S', 'f'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertEquals(9, charArray0.length);
      
      pipedOutputStream0.flush();
      assertEquals(0, pipedInputStream0.available());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 8;
      intArray0[1] = 3;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      uTF8JsonGenerator0.writeNumberField("_,=*/V-8U3", bigDecimal1);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(20, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertArrayEquals(new byte[] {(byte)49, (byte)48, (byte)34, (byte)32, (byte)47, (byte)86, (byte)45, (byte)56}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertSame(bigDecimal1, bigDecimal0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1014, (ObjectCodec) null, dataOutputStream0, byteArray0, (-2979), true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-55), (ObjectCodec) null, byteArrayOutputStream0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals((-55), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 54, 8000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 54, (ObjectCodec) null, pipedOutputStream0, byteArray0, 9, false);
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)10, (byte)10, (byte)12, (byte)10, (byte)10, (byte)125, (byte)10, (byte)0}, byteArray0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)10, (byte)10, (byte)12, (byte)10, (byte)10, (byte)125, (byte)10, (byte)0}, byteArray0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(9, byteArray0.length);
      assertNotNull(object0);
      assertSame(object0, pipedOutputStream0);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertSame(pipedOutputStream0, object0);
      
      IOContext iOContext3 = new IOContext(bufferRecycler0, object0, true);
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(iOContext3.isResourceManaged());
      assertNull(iOContext3.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)10, (byte)10, (byte)12, (byte)10, (byte)10, (byte)125, (byte)10, (byte)0}, byteArray0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(9, byteArray0.length);
      assertNotNull(iOContext3);
      assertFalse(iOContext3.equals((Object)iOContext2));
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext0));
      
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(8000, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger1.negate();
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(9, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte)48, (byte)34, (byte)12, (byte)10, (byte)10, (byte)125, (byte)10, (byte)0}, byteArray0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(9, byteArray0.length);
      assertSame(iOContext0, iOContext2);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertSame(jsonEncoding1, jsonEncoding0);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(iOContext2, iOContext3);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertSame(pipedOutputStream0, object0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(iOContext2.equals((Object)iOContext3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(9, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte)48, (byte)34, (byte)32, (byte)34, (byte)48, (byte)34, (byte)10, (byte)0}, byteArray0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(9, byteArray0.length);
      assertSame(iOContext0, iOContext2);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertSame(jsonEncoding1, jsonEncoding0);
      assertNotSame(iOContext2, iOContext3);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertSame(pipedOutputStream0, object0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(iOContext2.equals((Object)iOContext3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding2);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertSame(iOContext0, iOContext2);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertSame(jsonEncoding2, jsonEncoding1);
      assertSame(jsonEncoding2, jsonEncoding0);
      assertFalse(iOContext0.equals((Object)iOContext3));
      
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)12);
      assertEquals((byte)12, bigDecimal0.byteValue());
      assertEquals((short)12, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeNumberField("AC{}Rmg", bigDecimal0);
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(26, pipedInputStream0.available());
      assertEquals((byte)12, bigDecimal0.byteValue());
      assertEquals((short)12, bigDecimal0.shortValue());
      assertArrayEquals(new byte[] {(byte)49, (byte)50, (byte)34, (byte)82, (byte)109, (byte)103, (byte)32, (byte)34, (byte)65}, byteArray0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(9, byteArray0.length);
      assertSame(iOContext0, iOContext2);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertSame(jsonEncoding1, jsonEncoding0);
      assertSame(jsonEncoding1, jsonEncoding2);
      assertNotSame(iOContext2, iOContext3);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertSame(pipedOutputStream0, object0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(iOContext2.equals((Object)iOContext3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0._releaseBuffers();
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(26, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)49, (byte)50, (byte)34, (byte)82, (byte)109, (byte)103, (byte)32, (byte)34, (byte)65}, byteArray0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(9, byteArray0.length);
      assertSame(iOContext0, iOContext2);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertSame(jsonEncoding1, jsonEncoding0);
      assertSame(jsonEncoding1, jsonEncoding2);
      assertNotSame(iOContext2, iOContext3);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertSame(pipedOutputStream0, object0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(iOContext2.equals((Object)iOContext3));
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3285), (ObjectCodec) null, pipedOutputStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-3285), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = new SerializedString("write a boolean value");
      assertEquals("write a boolean value", serializedString0.toString());
      assertEquals(21, serializedString0.charLength());
      assertEquals("write a boolean value", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      byte[] byteArray1 = serializedString0.asUnquotedUTF8();
      assertEquals("write a boolean value", serializedString0.toString());
      assertEquals(21, serializedString0.charLength());
      assertEquals("write a boolean value", serializedString0.getValue());
      assertEquals(21, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      uTF8JsonGenerator0.writeNumberField("write a boolean value", bigDecimal0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(27, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-3285), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      uTF8JsonGenerator0._releaseBuffers();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(27, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-3285), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, dataOutputStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(13, uTF8JsonGenerator1.getFeatureMask());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator1);
      assertFalse(uTF8JsonGenerator1.equals((Object)uTF8JsonGenerator0));
      
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("write a boolean value", serializedString0.toString());
      assertEquals(21, serializedString0.charLength());
      assertEquals("write a boolean value", serializedString0.getValue());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(13, uTF8JsonGenerator1.getFeatureMask());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals(23, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertFalse(uTF8JsonGenerator1.equals((Object)uTF8JsonGenerator0));
      
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("write a boolean value", serializedString0.toString());
      assertEquals(21, serializedString0.charLength());
      assertEquals("write a boolean value", serializedString0.getValue());
      assertEquals(44, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(13, uTF8JsonGenerator1.getFeatureMask());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertFalse(uTF8JsonGenerator1.equals((Object)uTF8JsonGenerator0));
      
      int int0 = uTF8JsonGenerator1.getOutputBuffered();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(44, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(13, uTF8JsonGenerator1.getFeatureMask());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertFalse(uTF8JsonGenerator1.equals((Object)uTF8JsonGenerator0));
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[8];
      TextBuffer textBuffer0 = iOContext0.constructTextBuffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(textBuffer0);
      
      byteArray0[0] = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[3] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2146, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)0, (byte)6, (byte)6, (byte)0, (byte)0, (byte)6}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((-106L));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new byte[] {(byte)34, (byte)45, (byte)49, (byte)48, (byte)54, (byte)34, (byte)0, (byte)6}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(8000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      uTF8JsonGenerator0.writeNumber((short) (byte)57);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(9, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new byte[] {(byte)34, (byte)53, (byte)55, (byte)34, (byte)54, (byte)34, (byte)32, (byte)6}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)8198, bigInteger0.shortValue());
      assertEquals((byte)6, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)34, (byte)53, (byte)55, (byte)34, (byte)54, (byte)34, (byte)32, (byte)6}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(bigInteger0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(33, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((short)8198, bigInteger0.shortValue());
      assertEquals((byte)6, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)50, (byte)34, (byte)49, (byte)56, (byte)51, (byte)54, (byte)52, (byte)50}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)6;
      int[] intArray0 = new int[8];
      intArray0[0] = 8;
      intArray0[1] = 3;
      String string0 = "_,=*/V-8U3";
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      char[] charArray0 = new char[2];
      intArray0[0] = (int) 'g';
      charArray0[1] = '\"';
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("N9B", false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('\"');
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-840), (ObjectCodec) null, printStream0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-840), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = new SerializedString("_,=*/V-8U3");
      assertEquals(10, serializedString0.charLength());
      assertEquals("_,=*/V-8U3", serializedString0.toString());
      assertEquals("_,=*/V-8U3", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)20, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5101, (ObjectCodec) null, mockPrintStream0, byteArray0, 55, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(5101, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(55, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)49}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeNumber(":%Ci");
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(5101, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(1, byteArray0.length);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream1);
      assertNotNull(objectOutputStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)95;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 2242, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", although was supposed to have one");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      mockPrintStream0.println(1);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(2L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(2L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)49;
      byteArray0[0] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-598), (ObjectCodec) null, mockPrintStream0, byteArray0, 21, true);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(21, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-598), uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber(0L);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-598), uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)34, (byte)48, (byte)34}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, true);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-598), uTF8JsonGenerator0.getFeatureMask());
      assertNull(iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertArrayEquals(new byte[] {(byte)34, (byte)48, (byte)34}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(3, byteArray0.length);
      assertNotNull(iOContext1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(iOContext1.equals((Object)iOContext0));
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-598), uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)32}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(3, byteArray0.length);
      assertNotSame(iOContext0, iOContext1);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      String string0 = ":%CA";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%CA");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      mockPrintStream0.println(1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)95;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-598), (ObjectCodec) null, mockPrintStream0, byteArray0, 21, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(21, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-598), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte) (-12), (byte)49, (byte)95}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber(0L);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-598), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)34, (byte)48, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertArrayEquals(new byte[] {(byte)34, (byte)48, (byte)34}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-598), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)32}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, true);
      assertTrue(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-598), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)32}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, byteArray0.length);
      assertNotNull(iOContext1);
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      mockPrintStream0.write(byteArray1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotSame(iOContext0, iOContext1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte)34, (ObjectCodec) null, mockPrintStream0, byteArray0, 55296, false);
      assertTrue(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(55296, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(34, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-598), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)32}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8JsonGenerator1);
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertFalse(uTF8JsonGenerator1.equals((Object)uTF8JsonGenerator0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(639);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeRaw("_L");
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)95, (byte)76}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(4, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0._verifyValueWrite("_L");
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)95, (byte)76}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(4, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(4, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertArrayEquals(new byte[] {(byte)44, (byte)32, (byte)95, (byte)76}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(4, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[3] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2146, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)0, (byte)6, (byte)6, (byte)0, (byte)0, (byte)6}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((-106L));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)34, (byte)45, (byte)49, (byte)48, (byte)54, (byte)34, (byte)0, (byte)6}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      uTF8JsonGenerator0.writeNumberField("", (float) 0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(10, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)34, (byte)48, (byte)46, (byte)48, (byte)34, (byte)34, (byte)44, (byte)32}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2529, (ObjectCodec) null, pipedOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      int int0 = 1207;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1207, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)72, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(72, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1207, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1430.0057F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator1);
      assertNotSame(byteArray0, byteArray1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)32, (byte)32, (byte)48, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString(":%Ci");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)37, (byte)67, (byte)105, (byte)34, (byte)48, (byte)32, (byte)34, (byte)58}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 569);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      short short0 = bigInteger0.shortValueExact();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertSame(bigInteger0, bigInteger1);
      assertEquals((short)0, short0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(bigInteger0, bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      uTF8JsonGenerator0.writeString("");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)48, (byte)32, (byte)34, (byte)34, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'B';
      charArray1[1] = 'B';
      charArray1[2] = 'B';
      charArray1[3] = 'B';
      charArray1[4] = 'B';
      charArray1[5] = 'B';
      charArray1[6] = 'M';
      uTF8JsonGenerator0.writeString(charArray1, (-1170), (-1276));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)48, (byte)32, (byte)34, (byte)34, (byte)32, (byte)34}, byteArray0);
      assertArrayEquals(new char[] {'B', 'B', 'B', 'B', 'B', 'B', 'M'}, charArray1);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertEquals(7, charArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      uTF8JsonGenerator0._verifyPrettyValueWrite("8[Q[L'+p0>q9", (short)0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)48, (byte)32, (byte)34, (byte)34, (byte)32, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeStartArray();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)34, (byte)32, (byte)91, (byte)32, (byte)34, (byte)34, (byte)32, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2470), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      pipedOutputStream0.flush();
      assertEquals(0, pipedInputStream0.available());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 8;
      intArray0[1] = 3;
      intArray0[2] = 56320;
      uTF8JsonGenerator0.writeNumber((double) 8);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)6, (byte)56, (byte)46, (byte)48, (byte)6, (byte)6, (byte)6, (byte)6}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeNumber((short) (byte)6);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(5, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)54, (byte)56, (byte)46, (byte)48, (byte)32, (byte)6, (byte)6, (byte)6}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte)32);
      assertEquals((byte)32, bigDecimal0.byteValue());
      assertEquals((short)32, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(5, pipedInputStream0.available());
      assertEquals((byte)32, bigDecimal0.byteValue());
      assertEquals((short)32, bigDecimal0.shortValue());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)54, (byte)32, (byte)51, (byte)50, (byte)32, (byte)6, (byte)6, (byte)6}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)12;
      byteArray0[6] = (byte)125;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 54, (ObjectCodec) null, pipedOutputStream0, byteArray0, 9, false);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)0, (byte)0, (byte)125, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeStartObject((Object) jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(9, pipedInputStream0.available());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)12, (byte)0, (byte)0, (byte)125, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(jsonEncoding0, jsonEncoding1);
      assertSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":%Ci");
      assertFalse(boolean0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertFalse(iOContext1.equals((Object)iOContext0));
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext1, iOContext2);
      assertNotSame(iOContext1, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertNotSame(iOContext2, iOContext0);
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext0));
      
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler1);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 2296);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 2, false);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0._releaseBuffers();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotSame(bufferRecycler0, bufferRecycler1);
      assertSame(iOContext1, iOContext2);
      assertNotSame(iOContext1, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      uTF8JsonGenerator0._releaseBuffers();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotSame(bufferRecycler0, bufferRecycler1);
      assertSame(iOContext1, iOContext2);
      assertNotSame(iOContext1, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeStartObject((Object) pipedOutputStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(9, byteArray0.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":wCi");
      assertNotNull(mockFileOutputStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":wCi");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      SerializedString serializedString0 = new SerializedString("]/pB");
      assertEquals(4, serializedString0.charLength());
      assertEquals("]/pB", serializedString0.toString());
      assertEquals("]/pB", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeNumberField("yHR`U\"c{", bigDecimal0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0._releaseBuffers();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      short short0 = bigInteger0.shortValueExact();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertSame(bigInteger0, bigInteger1);
      assertEquals((short)0, short0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertNotNull(fileChannel0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(bigInteger0, bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)92, (byte)117, (byte)48, (byte)48, (byte)48, (byte)48, (byte)34, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'B', '\u0000'}, charArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertEquals(2, charArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString("");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)48, (byte)48, (byte)48, (byte)48, (byte)34, (byte)32}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0._verifyPrettyValueWrite("8[Q[L'+p0>q9", (short)0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)48, (byte)48, (byte)48, (byte)48, (byte)34, (byte)32}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeBoolean(false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)102, (byte)97, (byte)108, (byte)115, (byte)101, (byte)48, (byte)34, (byte)32}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2470), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      pipedOutputStream0.flush();
      assertEquals(0, pipedInputStream0.available());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 8;
      intArray0[1] = 3;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      uTF8JsonGenerator0.writeNumberField("_,=*/V-8U3", bigDecimal1);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(13, pipedInputStream0.available());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)49, (byte)48, (byte)85, (byte)51, (byte)34, (byte)42, (byte)47, (byte)86}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertSame(bigDecimal1, bigDecimal0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1014, (ObjectCodec) null, dataOutputStream0, byteArray0, (-2979), true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      String string0 = ":%Ci";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 695, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(695, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumberField(":%Ci", (double) 3);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)48, (byte)58, (byte)37, (byte)67, (byte)105, (byte)34, (byte)51, (byte)46}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeNumber((long) 0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)48, (byte)32, (byte)37, (byte)67, (byte)105, (byte)34, (byte)51, (byte)46}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      try { 
        uTF8JsonGenerator0._writePPFieldName("T");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 695, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(695, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumberField("i", (-1130.2759148485));
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)52, (byte)56, (byte)53, (byte)53, (byte)57, (byte)49, (byte)52, (byte)56}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeNumber((long) 0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)48, (byte)56, (byte)53, (byte)32, (byte)57, (byte)49, (byte)52, (byte)56}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)48, (byte)32, (byte)49, (byte)32, (byte)57, (byte)49, (byte)52, (byte)56}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeRaw('~');
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)48, (byte)32, (byte)49, (byte)126, (byte)57, (byte)49, (byte)52, (byte)56}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 6, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(6, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(57343);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.flush();
      assertEquals(0, pipedInputStream0.available());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 56319;
      intArray0[1] = 8;
      intArray0[2] = 56320;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(intArray0, 56319, (-395));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[3] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2146, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)0, (byte)6, (byte)6, (byte)0, (byte)0, (byte)6}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((-106L));
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)34, (byte)45, (byte)49, (byte)48, (byte)54, (byte)34, (byte)0, (byte)6}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(8000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      uTF8JsonGenerator0.writeNumber((short) (byte)57);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(9, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)34, (byte)53, (byte)55, (byte)34, (byte)54, (byte)34, (byte)32, (byte)6}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)8198, bigInteger0.shortValue());
      assertEquals((byte)6, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)34, (byte)53, (byte)55, (byte)34, (byte)54, (byte)34, (byte)32, (byte)6}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(bigInteger0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(33, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2146, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((short)8198, bigInteger0.shortValue());
      assertEquals((byte)6, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)50, (byte)34, (byte)49, (byte)56, (byte)51, (byte)54, (byte)52, (byte)50}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      short short0 = bigInteger0.shortValueExact();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertSame(bigInteger0, bigInteger1);
      assertEquals((short)0, short0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(bigInteger0, bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)48, (byte)32, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)92, (byte)117, (byte)48, (byte)48, (byte)48, (byte)48, (byte)34, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertEquals(2, charArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)48, (byte)117, (byte)48, (byte)48, (byte)48, (byte)48, (byte)34, (byte)44}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(2);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(8000, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[4] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 2, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)11, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray1.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      uTF8JsonGenerator0.writeBinary(byteArray1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("\u0000\u0000\"AAAiQUFB", byteArrayOutputStream0.toString());
      assertEquals(11, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)97, (byte)81, (byte)65, (byte)65, (byte)34, (byte)65, (byte)105, (byte)0, (byte)0}, byteArray1);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      SerializedString serializedString0 = new SerializedString("R2HUf32.K=jy`zm(]&");
      assertEquals("R2HUf32.K=jy`zm(]&", serializedString0.getValue());
      assertEquals(18, serializedString0.charLength());
      assertEquals("R2HUf32.K=jy`zm(]&", serializedString0.toString());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte)14;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((byte)49);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(filterOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bigInteger0;
      objectArray0[1] = (Object) bigInteger0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "com.fasterxml.jackson.core.JsonPointer", objectArray0);
      assertEquals(38, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(2, objectArray0.length);
      assertNotNull(printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      assertEquals(38, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(2, objectArray0.length);
      assertNotNull(dataOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, dataOutputStream0, byteArray1, (-1863), true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(13, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((-1863), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(38, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertArrayEquals(new byte[] {(byte)1, (byte) (-12), (byte)14, (byte)0, (byte)0}, byteArray1);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(5, byteArray1.length);
      assertEquals(2, objectArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigDecimal bigDecimal0 = new BigDecimal((-3472L));
      assertEquals((byte)112, bigDecimal0.byteValue());
      assertEquals((short) (-3472), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1863
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertEquals(0, pipedInputStream1.available());
      assertNotNull(pipedInputStream1);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream1);
      assertEquals(0, pipedInputStream1.available());
      assertNotNull(pipedOutputStream0);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-451), (ObjectCodec) null, pipedOutputStream0, byteArray0, 115, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream1.available());
      assertEquals(115, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-451), uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)125, (byte)125}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(2, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(8000, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(iOContext0, iOContext1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((int) (byte)125);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator1);
      assertNotSame(byteArray0, byteArray1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)32, (byte)32, (byte)48, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      try { 
        uTF8JsonGenerator0.writeString(":%Ci");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 717, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(717, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeString("");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.flush();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      Object object0 = uTF8JsonGenerator0.getCurrentValue();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNull(object0);
      
      uTF8JsonGenerator0.writeNumber(1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)49, (byte)34, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)49, (byte)34, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(object1);
      assertSame(mockFileOutputStream0, object1);
      assertSame(object1, mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      assertNotNull(mockPrintStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2000, byteArray0.length);
      assertNotNull(byteArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler1);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      IOContext iOContext1 = new IOContext(bufferRecycler1, bigInteger1, true);
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertTrue(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(iOContext1.equals((Object)iOContext0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1709), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2417, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertTrue(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2417, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((-1709), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(iOContext1.equals((Object)iOContext0));
      
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream1);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator1.getFeatureMask());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator1);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      assertFalse(uTF8JsonGenerator1.equals((Object)uTF8JsonGenerator0));
      
      uTF8JsonGenerator1.writeNumber(bigInteger1);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(1, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator1.getFeatureMask());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(bufferRecycler0, bufferRecycler1);
      assertNotSame(iOContext0, iOContext1);
      assertNotSame(mockFileOutputStream1, mockFileOutputStream0);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      assertFalse(uTF8JsonGenerator1.equals((Object)uTF8JsonGenerator0));
      
      try { 
        uTF8JsonGenerator0.writeString(":%Ci");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":wri");
      assertNotNull(mockFileOutputStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":wri");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      SerializedString serializedString0 = new SerializedString("]/pB");
      assertEquals(4, serializedString0.charLength());
      assertEquals("]/pB", serializedString0.toString());
      assertEquals("]/pB", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      byte[] byteArray0 = serializedString0.asUnquotedUTF8();
      assertEquals(4, serializedString0.charLength());
      assertEquals("]/pB", serializedString0.toString());
      assertEquals("]/pB", serializedString0.getValue());
      assertArrayEquals(new byte[] {(byte)93, (byte)47, (byte)112, (byte)66}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray0);
      
      uTF8JsonGenerator0._releaseBuffers();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.SerializedString", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[1];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString1.getValue());
      assertEquals(1, serializedString1.charLength());
      assertEquals(" ", serializedString1.toString());
      assertNotNull(serializedString1);
      assertSame(serializedString1, serializedString0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString1, true);
      assertEquals(" ", serializedString1.getValue());
      assertEquals(1, serializedString1.charLength());
      assertEquals(" ", serializedString1.toString());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(" ", serializedString1.getValue());
      assertEquals(1, serializedString1.charLength());
      assertEquals(" ", serializedString1.toString());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(serializedString1, serializedString0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(" ", serializedString1.getValue());
      assertEquals(1, serializedString1.charLength());
      assertEquals(" ", serializedString1.toString());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString1.getValue());
      assertEquals(1, serializedString1.charLength());
      assertEquals(" ", serializedString1.toString());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(serializedString0, serializedString1);
      assertSame(serializedString1, serializedString0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (-1955), (-1955));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      SerializedString serializedString0 = new SerializedString("]/pB");
      assertEquals("]/pB", serializedString0.getValue());
      assertEquals(4, serializedString0.charLength());
      assertEquals("]/pB", serializedString0.toString());
      assertNotNull(serializedString0);
      
      SerializedString serializedString1 = new SerializedString("'");
      assertEquals("'", serializedString1.toString());
      assertEquals(1, serializedString1.charLength());
      assertEquals("'", serializedString1.getValue());
      assertNotNull(serializedString1);
      assertFalse(serializedString1.equals((Object)serializedString0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream1);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      char[] charArray0 = new char[0];
      mockFileOutputStream1.release();
      assertNotSame(mockFileOutputStream1, mockFileOutputStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      uTF8JsonGenerator0.writeRaw(charArray0, 610, (-592));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, charArray0.length);
      assertNotSame(mockFileOutputStream1, mockFileOutputStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("]/pB", serializedString0.getValue());
      assertEquals(4, serializedString0.charLength());
      assertEquals("]/pB", serializedString0.toString());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotSame(mockFileOutputStream1, mockFileOutputStream0);
      assertNotSame(serializedString0, serializedString1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      assertFalse(serializedString0.equals((Object)serializedString1));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(":%Ci");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      assertTrue(boolean0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 695, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(695, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((long) 0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)48, (byte)32, (byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeRaw('~');
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)48, (byte)32, (byte)49, (byte)126, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)14;
      byteArray2[1] = (byte)14;
      byteArray2[2] = (byte)14;
      byteArray2[3] = (byte)14;
      byteArray2[4] = (byte)14;
      byteArray2[5] = (byte)14;
      byteArray2[6] = (byte)14;
      byteArray2[7] = (byte)14;
      byteArray2[8] = (byte)14;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray2, (-1226), (int) (byte)14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1718), (ObjectCodec) null, byteArrayBuilder0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-1718), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 1, 2240);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte) (-58), false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((-58), uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(11, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -58
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1280, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1280, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)9, (byte)9, (byte)9, (byte)0, (byte)9, (byte)9}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1280);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      byteArray0[8] = (byte) (-14);
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte) (-14);
      byteArray0[8] = (byte) (-14);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1280, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1280, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte)0, (byte) (-14), (byte)0, (byte)0, (byte) (-3), (byte) (-14), (byte) (-14)}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1069);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext1);
      assertSame(iOContext2, iOContext0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[6] = (byte)125;
      byte[] byteArray1 = iOContext1.allocBase64Buffer();
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding0, jsonEncoding1);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext1, iOContext2);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3105), (ObjectCodec) null, pipedOutputStream0, byteArray0, 412, false);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(412, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((-3105), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)125, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(10, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(bigInteger1);
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      byte byte0 = (byte) (-58);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding0, jsonEncoding1);
      assertSame(iOContext1, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding1));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, false);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding1));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      SerializedString serializedString0 = new SerializedString("]/pB");
      assertEquals("]/pB", serializedString0.getValue());
      assertEquals("]/pB", serializedString0.toString());
      assertEquals(4, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1915), (ObjectCodec) null, mockFileOutputStream0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-1915), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("]/pB", serializedString0.getValue());
      assertEquals("]/pB", serializedString0.toString());
      assertEquals(4, serializedString0.charLength());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-1915), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-1915), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeStartObject((Object) null);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-1915), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      mockFileOutputStream1.write(536);
      assertNotSame(mockFileOutputStream1, mockFileOutputStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 15);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      SerializedString serializedString0 = new SerializedString("^lr+c?d8+DL,Lp)");
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.toString());
      assertEquals(15, serializedString0.charLength());
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.toString());
      assertEquals(15, serializedString0.charLength());
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.getValue());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(15, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(17, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      uTF8JsonGenerator0.writeStartObject((Object) "");
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(18, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'r';
      charArray0[4] = 'U';
      charArray0[5] = '@';
      mockFileOutputStream0.write(11);
      charArray0[6] = 'r';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-482), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-482), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-55), (byte)11}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(98);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(6, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(8000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short short0 = (short)2485;
      uTF8JsonGenerator0.writeNumber((short) (-819));
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)45, (byte)56, (byte)49, (byte)57, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      BigDecimal bigDecimal0 = new BigDecimal((-3514.40514181));
      assertEquals((byte)70, bigDecimal0.byteValue());
      assertEquals((short) (-3514), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      try { 
        uTF8JsonGenerator0.writeNumber("p");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, 0, true);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(255, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField("[^X", (long) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, 0, true);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(255, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField("[^X", (long) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      uTF8JsonGenerator0.writeFieldName("");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(1, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(filteringGeneratorDelegate0);
      
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeNumber((long) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, true);
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 56319, 56319);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      SerializedString serializedString0 = new SerializedString("p.;Rz3~4nwVi");
      assertEquals("p.;Rz3~4nwVi", serializedString0.getValue());
      assertEquals(12, serializedString0.charLength());
      assertEquals("p.;Rz3~4nwVi", serializedString0.toString());
      assertNotNull(serializedString0);
      
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext2);
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte) (-95), (ObjectCodec) null, pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-95), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      
      uTF8JsonGenerator0.writeStartArray();
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-95), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(iOContext2, iOContext1);
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2000, byteArray0.length);
      assertNotNull(byteArray0);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext0, iOContext2);
      assertNotSame(iOContext1, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext2));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-95), uTF8JsonGenerator0.getFeatureMask());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(iOContext2, iOContext1);
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 114, 2);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(19, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-95), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext0, iOContext2);
      assertNotSame(iOContext1, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(iOContext2, iOContext1);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext2));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      assertEquals(" ", serializedString1.toString());
      assertEquals(" ", serializedString1.getValue());
      assertEquals(1, serializedString1.charLength());
      assertNotNull(serializedString1);
      assertNotSame(serializedString1, serializedString0);
      assertFalse(serializedString1.equals((Object)serializedString0));
      
      char[] charArray0 = serializedString1.asQuotedChars();
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(19, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-95), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(" ", serializedString1.toString());
      assertEquals(" ", serializedString1.getValue());
      assertEquals(1, serializedString1.charLength());
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(iOContext2, iOContext1);
      assertNotSame(serializedString1, serializedString0);
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(serializedString1.equals((Object)serializedString0));
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(21, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-95), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(" ", serializedString1.toString());
      assertEquals(" ", serializedString1.getValue());
      assertEquals(1, serializedString1.charLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(iOContext2, iOContext1);
      assertNotSame(serializedString1, serializedString0);
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(serializedString1.equals((Object)serializedString0));
      
      uTF8JsonGenerator0.writeStartArray();
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(23, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-95), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(iOContext2, iOContext1);
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      
      uTF8JsonGenerator0.writeEndArray();
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(24, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-95), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(iOContext2, iOContext1);
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 240, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-183), (ObjectCodec) null, mockPrintStream0, byteArray0, 424, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-183), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(424, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-183), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)34, (byte)92, (byte)117, (byte)48, (byte)48, (byte)48, (byte)48, (byte)34}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.flush();
      mockFileOutputStream0.release();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 48, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 40, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)49, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(49, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((-3472L));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)34, (byte)45, (byte)51, (byte)52, (byte)55, (byte)50, (byte)34, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      uTF8JsonGenerator0.writeRaw(":%Ci");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)37, (byte)67, (byte)105, (byte)52, (byte)55, (byte)50, (byte)34, (byte)58}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNull();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108, (byte)55, (byte)50, (byte)34, (byte)58}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte) (-12);
      byteArray2[2] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray2[4] = (byte) (-1);
      uTF8JsonGenerator0.writeBoolean(true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)116, (byte)114, (byte)117, (byte)101, (byte)32, (byte)50, (byte)34, (byte) (-1)}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = '}';
      charArray0[2] = 'k';
      charArray0[3] = 'U';
      charArray0[4] = 'x';
      charArray0[5] = '`';
      charArray0[6] = ']';
      charArray0[7] = 'j';
      charArray0[8] = 'p';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 3);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new char[] {'j', '}', 'k', 'U', 'x', '`', ']', 'j', 'p'}, charArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte)114, (byte)117, (byte)101, (byte)106, (byte)125, (byte)107, (byte) (-1)}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, charArray0.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer(2);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(8000, byteArray0.length);
      assertNotNull(byteArray0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8000, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'p';
      charArray0[2] = '_';
      charArray0[3] = ';';
      charArray0[4] = '\"';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 2510);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-55);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte)11, (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55)}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeBinary(byteArray0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("\uFFFD\uFFFD\"yckieWNr", byteArrayOutputStream0.toString());
      assertEquals(11, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)97, (byte)99, (byte)110, (byte)74, (byte)34, (byte)107, (byte)105, (byte) (-55), (byte) (-55)}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(9, byteArray0.length);
      
      uTF8JsonGenerator0.writeRaw('R');
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("\uFFFD\uFFFD\"yckieWNr", byteArrayOutputStream0.toString());
      assertEquals(11, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)97, (byte)99, (byte)110, (byte)74, (byte)34, (byte)82, (byte)105, (byte) (-55), (byte) (-55)}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, false);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((double) 1);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)49, (byte)46, (byte)48, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(7, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("Z)q8TF;J5bDsa+=oO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte byte0 = (byte) (-58);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding0, jsonEncoding1);
      assertSame(iOContext1, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding1));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext2.getEncoding());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding1));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(49, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeNumber("D");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)68, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(3, byteArray0.length);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      assertEquals(6, pipedInputStream0.available());
      assertNotNull(objectOutputStream0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 418);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1910, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(1910, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber("");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1910, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte) (-55), (byte) (-55), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertNotNull(objectOutputStream0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1910, 63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1280, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1280, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1282, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(1282, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(2, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1280, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1280, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte) (-3), (byte)6, (byte)6}, byteArray0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      SerializedString serializedString0 = new SerializedString("^lr+c?d8+DL,Lp)");
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.getValue());
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.toString());
      assertEquals(15, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.getValue());
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.toString());
      assertEquals(15, serializedString0.charLength());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(15, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(17, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'r';
      charArray0[4] = 'U';
      charArray0[5] = '@';
      mockFileOutputStream0.write(11);
      charArray0[6] = 'r';
      uTF8JsonGenerator0.writeString(charArray0, 3, 1);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(20, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new char[] {'U', '\u0000', 'U', 'r', 'U', '@', 'r'}, charArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(7, charArray0.length);
      
      uTF8JsonGenerator0.writeEndArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(21, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)49;
      BigDecimal bigDecimal0 = new BigDecimal(1224.0);
      assertEquals((short)1224, bigDecimal0.shortValue());
      assertEquals((byte) (-56), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-5), (ObjectCodec) null, mockFileOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-5), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeBoolean(false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-5), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      int int0 = uTF8JsonGenerator0.getOutputBuffered();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-5), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(":%Ci");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)93, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(93, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((long) (byte)93);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(93, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)57, (byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(93, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertArrayEquals(new byte[] {(byte)57, (byte)51, (byte)44, (byte)34, (byte)32, (byte)34, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(93, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertArrayEquals(new byte[] {(byte)57, (byte)51, (byte)44, (byte)34, (byte)32, (byte)34, (byte)32, (byte)32}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      int int0 = uTF8JsonGenerator0.getOutputBuffered();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(93, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)57, (byte)51, (byte)44, (byte)34, (byte)32, (byte)34, (byte)32, (byte)32}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertEquals(8, int0);
      
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(4, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)34, (byte)32}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(4, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeRaw("");
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(4, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)34, (byte)32}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(4, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      String string0 = ")m,>WR?T|VC";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(")m,>WR?T|VC", 1, 500);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("os\"5Ze2{<#aR", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 695, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(695, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumberField("os\"5Ze2{<#aR", (double) 3);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)35, (byte)97, (byte)82, (byte)34, (byte)51, (byte)46, (byte)48, (byte)60}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeNumber((long) 0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)48, (byte)97, (byte)82, (byte)34, (byte)51, (byte)46, (byte)48, (byte)32}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      
      System.setCurrentTimeMillis(2147483647L);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      assertNotNull(objectOutputStream0);
      
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2240, 695);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BIhLT'&] fv\"U>D6~l");
      assertNotNull(mockFileOutputStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1436), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1847), false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-1436), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-1847), uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)52}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("BIhLT'&] fv\"U>D6~l");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1847
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer(2);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(8000, byteArray0.length);
      assertNotNull(byteArray0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8000, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = new SerializedString("");
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertEquals("", serializedString0.toString());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertEquals("", serializedString0.toString());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertEquals("", serializedString0.toString());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer(2);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(8000, byteArray0.length);
      assertNotNull(byteArray0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8000, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, pipedOutputStream0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(9, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(9, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":%Ci");
      assertFalse(boolean0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext1);
      assertFalse(iOContext1.equals((Object)iOContext0));
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext1, iOContext2);
      assertNotSame(iOContext1, iOContext0);
      assertNotSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext0));
      
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler1);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 2296);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)95;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 57343, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, false);
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(57343, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertArrayEquals(new byte[] {(byte) (-58), (byte) (-58), (byte)95}, byteArray0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":wCi");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      String string0 = "]/pB";
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("]/pB", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler1);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 1);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 1, true);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      mockPrintStream0.print((float) 2);
      byte[] byteArray0 = new byte[8];
      MockFile mockFile0 = new MockFile(":%Ci", ":%Ci");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, ":%Ci");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      String string0 = "";
      uTF8JsonGenerator0.writeNumber("");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      assertNotNull(objectOutputStream0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-51), (-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber("D");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)68, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      assertEquals(4, pipedInputStream0.available());
      assertNotNull(objectOutputStream0);
      
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(4, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)68, (byte)32, (byte)34, (byte)0, (byte)68, (byte)34}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-52);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 37, (ObjectCodec) null, byteArrayOutputStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(37, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      byteArrayOutputStream0.close();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      uTF8JsonGenerator0.writeNumber(0L);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(37, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(37, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      uTF8JsonGenerator0.writeString("Avi/");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(37, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(15, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(122);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      int int0 = 128;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 128, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-483), (ObjectCodec) null, pipedOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeString("RBiHDsc[eA9e;? 3sv+");
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(32, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeRaw('9');
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(33, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-3);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-3);
      byteArray1[3] = (byte)8;
      byteArray1[4] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray1, 2834, true);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2834, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte) (-3), (byte)0, (byte)0, (byte)8, (byte)19}, byteArray1);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(5, byteArray1.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":wCi");
      assertNotNull(mockFileOutputStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":wCi");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream1);
      assertNotNull(dataOutputStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 128);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(128, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject((Object) bufferRecycler0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-3);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertTrue(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext2.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext1, iOContext2);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-3);
      byteArray1[1] = (byte)13;
      byteArray1[2] = (byte)13;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray1[3] = (byte)8;
      byteArray1[4] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, (OutputStream) null, byteArray1, 2834, true);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2834, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext2.getEncoding());
      assertArrayEquals(new byte[] {(byte) (-3), (byte)13, (byte)13, (byte)8, (byte)19}, byteArray1);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(5, byteArray1.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 224);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(4, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, 1114111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%CA");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte byte0 = (byte)49;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-590), (ObjectCodec) null, mockFileOutputStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-590), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber(0L);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-590), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      byte[] byteArray1 = ByteArrayBuilder.NO_BYTES;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-590), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(bigInteger0, bigInteger1);
      
      uTF8JsonGenerator0.writeString((String) null);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(12, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-590), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      int int0 = 181;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 181, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("dFL:=7mqh;u=`v%jU^");
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      mockPrintStream1.println("J@");
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      mockPrintStream1.print(false);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(8000, byteArray0.length);
      assertNotNull(byteArray0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8000, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      
      uTF8JsonGenerator0.writeBinary(byteArray0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2673, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      
      uTF8JsonGenerator0.writeString((String) null);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2678, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertFalse(iOContext1.equals((Object)iOContext0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(3);
      assertEquals(3, byteArrayBuilder0.getCurrentSegmentLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 4, true);
      assertNull(iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(3, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(iOContext1.equals((Object)iOContext0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%CA");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[6];
      char[] charArray0 = iOContext0.allocTokenBuffer();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(4000, charArray0.length);
      assertNotNull(charArray0);
      
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-5);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-5), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)49, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(49, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-5), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-12), (byte)49, (byte) (-5), (byte)49, (byte) (-5)}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(6, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((long) (byte)49);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-5), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)34, (byte)52, (byte)57, (byte)34, (byte)49, (byte) (-5)}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-5), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)48, (byte)34, (byte)57, (byte)34, (byte)32, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.flush();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-5), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)48, (byte)34, (byte)57, (byte)34, (byte)32, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeRaw(" :/azTl@0*%<0V9y");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-5), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)48, (byte)86, (byte)57, (byte)121, (byte)37, (byte)60}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNull();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-5), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108, (byte)32, (byte)60}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(" :/azTl@0*%<0V9y", (byte)108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      String string0 = "os\"5Ze2{<#aR";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("os\"5Ze2{<#aR");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 695, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(695, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumberField("os\"5Ze2{<#aR", (double) 3);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)35, (byte)97, (byte)82, (byte)34, (byte)51, (byte)46, (byte)48, (byte)60}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeNumber((long) 0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)48, (byte)97, (byte)82, (byte)34, (byte)51, (byte)46, (byte)48, (byte)32}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      
      try { 
        uTF8JsonGenerator0._writePPFieldName("T");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not ");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      SerializedString serializedString0 = new SerializedString("Can not ");
      assertEquals(8, serializedString0.charLength());
      assertEquals("Can not ", serializedString0.toString());
      assertEquals("Can not ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumberField("", bigDecimal0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      uTF8JsonGenerator0._releaseBuffers();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext1, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 50, true);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(6, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(50, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('y');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-483), (ObjectCodec) null, pipedOutputStream0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeStartArray();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeNumberField("RBiHDsc[eA9e;? 3sv+", bigDecimal0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(27, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(29, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeNumber((double) 2);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(33, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeNumber((float) 3);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(37, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      SerializedString serializedString0 = new SerializedString("RBiHDsc[A9e;? 3sv+");
      assertEquals(19, serializedString0.charLength());
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.toString());
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-483), (ObjectCodec) null, pipedOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(19, serializedString0.charLength());
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.toString());
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.getValue());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(19, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.flush();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(19, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeNumberField("RBiHDsc[A9e;? 3sv+", bigDecimal0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(19, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(24, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(19, pipedInputStream0.available());
      assertEquals(19, serializedString0.charLength());
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.toString());
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.getValue());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(44, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeNumber(1.0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(19, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(48, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeNumberField(":%Ci", bigDecimal0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeNumber((-2719.60907946465));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(29, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext1, iOContext2);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRaw("_,\u0001pf!{");
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      
      uTF8JsonGenerator0.writeNumber((-2744));
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2000, byteArray0.length);
      assertNotNull(byteArray0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("|4`KC( F-QI");
      assertNotNull(mockPrintStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1031), (ObjectCodec) null, mockPrintStream0, byteArray0, 116, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(116, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(2000, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeStartArray();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(117, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(2000, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'v';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(126, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new char[] {'\u0000', 'v'}, charArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(2000, byteArray0.length);
      assertEquals(2, charArray0.length);
      
      uTF8JsonGenerator0.writeString("");
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(129, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(2000, byteArray0.length);
      
      uTF8JsonGenerator0.flush();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(2000, byteArray0.length);
      
      Object object0 = uTF8JsonGenerator0.getCurrentValue();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(2000, byteArray0.length);
      assertNull(object0);
      
      uTF8JsonGenerator0.writeNumber((-3246));
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(2000, byteArray0.length);
      
      uTF8JsonGenerator0.writeNumber(2147483647L);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(21, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-1031), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(2000, byteArray0.length);
      
      try { 
        uTF8JsonGenerator0._outputSurrogates(1513, (-1000));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x5e9, second 0xfffffc18
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      SerializedString serializedString0 = new SerializedString("^lr+c?d8+DL,Lp)");
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.toString());
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.getValue());
      assertEquals(15, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, mockFileOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(117, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.toString());
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.getValue());
      assertEquals(15, serializedString0.charLength());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(15, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(117, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      
      uTF8JsonGenerator0.writeStartArray();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(17, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(117, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'r';
      charArray0[4] = 'U';
      charArray0[5] = '@';
      mockFileOutputStream0.write(11);
      charArray0[6] = 'r';
      uTF8JsonGenerator0.writeString(charArray0, 3, 1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(117, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(20, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new char[] {'U', '\u0000', 'U', 'r', 'U', '@', 'r'}, charArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(7, charArray0.length);
      assertSame(iOContext0, iOContext1);
      
      uTF8JsonGenerator0.writeEndArray();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(117, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(21, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      
      uTF8JsonGenerator0.writeNumber(2550);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(28, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(117, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-12);
      SerializedString serializedString0 = new SerializedString("p.;=Rz3~4nUwVi");
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.getValue());
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.toString());
      assertEquals(14, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1955), (ObjectCodec) null, mockFileOutputStream0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1955), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.getValue());
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.toString());
      assertEquals(14, serializedString0.charLength());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(14, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1955), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1955), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(16, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, (-1955), (-1864));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1955), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(18, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, charArray0.length);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)1, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%oCi");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeStartArray();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      char[] charArray0 = new char[7];
      charArray0[5] = 'C';
      charArray0[3] = 'r';
      charArray0[4] = 'C';
      charArray0[5] = '@';
      mockFileOutputStream0.write(11);
      charArray0[6] = 'r';
      uTF8JsonGenerator0.writeString(charArray0, 3, 1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'r', 'C', '@', 'r'}, charArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(7, charArray0.length);
      
      uTF8JsonGenerator0.writeEndArray();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, (int) 'r');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-483), (ObjectCodec) null, pipedOutputStream0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeStartArray();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeNumberField("RBiHDsc[eA9e;? 3sv+", bigDecimal0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(27, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(29, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeNumber((double) 2);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(33, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 21, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 21, false);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(21, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(21, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.setEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-984), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-984), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((-2698));
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-984), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)34, (byte)45, (byte)50, (byte)54, (byte)57, (byte)56, (byte)34, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-984), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)34, (byte)45, (byte)50, (byte)54, (byte)57, (byte)56, (byte)34, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(object0);
      assertSame(mockPrintStream0, object0);
      assertSame(object0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, 0, true);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(255, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte) (-58));
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder1);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      
      ByteArrayBuilder byteArrayBuilder2 = new ByteArrayBuilder(bufferRecycler0, (-626));
      assertEquals(0, byteArrayBuilder2.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder2);
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder0));
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder1));
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(12);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      byteArrayOutputStream0.close();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 101);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder2));
      
      uTF8JsonGenerator0.writeNumber(0L);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotSame(byteArrayBuilder1, byteArrayBuilder0);
      assertNotSame(byteArrayBuilder1, byteArrayBuilder2);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder2));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = ')';
      charArray0[2] = '5';
      charArray0[3] = 'b';
      charArray0[4] = '1';
      charArray0[5] = 'd';
      charArray0[6] = 'M';
      charArray0[7] = 'D';
      uTF8JsonGenerator0.writeString(charArray0, (-605), 0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new char[] {'+', ')', '5', 'b', '1', 'd', 'M', 'D'}, charArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, charArray0.length);
      assertNotSame(byteArrayBuilder1, byteArrayBuilder0);
      assertNotSame(byteArrayBuilder1, byteArrayBuilder2);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder2));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRaw("M", 0, (-929));
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(4, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      
      IOContext iOContext2 = new IOContext(bufferRecycler0, "f.}`P8kMQ!Ro", true);
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext2);
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertTrue(iOContext2.isResourceManaged());
      assertTrue(iOContext3.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext3.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext3);
      assertSame(iOContext2, iOContext3);
      assertNotSame(iOContext2, iOContext1);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(iOContext3, iOContext1);
      assertNotSame(iOContext3, iOContext0);
      assertSame(iOContext3, iOContext2);
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 127, (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeStartObject((Object) pipedOutputStream0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(9, byteArray0.length);
      
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      String string0 = "RBiHDsc[eA9e;? 3sv+";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-483), (ObjectCodec) null, pipedOutputStream0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeStartObject();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)75;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-483), false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      char[] charArray0 = iOContext0.allocNameCopyBuffer(2);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(200, charArray0.length);
      assertNotNull(charArray0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":wri");
      assertNotNull(mockFileOutputStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":wri");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      SerializedString serializedString0 = new SerializedString("]/pB");
      assertEquals(4, serializedString0.charLength());
      assertEquals("]/pB", serializedString0.getValue());
      assertEquals("]/pB", serializedString0.toString());
      assertNotNull(serializedString0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeNumberField("yHR`U\"c{", bigDecimal0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0._releaseBuffers();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-55);
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-55);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(17, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertNotNull(tokenFilter0);
      
      uTF8JsonGenerator0.writeBinary(byteArray0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(15, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\"yckieWNraWVX", byteArrayOutputStream0.toString());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(17, byteArray0.length);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.overrideStdFeatures(3864, (byte)74);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(15, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\"yckieWNraWVX", byteArrayOutputStream0.toString());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(9, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(9, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(13, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(17, byteArray0.length);
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator1, false);
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(13, jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(15, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\"yckieWNraWVX", byteArrayOutputStream0.toString());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(9, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(9, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(13, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(17, byteArray0.length);
      assertNotNull(jsonGeneratorDelegate0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, false, false);
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(13, jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(13, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(15, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\"yckieWNraWVX", byteArrayOutputStream0.toString());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(9, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(9, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(13, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(17, byteArray0.length);
      assertNotNull(filteringGeneratorDelegate0);
      
      filteringGeneratorDelegate0.writeNumber((long) (byte)86);
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(2, jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(2, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("\uFFFD\uFFFD\"yckieWNraWVXTnJhV1ZYAAA=\" ", byteArrayOutputStream0.toString());
      assertEquals(29, byteArrayOutputStream0.size());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(9, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(9, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(17, byteArray0.length);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      
      byteArrayOutputStream0.close();
      assertEquals("\uFFFD\uFFFD\"yckieWNraWVXTnJhV1ZYAAA=\" ", byteArrayOutputStream0.toString());
      assertEquals(29, byteArrayOutputStream0.size());
      
      ObjectCodec objectCodec0 = filteringGeneratorDelegate0.getCodec();
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(2, jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(2, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("\uFFFD\uFFFD\"yckieWNraWVXTnJhV1ZYAAA=\" ", byteArrayOutputStream0.toString());
      assertEquals(29, byteArrayOutputStream0.size());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(9, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(9, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(17, byteArray0.length);
      assertNull(objectCodec0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, (-706), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.flush();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(3, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(7, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(3, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(7, byteArray0.length);
      assertNotNull(object0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(pipedOutputStream0, object0);
      assertSame(object0, pipedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      SerializedString serializedString0 = new SerializedString("JitZewLC\"");
      assertEquals(9, serializedString0.charLength());
      assertEquals("JitZewLC\"", serializedString0.toString());
      assertEquals("JitZewLC\"", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3042), (ObjectCodec) null, pipedOutputStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-3042), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-3042), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(object0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(pipedOutputStream0, object0);
      assertSame(object0, pipedOutputStream0);
      
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, false);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-3042), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(iOContext2);
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 55296, (ObjectCodec) null, pipedOutputStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-3042), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(55296, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator1);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext2));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(uTF8JsonGenerator1.equals((Object)uTF8JsonGenerator0));
      
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(9, serializedString0.charLength());
      assertEquals("JitZewLC\"", serializedString0.toString());
      assertEquals("JitZewLC\"", serializedString0.getValue());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-3042), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(9, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(55296, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext0, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertNotSame(iOContext1, iOContext2);
      assertSame(pipedOutputStream0, object0);
      assertNotSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(object0, pipedOutputStream0);
      assertNotSame(iOContext2, iOContext1);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext2));
      assertFalse(uTF8JsonGenerator0.equals((Object)uTF8JsonGenerator1));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(uTF8JsonGenerator1.equals((Object)uTF8JsonGenerator0));
      
      uTF8JsonGenerator0.writeStartArray();
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals((-3042), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext0, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertNotSame(iOContext1, iOContext2);
      assertSame(pipedOutputStream0, object0);
      assertNotSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext2));
      assertFalse(uTF8JsonGenerator0.equals((Object)uTF8JsonGenerator1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeUTF8String(byteArray0, (byte)71, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 71
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 40, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)49, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(49, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((-3472L));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new byte[] {(byte)34, (byte)45, (byte)51, (byte)52, (byte)55, (byte)50, (byte)34, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)34, (byte)49, (byte)34, (byte)52, (byte)55, (byte)50, (byte)34, (byte)32}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeRaw("5JyCrT~|");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new byte[] {(byte)114, (byte)84, (byte)126, (byte)124, (byte)74, (byte)121, (byte)127, (byte)67}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNull();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108, (byte)32, (byte)121, (byte)127, (byte)67}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte) (-12);
      byteArray2[2] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray2[4] = (byte) (-1);
      uTF8JsonGenerator0.writeBoolean(true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new byte[] {(byte)116, (byte)114, (byte)117, (byte)101, (byte)32, (byte)121, (byte)127, (byte) (-1)}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      mockFileOutputStream0.write(10);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(bigInteger0, bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeBoolean(true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)116, (byte)114, (byte)117, (byte)101, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber("D");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)68, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      assertEquals(4, pipedInputStream0.available());
      assertNotNull(objectOutputStream0);
      
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)24, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)24, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(24, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(24, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((long) 56319);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(24, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)53, (byte)54, (byte)51, (byte)49, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeRaw('~');
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(24, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)51, (byte)49, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeNumber(1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(24, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)49, (byte)32, (byte)51, (byte)49, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2470), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      assertEquals((-2470), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6}, byteArray0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      pipedOutputStream0.flush();
      assertEquals(0, pipedInputStream0.available());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 8;
      intArray0[1] = 3;
      intArray0[2] = 56320;
      intArray0[3] = 1;
      intArray0[4] = (int) (byte)6;
      intArray0[5] = 1;
      intArray0[6] = (int) (byte)6;
      intArray0[7] = 1;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(intArray0, 3, (int) (byte)6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)10;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte)10;
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)10;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)10;
      intArray0[2] = 2;
      intArray0[3] = 3;
      intArray0[4] = 1;
      intArray0[5] = 8;
      intArray0[6] = (int) (byte)10;
      intArray0[7] = 3;
      pipedOutputStream0.flush();
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 695, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(695, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((long) 0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeArrayFieldStart(":%Ci");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)32, (byte)91, (byte)34, (byte)58, (byte)37, (byte)67, (byte)105, (byte)34}, byteArray0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      String string0 = "";
      uTF8JsonGenerator0.writeNumberField("", bigDecimal0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertArrayEquals(new byte[] {(byte)49, (byte)48, (byte)34, (byte)34, (byte)37, (byte)67, (byte)105, (byte)34}, byteArray0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeString("CTjwtCU8%Z@");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)116, (byte)67, (byte)85, (byte)56, (byte)37, (byte)90, (byte)64, (byte)34}, byteArray0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      System.setCurrentTimeMillis((byte)14);
      uTF8JsonGenerator0.writeEndArray();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)93, (byte)67, (byte)85, (byte)56, (byte)37, (byte)90, (byte)64, (byte)34}, byteArray0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      boolean boolean0 = true;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "CTjwtCU8%Z@", true, 'g', 56319);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 11)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)95;
      mockPrintStream0.println('T');
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-116);
      SerializedString serializedString0 = new SerializedString("p.;=Rz3~4nUwVi");
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.getValue());
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.toString());
      assertEquals(14, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)92, (ObjectCodec) null, mockPrintStream0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(92, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.getValue());
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.toString());
      assertEquals(14, serializedString0.charLength());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(14, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(92, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(92, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(16, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[2] = 'U';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte) (-5), (-3042));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(92, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(18, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new char[] {'r', '\u0000', 'U'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(3, charArray0.length);
      
      uTF8JsonGenerator0.writeEndArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(92, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(19, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)95;
      boolean boolean1 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)95, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)95, true);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(95, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(95, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte) (-52), (byte)95, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(5, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(dataOutputStream0);
      
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 3069);
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder1);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1351, (ObjectCodec) null, mockPrintStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1351, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArrayBuilder0.equals((Object)byteArrayBuilder1));
      
      uTF8JsonGenerator0.writeNumber((double) 0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1351, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(byteArrayBuilder0, byteArrayBuilder1);
      assertFalse(byteArrayBuilder0.equals((Object)byteArrayBuilder1));
      
      uTF8JsonGenerator0.writeNumber((short)610);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1351, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(byteArrayBuilder0, byteArrayBuilder1);
      assertFalse(byteArrayBuilder0.equals((Object)byteArrayBuilder1));
      
      BigDecimal bigDecimal0 = new BigDecimal((double) 1);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(12, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1351, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(byteArrayBuilder0, byteArrayBuilder1);
      assertFalse(byteArrayBuilder0.equals((Object)byteArrayBuilder1));
      
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("vjeg<'XL", "vjeg<'XL", true, 'q', 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 8)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      SerializedString serializedString0 = new SerializedString(" in ");
      assertEquals(" in ", serializedString0.toString());
      assertEquals(4, serializedString0.charLength());
      assertEquals(" in ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeNumberField("C3", (BigDecimal) null);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0._releaseBuffers();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 24, (ObjectCodec) null, pipedOutputStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(24, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumberField("Current context not an ARRAY but ", (float) 3);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(24, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(38, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      iOContext0.releaseWriteEncodingBuffer((byte[]) null);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertSame(iOContext0, iOContext1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte byte0 = (byte)95;
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext1);
      assertSame(iOContext2, iOContext0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte) (-58));
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)95;
      boolean boolean1 = false;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)95;
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte) (-58);
      byteArray1[4] = (byte) (-58);
      byteArray1[5] = (byte)95;
      byteArray1[6] = (byte) (-58);
      byteArray1[7] = (byte) (-58);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-58), (ObjectCodec) null, byteArrayBuilder0, byteArray1, (-228), false);
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-228), uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-58), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertArrayEquals(new byte[] {(byte)95, (byte)123, (byte)123, (byte) (-58), (byte) (-58), (byte)95, (byte) (-58), (byte) (-58)}, byteArray1);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(8, byteArray1.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      try { 
        uTF8JsonGenerator0._outputSurrogates(1542, 5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x606, second 0x5
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5101, (ObjectCodec) null, mockPrintStream0, byteArray0, 55, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(55, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(5101, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)49}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeNumber(":%Ci");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(5101, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(1, byteArray0.length);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 5101);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(5101, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(1, byteArray0.length);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber("D");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)68, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      assertEquals(4, pipedInputStream0.available());
      assertNotNull(objectOutputStream0);
      
      uTF8JsonGenerator0.writeRaw("D");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(4, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)68, (byte)68, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      
      uTF8JsonGenerator0.writeNull();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(10, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108, (byte)68, (byte)32, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SerializedString serializedString0 = new SerializedString("");
      assertEquals("", serializedString0.toString());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2553, 226, true);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNotNull(filteringParserDelegate0);
      
      ObjectCodec objectCodec0 = filteringParserDelegate0.getCodec();
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNull(objectCodec0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 718, false);
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(718, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRaw("");
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(718, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, byteArray0.length);
      
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)95;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-598), (ObjectCodec) null, mockPrintStream0, byteArray0, 21, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-598), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(21, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte) (-12), (byte)49, (byte)95}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber(0L);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-598), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)34, (byte)48, (byte)34}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-598), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)49, (byte)34, (byte)34}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1631, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 599, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)0, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(599, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 2);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(599, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)34, (byte)92, (byte)34, (byte)92, (byte)92, (byte)34, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(9, byteArray0.length);
      
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.JsonEncoding");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(45, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(599, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)110, (byte)103, (byte)34, (byte)69, (byte)110, (byte)99, (byte)111, (byte)100, (byte)105}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(9, byteArray0.length);
      
      uTF8JsonGenerator0.flush();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(48, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(599, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)110, (byte)103, (byte)34, (byte)69, (byte)110, (byte)99, (byte)111, (byte)100, (byte)105}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      SerializedString serializedString0 = new SerializedString("RBiHDsc[A9e;? 3sv+");
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.getValue());
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.toString());
      assertEquals(19, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-483), (ObjectCodec) null, pipedOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.getValue());
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.toString());
      assertEquals(19, serializedString0.charLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(19, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.flush();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(19, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      byteArrayOutputStream0.close();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(19, pipedInputStream0.available());
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.getValue());
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.toString());
      assertEquals(19, serializedString0.charLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals((-483), uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertNotNull(tokenFilter0);
      
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("RBiHDsc[A9e;? 3sv+");
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
      assertNotNull(tokenFilter1);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter1, tokenFilter0);
      
      TokenFilter tokenFilter2 = tokenFilter1.filterStartObject();
      assertTrue(tokenFilter2.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter2.toString());
      assertTrue(tokenFilter2.includeRawValue());
      assertTrue(tokenFilter2.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
      assertNotNull(tokenFilter2);
      assertSame(tokenFilter2, tokenFilter0);
      assertSame(tokenFilter2, tokenFilter1);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter0, tokenFilter2);
      assertSame(tokenFilter1, tokenFilter0);
      assertSame(tokenFilter1, tokenFilter2);
      
      TokenFilter tokenFilter3 = tokenFilter2.includeRootValue(56319);
      assertTrue(tokenFilter2.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter2.toString());
      assertTrue(tokenFilter2.includeRawValue());
      assertTrue(tokenFilter2.includeBinary());
      assertTrue(tokenFilter3.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter3.toString());
      assertTrue(tokenFilter3.includeBinary());
      assertTrue(tokenFilter3.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
      assertNotNull(tokenFilter3);
      assertSame(tokenFilter2, tokenFilter3);
      assertSame(tokenFilter2, tokenFilter0);
      assertSame(tokenFilter2, tokenFilter1);
      assertSame(tokenFilter3, tokenFilter2);
      assertSame(tokenFilter3, tokenFilter0);
      assertSame(tokenFilter3, tokenFilter1);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter0, tokenFilter3);
      assertSame(tokenFilter0, tokenFilter2);
      assertSame(tokenFilter1, tokenFilter0);
      assertSame(tokenFilter1, tokenFilter3);
      assertSame(tokenFilter1, tokenFilter2);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator1, tokenFilter3, false, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(19, pipedInputStream0.available());
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.getValue());
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.toString());
      assertEquals(19, serializedString0.charLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals((-483), uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
      assertTrue(tokenFilter2.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter2.toString());
      assertTrue(tokenFilter2.includeRawValue());
      assertTrue(tokenFilter2.includeBinary());
      assertTrue(tokenFilter3.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter3.toString());
      assertTrue(tokenFilter3.includeBinary());
      assertTrue(tokenFilter3.includeNull());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(filteringGeneratorDelegate0);
      
      ObjectCodec objectCodec0 = filteringGeneratorDelegate0.getCodec();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(19, pipedInputStream0.available());
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.getValue());
      assertEquals("RBiHDsc[A9e;? 3sv+", serializedString0.toString());
      assertEquals(19, serializedString0.charLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals((-483), uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
      assertTrue(tokenFilter2.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter2.toString());
      assertTrue(tokenFilter2.includeRawValue());
      assertTrue(tokenFilter2.includeBinary());
      assertTrue(tokenFilter3.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter3.toString());
      assertTrue(tokenFilter3.includeBinary());
      assertTrue(tokenFilter3.includeNull());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(objectCodec0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter0, tokenFilter3);
      assertSame(tokenFilter0, tokenFilter2);
      assertSame(tokenFilter1, tokenFilter0);
      assertSame(tokenFilter1, tokenFilter3);
      assertSame(tokenFilter1, tokenFilter2);
      assertSame(tokenFilter2, tokenFilter3);
      assertSame(tokenFilter2, tokenFilter0);
      assertSame(tokenFilter2, tokenFilter1);
      assertSame(tokenFilter3, tokenFilter2);
      assertSame(tokenFilter3, tokenFilter0);
      assertSame(tokenFilter3, tokenFilter1);
      
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte) (-58));
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder1);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      
      ByteArrayBuilder byteArrayBuilder2 = new ByteArrayBuilder(bufferRecycler0, (-626));
      assertEquals(0, byteArrayBuilder2.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder2);
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder0));
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder1));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-4), (ObjectCodec) null, pipedOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-4), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      uTF8JsonGenerator0.writeNumber(5061.216601176625);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-4), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(19, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      uTF8JsonGenerator0.writeNumber((short) (byte)95);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(24, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals((-4), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      BigDecimal bigDecimal0 = new BigDecimal(2.147483647E9);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-4), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(37, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = 'Z';
      charArray0[2] = ' ';
      charArray0[3] = '7';
      charArray0[4] = 'k';
      charArray0[5] = '5';
      charArray0[6] = '7';
      charArray0[7] = 'q';
      uTF8JsonGenerator0.writeRaw(charArray0, 2, 2);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-4), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(39, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new char[] {'A', 'Z', ' ', '7', 'k', '5', '7', 'q'}, charArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, charArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeStartArray();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(13, byteArray0.length);
      assertEquals(2, charArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString("");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.flush();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Object object0 = uTF8JsonGenerator0.getCurrentValue();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(13, byteArray0.length);
      assertNull(object0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(110);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(525L);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      char[] charArray0 = iOContext1.allocTokenBuffer();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(4000, charArray0.length);
      assertNotNull(charArray0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber(563L);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      byte[] byteArray1 = iOContext1.allocBase64Buffer();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(bigInteger0, bigInteger1);
      
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(4, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString("");
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      System.setCurrentTimeMillis(409L);
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertSame(bigInteger2, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      
      uTF8JsonGenerator0.writeStartArray();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(15, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.close();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(16, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(72);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-55);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)13;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 32767, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(32767, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-32), (byte) (-55), (byte) (-30), (byte) (-55), (byte)13}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(6, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 54, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(54, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(2, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 34, 54);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SerializedString serializedString0 = new SerializedString("");
      assertEquals("", serializedString0.getValue());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.toString());
      assertNotNull(serializedString0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2553, 244, true);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNotNull(filteringParserDelegate0);
      
      ObjectCodec objectCodec0 = filteringParserDelegate0.getCodec();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNull(objectCodec0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 718, false);
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(718, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-119);
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 3, (-770));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 240, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(240, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, (-2393), 101);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 676, (ObjectCodec) null, pipedOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(676, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber(301L);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(676, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(iOContext0, iOContext1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(676, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(bigInteger1, bigInteger0);
      
      uTF8JsonGenerator0.writeRaw("EBm07[>&$G#[|");
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(22, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(676, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      
      uTF8JsonGenerator0.writeNull();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(27, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(676, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      
      uTF8JsonGenerator0.writeBoolean(false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(676, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(33, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      pipedOutputStream0.connect(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1280, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1280, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(24, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 599, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)6, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(599, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)34, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci", false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(":%Ci");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-183), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-183), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-183), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)92, (byte)117, (byte)48, (byte)48, (byte)48, (byte)48, (byte)34, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.flush();
      mockFileOutputStream0.release();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 57343, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 13387);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1729);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(JsonEncoding.UTF16_BE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext3.getEncoding());
      assertFalse(iOContext3.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext3);
      assertNotSame(iOContext2, iOContext1);
      assertNotSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext3);
      assertSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext3, iOContext2);
      assertNotSame(iOContext3, iOContext1);
      assertNotSame(iOContext3, iOContext0);
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 1, (ObjectCodec) null, byteArrayOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(JsonEncoding.UTF16_BE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext3.getEncoding());
      assertFalse(iOContext3.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext0));
      
      Object object0 = uTF8JsonGenerator0.getCurrentValue();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(JsonEncoding.UTF16_BE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext3.getEncoding());
      assertFalse(iOContext3.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(object0);
      assertNotSame(iOContext2, iOContext1);
      assertNotSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext3);
      assertSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext3, iOContext2);
      assertNotSame(iOContext3, iOContext1);
      assertNotSame(iOContext3, iOContext0);
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext0));
      
      IOContext iOContext4 = new IOContext(bufferRecycler0, (Object) null, true);
      assertTrue(iOContext4.isResourceManaged());
      assertNull(iOContext4.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext4);
      assertFalse(iOContext4.equals((Object)iOContext1));
      assertFalse(iOContext4.equals((Object)iOContext2));
      assertFalse(iOContext4.equals((Object)iOContext0));
      assertFalse(iOContext4.equals((Object)iOContext3));
      
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_LE;
      IOContext iOContext5 = iOContext4.withEncoding(jsonEncoding2);
      assertTrue(iOContext5.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext5.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext4.getEncoding());
      assertTrue(iOContext4.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext5);
      assertNotSame(iOContext5, iOContext0);
      assertNotSame(iOContext5, iOContext2);
      assertNotSame(iOContext5, iOContext3);
      assertNotSame(iOContext5, iOContext1);
      assertSame(iOContext5, iOContext4);
      assertNotSame(iOContext4, iOContext1);
      assertNotSame(iOContext4, iOContext2);
      assertNotSame(iOContext4, iOContext0);
      assertNotSame(iOContext4, iOContext3);
      assertSame(iOContext4, iOContext5);
      assertNotSame(jsonEncoding2, jsonEncoding0);
      assertNotSame(jsonEncoding2, jsonEncoding1);
      assertFalse(iOContext5.equals((Object)iOContext0));
      assertFalse(iOContext5.equals((Object)iOContext2));
      assertFalse(iOContext5.equals((Object)iOContext3));
      assertFalse(iOContext5.equals((Object)iOContext1));
      assertFalse(iOContext4.equals((Object)iOContext1));
      assertFalse(iOContext4.equals((Object)iOContext2));
      assertFalse(iOContext4.equals((Object)iOContext0));
      assertFalse(iOContext4.equals((Object)iOContext3));
      assertFalse(jsonEncoding2.equals((Object)jsonEncoding0));
      assertFalse(jsonEncoding2.equals((Object)jsonEncoding1));
      
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte) (-55), (ObjectCodec) null, byteArrayOutputStream0);
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals((-55), uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator1);
      assertFalse(uTF8JsonGenerator1.equals((Object)uTF8JsonGenerator0));
      assertFalse(iOContext0.equals((Object)iOContext5));
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext0.equals((Object)iOContext4));
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding2));
      assertFalse(iOContext1.equals((Object)iOContext5));
      assertFalse(iOContext1.equals((Object)iOContext4));
      assertFalse(iOContext1.equals((Object)iOContext3));
      assertFalse(iOContext1.equals((Object)iOContext2));
      
      uTF8JsonGenerator1.writeNumber(0L);
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals((-55), uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator1.getOutputBuffered());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertNotSame(iOContext0, iOContext5);
      assertNotSame(iOContext0, iOContext3);
      assertNotSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext0, iOContext4);
      assertSame(jsonEncoding0, jsonEncoding1);
      assertNotSame(jsonEncoding0, jsonEncoding2);
      assertNotSame(iOContext1, iOContext5);
      assertNotSame(iOContext1, iOContext4);
      assertNotSame(iOContext1, iOContext3);
      assertSame(iOContext1, iOContext0);
      assertNotSame(iOContext1, iOContext2);
      assertFalse(uTF8JsonGenerator1.equals((Object)uTF8JsonGenerator0));
      assertFalse(iOContext0.equals((Object)iOContext5));
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext0.equals((Object)iOContext4));
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding2));
      assertFalse(iOContext1.equals((Object)iOContext5));
      assertFalse(iOContext1.equals((Object)iOContext4));
      assertFalse(iOContext1.equals((Object)iOContext3));
      assertFalse(iOContext1.equals((Object)iOContext2));
      
      byte[] byteArray1 = iOContext1.allocBase64Buffer();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(iOContext0, iOContext5);
      assertNotSame(iOContext0, iOContext3);
      assertNotSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext0, iOContext4);
      assertSame(jsonEncoding0, jsonEncoding1);
      assertNotSame(jsonEncoding0, jsonEncoding2);
      assertNotSame(iOContext1, iOContext5);
      assertNotSame(iOContext1, iOContext4);
      assertNotSame(iOContext1, iOContext3);
      assertSame(iOContext1, iOContext0);
      assertNotSame(iOContext1, iOContext2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(iOContext0.equals((Object)iOContext5));
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext0.equals((Object)iOContext4));
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding2));
      assertFalse(iOContext1.equals((Object)iOContext5));
      assertFalse(iOContext1.equals((Object)iOContext4));
      assertFalse(iOContext1.equals((Object)iOContext3));
      assertFalse(iOContext1.equals((Object)iOContext2));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(JsonEncoding.UTF16_BE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext3.getEncoding());
      assertFalse(iOContext3.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotSame(iOContext2, iOContext4);
      assertNotSame(iOContext2, iOContext1);
      assertNotSame(iOContext2, iOContext5);
      assertNotSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext3);
      assertNotSame(jsonEncoding1, jsonEncoding2);
      assertSame(jsonEncoding1, jsonEncoding0);
      assertNotSame(iOContext3, iOContext4);
      assertNotSame(iOContext3, iOContext5);
      assertSame(iOContext3, iOContext2);
      assertNotSame(iOContext3, iOContext1);
      assertNotSame(iOContext3, iOContext0);
      assertNotSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertFalse(iOContext2.equals((Object)iOContext4));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext5));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding2));
      assertFalse(iOContext3.equals((Object)iOContext4));
      assertFalse(iOContext3.equals((Object)iOContext5));
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext0));
      assertFalse(uTF8JsonGenerator0.equals((Object)uTF8JsonGenerator1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeUTF8String(byteArray1, 128, 55296);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2000
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-55);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte)11, (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55)}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      uTF8JsonGenerator0.writeBinary(byteArray0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("\uFFFD\uFFFD\"yckieWNr", byteArrayOutputStream0.toString());
      assertEquals(11, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)97, (byte)99, (byte)110, (byte)74, (byte)34, (byte)107, (byte)105, (byte) (-55), (byte) (-55)}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.overrideStdFeatures(3864, (byte)110);
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(9, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals(5, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("\uFFFD\uFFFD\"yckieWNr", byteArrayOutputStream0.toString());
      assertEquals(11, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(9, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)97, (byte)99, (byte)110, (byte)74, (byte)34, (byte)107, (byte)105, (byte) (-55), (byte) (-55)}, byteArray0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator1, false);
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(9, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals(5, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(5, jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("\uFFFD\uFFFD\"yckieWNr", byteArrayOutputStream0.toString());
      assertEquals(11, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(9, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)97, (byte)99, (byte)110, (byte)74, (byte)34, (byte)107, (byte)105, (byte) (-55), (byte) (-55)}, byteArray0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
      assertNotNull(jsonGeneratorDelegate0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, false, false);
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(9, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals(5, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(5, jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(5, filteringGeneratorDelegate0.getOutputBuffered());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals("\uFFFD\uFFFD\"yckieWNr", byteArrayOutputStream0.toString());
      assertEquals(11, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(9, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertArrayEquals(new byte[] {(byte)97, (byte)99, (byte)110, (byte)74, (byte)34, (byte)107, (byte)105, (byte) (-55), (byte) (-55)}, byteArray0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
      assertNotNull(filteringGeneratorDelegate0);
      
      filteringGeneratorDelegate0.writeNumber((long) (byte)34);
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(9, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(2, jsonGeneratorDelegate0.getOutputBuffered());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(2, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(17, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\"yckieWNracnJ\" ", byteArrayOutputStream0.toString());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(9, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertArrayEquals(new byte[] {(byte)51, (byte)52, (byte)110, (byte)74, (byte)34, (byte)32, (byte)105, (byte) (-55), (byte) (-55)}, byteArray0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      
      byteArrayOutputStream0.close();
      assertEquals(17, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\"yckieWNracnJ\" ", byteArrayOutputStream0.toString());
      
      ObjectCodec objectCodec0 = filteringGeneratorDelegate0.getCodec();
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(9, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(2, jsonGeneratorDelegate0.getOutputBuffered());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(2, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(17, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\"yckieWNracnJ\" ", byteArrayOutputStream0.toString());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(9, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertArrayEquals(new byte[] {(byte)51, (byte)52, (byte)110, (byte)74, (byte)34, (byte)32, (byte)105, (byte) (-55), (byte) (-55)}, byteArray0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
      assertNull(objectCodec0);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, (-706), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-12);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)56;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)49, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)49, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(49, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(49, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte)95, (byte) (-12), (byte)49, (byte)1, (byte)56, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      uTF8JsonGenerator0.close();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.isClosed());
      assertEquals(49, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte)95, (byte) (-12), (byte)49, (byte)1, (byte)56, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((long) 2);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2000, byteArray0.length);
      assertNotNull(byteArray0);
      assertSame(iOContext0, iOContext1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(bigInteger1, bigInteger0);
      
      uTF8JsonGenerator0.writeRaw("_,\u0001pf!{");
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeNull();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(16, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 695, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(695, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeArrayFieldStart(":%Ci");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)34, (byte)58, (byte)37, (byte)67, (byte)105, (byte)34, (byte)91, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      mockFileOutputStream0.write(byteArray0, 0, 3);
      assertArrayEquals(new byte[] {(byte)34, (byte)58, (byte)37, (byte)67, (byte)105, (byte)34, (byte)91, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      SerializedString serializedString0 = new SerializedString("");
      assertEquals("", serializedString0.toString());
      assertEquals("", serializedString0.getValue());
      assertEquals(0, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeNumberField("", bigDecimal0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertArrayEquals(new byte[] {(byte)34, (byte)49, (byte)48, (byte)67, (byte)105, (byte)34, (byte)91, (byte)34}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertArrayEquals(new byte[] {(byte)49, (byte)48, (byte)48, (byte)44, (byte)105, (byte)34, (byte)91, (byte)34}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeNumber((short) (byte)14);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)49, (byte)52, (byte)44, (byte)44, (byte)105, (byte)34, (byte)91, (byte)34}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeStartObject();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)49, (byte)52, (byte)44, (byte)123, (byte)105, (byte)34, (byte)91, (byte)34}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber(563L);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      byte[] byteArray1 = iOContext1.allocBase64Buffer();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(bigInteger0, bigInteger1);
      
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(4, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      System.setCurrentTimeMillis(409L);
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(10, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      
      uTF8JsonGenerator0.writeStartArray();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(12, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.close();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(13, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4723, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(4723, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeNumberField("RBiHDsc[eA9e;? 3sv+", bigDecimal0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(25, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(27, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      
      uTF8JsonGenerator0.writeNumber(2546.589660809947);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(45, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(45, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(object0);
      assertSame(iOContext0, iOContext1);
      assertSame(pipedOutputStream0, object0);
      assertSame(object0, pipedOutputStream0);
      
      uTF8JsonGenerator0.writeStartArray();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(47, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(pipedOutputStream0, object0);
      
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      SerializedString serializedString0 = new SerializedString(":%Ci");
      assertEquals(4, serializedString0.charLength());
      assertEquals(":%Ci", serializedString0.toString());
      assertEquals(":%Ci", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(4, serializedString0.charLength());
      assertEquals(":%Ci", serializedString0.toString());
      assertEquals(":%Ci", serializedString0.getValue());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      mockFileOutputStream0.write(11);
      uTF8JsonGenerator0.writeEndArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.print((Object) ":%Ci");
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-116);
      SerializedString serializedString0 = new SerializedString("p.;=Rz3~4nUwVi");
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.toString());
      assertEquals(14, serializedString0.charLength());
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)92, (ObjectCodec) null, mockPrintStream0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(92, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.toString());
      assertEquals(14, serializedString0.charLength());
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.getValue());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(14, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(92, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(16, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(92, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(92, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(17, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, (byte) (-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-483), (ObjectCodec) null, pipedOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeStartArray();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeNumber((double) 2);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-483), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer(2);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(8000, byteArray0.length);
      assertNotNull(byteArray0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8000, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0._releaseBuffers();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0._verifyValueWrite("Current context not an object but ");
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Jd;bjCd4D9|pW", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0._releaseBuffers();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext1, iOContext2);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)91, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2240, true);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2240, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(91, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, 0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2240, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(91, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext1, iOContext2);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      IOContext iOContext2 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext2);
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-569));
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an ARRAY but ");
      assertNotNull(mockPrintStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-352), (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 2085, false);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-352), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2085, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext2));
      
      uTF8JsonGenerator0.close();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-352), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.isClosed());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext0, iOContext2);
      assertNotSame(iOContext1, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext2));
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)95;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)95, false);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(95, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(4, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)95, (byte)95}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(5, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.json.UTF8JsonGenerator", 0);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(95, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(4, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)95, (byte)95}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(5, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      
      uTF8JsonGenerator0.close();
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(4, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)95, (byte)95}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(5, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/)q:Kjs>1l[/A\"");
      assertFalse(boolean0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder1);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      
      ByteArrayBuilder byteArrayBuilder2 = new ByteArrayBuilder(1);
      assertEquals(0, byteArrayBuilder2.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder2);
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder0));
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder1));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4), (ObjectCodec) null, byteArrayBuilder2);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder2.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-4), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder0));
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder1));
      
      uTF8JsonGenerator0.writeNumber((double) 3);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder2.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-4), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertNotSame(byteArrayBuilder2, byteArrayBuilder0);
      assertNotSame(byteArrayBuilder2, byteArrayBuilder1);
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder0));
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder1));
      
      uTF8JsonGenerator0.writeNumber((short)1476);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder2.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-4), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(12, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertNotSame(byteArrayBuilder2, byteArrayBuilder0);
      assertNotSame(byteArrayBuilder2, byteArrayBuilder1);
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder0));
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder1));
      
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5101, (ObjectCodec) null, mockPrintStream0, byteArray0, 55, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(5101, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(55, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)49}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeNumber(":%Ci");
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(5101, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(1, byteArray0.length);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream1);
      assertNotNull(objectOutputStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)10, (byte)10, (byte)10}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(5, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)34, (byte)32, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(5, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      
      uTF8JsonGenerator0.writeRaw(';');
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(5, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)59, (byte)10, (byte)34, (byte)32, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(5, byteArray0.length);
      assertSame(iOContext0, iOContext1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertNotNull(byteBuffer0);
      
      char[] charArray0 = serializedString0.asQuotedChars();
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      int int0 = serializedString0.putUnquotedUTF8(byteBuffer0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertEquals((-1), int0);
      
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertArrayEquals(new byte[] {(byte)32, (byte)34, (byte)34}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(3, byteArray0.length);
      
      uTF8JsonGenerator0.writeRaw("");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)32, (byte)34, (byte)34}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte) (-5);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1/X");
      assertFalse(boolean0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertFalse(iOContext1.equals((Object)iOContext0));
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext1, iOContext2);
      assertNotSame(iOContext1, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertNotSame(iOContext2, iOContext0);
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-734), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-3), false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-3), uTF8JsonGenerator0.getOutputBuffered());
      assertEquals((-734), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext0.equals((Object)iOContext1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 13387);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      int int0 = 0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      int int1 = 1729;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1729);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SerializedString serializedString0 = new SerializedString("");
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertEquals("", serializedString0.toString());
      assertNotNull(serializedString0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2553, 226, true);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNotNull(filteringParserDelegate0);
      
      ObjectCodec objectCodec0 = filteringParserDelegate0.getCodec();
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNull(objectCodec0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 718, false);
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(718, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-311), (-42));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SerializedString serializedString0 = new SerializedString("");
      assertEquals("", serializedString0.toString());
      assertEquals("", serializedString0.getValue());
      assertEquals(0, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2553, 244, true);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNotNull(filteringParserDelegate0);
      
      ObjectCodec objectCodec0 = filteringParserDelegate0.getCodec();
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNull(objectCodec0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 718, false);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(718, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-311), (-42));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext2);
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(3);
      assertEquals(3, byteArrayBuilder0.getCurrentSegmentLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(3, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext2));
      
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 23, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(23, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      System.setCurrentTimeMillis(2955L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream(3);
      assertEquals(0, pipedInputStream1.available());
      assertNotNull(pipedInputStream1);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream1);
      assertEquals(0, pipedInputStream1.available());
      assertNotNull(bufferedInputStream0);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      assertEquals(0, pipedInputStream1.available());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)10, true);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, pipedInputStream1.available());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(10, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte) (-72)}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, Integer.MAX_VALUE, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(Integer.MAX_VALUE, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(serializedString0);
      
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-28);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertTrue(iOContext2.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertTrue(iOContext2.isResourceManaged());
      assertTrue(iOContext3.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext3.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext3);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext0, iOContext2);
      assertSame(iOContext2, iOContext3);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(iOContext2, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertNotSame(iOContext3, iOContext1);
      assertNotSame(iOContext3, iOContext0);
      assertSame(iOContext3, iOContext2);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 224, (ObjectCodec) null, dataOutputStream0);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertTrue(iOContext2.isResourceManaged());
      assertTrue(iOContext3.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext3.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(224, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext0));
      
      uTF8JsonGenerator0.writeNumber(772L);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertTrue(iOContext2.isResourceManaged());
      assertTrue(iOContext3.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext3.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(224, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext0, iOContext2);
      assertSame(iOContext2, iOContext3);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(iOContext2, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertNotSame(iOContext3, iOContext1);
      assertNotSame(iOContext3, iOContext0);
      assertSame(iOContext3, iOContext2);
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext0));
      
      byte[] byteArray1 = iOContext1.allocBase64Buffer();
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding0, jsonEncoding1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(iOContext1, iOContext2);
      assertNotSame(iOContext1, iOContext3);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding1));
      assertFalse(iOContext1.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertTrue(iOContext2.isResourceManaged());
      assertTrue(iOContext3.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext3.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(224, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext0, iOContext2);
      assertSame(iOContext2, iOContext3);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(iOContext2, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertNotSame(iOContext3, iOContext1);
      assertNotSame(iOContext3, iOContext0);
      assertSame(iOContext3, iOContext2);
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext0));
      
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0);
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator1);
      assertFalse(uTF8JsonGenerator1.equals((Object)uTF8JsonGenerator0));
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(iOContext0.equals((Object)iOContext2));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = 'g';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeString(charArray0, 14, 56319);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeStartArray();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-1480), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1480
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      byteArray0[8] = (byte) (-14);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte) (-14);
      byteArray0[8] = (byte) (-14);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1280, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1280, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte)0, (byte) (-14), (byte) (-3), (byte) (-14), (byte) (-14)}, byteArray0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1069);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber(563L);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      byte[] byteArray1 = iOContext1.allocBase64Buffer();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(bigInteger0, bigInteger1);
      
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(4, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      System.setCurrentTimeMillis(409L);
      String string0 = "";
      char char0 = 'l';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", true, 'l', (-3042));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-58);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-687), (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)95, false);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-687), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(95, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)10, (byte)95, (byte)123, (byte) (-58)}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = new SerializedString("write a boolean value");
      assertEquals("write a boolean value", serializedString0.getValue());
      assertEquals(21, serializedString0.charLength());
      assertEquals("write a boolean value", serializedString0.toString());
      assertNotNull(serializedString0);
      
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      uTF8JsonGenerator0.writeRaw(charArray0, 1, (-164));
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new char[] {'E'}, charArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, charArray0.length);
      assertSame(iOContext0, iOContext1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[9];
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0._maximumNonEscapedChar = 1;
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      
      uTF8JsonGenerator0.writeBoolean(false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder1);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      
      ByteArrayBuilder byteArrayBuilder2 = new ByteArrayBuilder(0);
      assertEquals(0, byteArrayBuilder2.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder2);
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder1));
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-4), (ObjectCodec) null, pipedOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-4), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      uTF8JsonGenerator0.writeNumber(5061.216601176625);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(19, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-4), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)10;
      byteArray0[0] = (byte)10;
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 3, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)10;
      byteArray0[0] = (byte)10;
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 3, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      SerializedString serializedString0 = new SerializedString("^lr+c?d8+DL,Lp)");
      assertEquals(15, serializedString0.charLength());
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.toString());
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, mockFileOutputStream0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(117, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(15, serializedString0.charLength());
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.toString());
      assertEquals("^lr+c?d8+DL,Lp)", serializedString0.getValue());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(117, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(15, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(117, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(17, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'r';
      charArray0[4] = 'U';
      charArray0[5] = '@';
      mockFileOutputStream0.write(11);
      charArray0[6] = 'r';
      uTF8JsonGenerator0.writeString(charArray0, 3, 1);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(117, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(20, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new char[] {'U', '\u0000', 'U', 'r', 'U', '@', 'r'}, charArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(7, charArray0.length);
      
      uTF8JsonGenerator0.writeEndArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(117, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(21, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[6] = (byte)125;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 54, (ObjectCodec) null, pipedOutputStream0, byteArray0, 9, false);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)125, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(10, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '@';
      charArray0[2] = '{';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      uTF8JsonGenerator0.writeString(charArray0, 3, 1);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(10, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)34, (byte)0, (byte)0, (byte)0, (byte)125, (byte)0, (byte)0, (byte)34}, byteArray0);
      assertArrayEquals(new char[] {'/', '@', '{', '\\', '\\'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(10, byteArray0.length);
      assertEquals(5, charArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeString("!'Zt5");
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(20, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)34, (byte)92, (byte)34, (byte)32, (byte)34, (byte)33, (byte)39, (byte)90, (byte)116, (byte)53}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(10, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.flush();
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(21, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)34, (byte)92, (byte)34, (byte)32, (byte)34, (byte)33, (byte)39, (byte)90, (byte)116, (byte)53}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(10, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      Object object0 = uTF8JsonGenerator0.getCurrentValue();
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(21, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)34, (byte)92, (byte)34, (byte)32, (byte)34, (byte)33, (byte)39, (byte)90, (byte)116, (byte)53}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(10, byteArray0.length);
      assertNull(object0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(21, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(54, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)34, (byte)92, (byte)34, (byte)32, (byte)34, (byte)33, (byte)39, (byte)90, (byte)116, (byte)53}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(10, byteArray0.length);
      assertNotNull(object1);
      assertSame(iOContext0, iOContext1);
      assertSame(object1, pipedOutputStream0);
      assertSame(iOContext1, iOContext0);
      assertSame(pipedOutputStream0, object1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext1, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)95, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2240, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2240, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(95, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      char[] charArray0 = new char[0];
      int int0 = 256;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = iOContext0.allocReadIOBuffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(8000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeStartArray();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertEquals(2, charArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString(charArray0, 0, 0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertEquals(2, charArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber((-479L));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeNull();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-116);
      SerializedString serializedString0 = new SerializedString("p.;=Rz3~4nUwVi");
      assertEquals(14, serializedString0.charLength());
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.toString());
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)92, (ObjectCodec) null, mockPrintStream0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(92, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(14, serializedString0.charLength());
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.toString());
      assertEquals("p.;=Rz3~4nUwVi", serializedString0.getValue());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(92, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(14, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(16, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(92, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = '6';
      charArray0[2] = 'U';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte) (-5), (-3042));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(18, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(92, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new char[] {'r', '6', 'U'}, charArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(13, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeStartArray();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(13, byteArray0.length);
      assertEquals(2, charArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeRaw('~');
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-103), (ObjectCodec) null, pipedOutputStream0, byteArray0, 10, true);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(10, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-103), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0._verifyValueWrite("Numeric value (");
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(10, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-103), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(7, byteArray0.length);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      
      String string0 = "";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Numeric value (", "", true, ';', 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      int int0 = 3374;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.flush();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      int[] intArray0 = new int[0];
      try { 
        uTF8JsonGenerator0.writeArray(intArray0, (-794), (-794));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":7r%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 695, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(695, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeArrayFieldStart(":7r%Ci");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)91, (byte)58, (byte)55, (byte)114, (byte)37, (byte)67, (byte)105, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeNumberField("", bigDecimal0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertArrayEquals(new byte[] {(byte)49, (byte)48, (byte)34, (byte)114, (byte)37, (byte)67, (byte)105, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 676, (ObjectCodec) null, pipedOutputStream0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(676, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber(301L);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(676, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(iOContext0, iOContext1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(676, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(bigInteger1, bigInteger0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 56319, (-2019));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      String string0 = ":%Ci";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(":%Ci");
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3310, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(4, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)34, (byte)32}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(4, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeRaw(';');
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(5, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)34, (byte)32}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(4, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      
      char[] charArray0 = serializedString0.asQuotedChars();
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      int int0 = serializedString0.putUnquotedUTF8(byteBuffer0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals((-1), int0);
      
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(4, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertArrayEquals(new byte[] {(byte)34, (byte)32}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte) (-58));
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)95;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (byte)95, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(95, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertArrayEquals(new byte[] {(byte) (-58), (byte) (-58), (byte)95, (byte) (-58), (byte)123, (byte)123, (byte)95}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4581, (ObjectCodec) null, (OutputStream) null);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(4581, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      String string0 = "/~[Gux''e";
      uTF8JsonGenerator0.writeNullField("/~[Gux''e");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(4581, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      boolean boolean0 = true;
      char char0 = 'N';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4581, (ObjectCodec) null, (OutputStream) null);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(4581, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNullField("/~[Gux''e");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(4581, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)95, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2240, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(95, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2240, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      String string0 = "Tgzb2dB +sh";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("Tgzb2dB +sh");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(bigInteger0, bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString(":%Ci");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)105, (byte)34, (byte)48, (byte)32, (byte)34, (byte)58, (byte)37, (byte)67}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      try { 
        uTF8JsonGenerator0._outputSurrogates(0, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x0, second 0x3
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ARRAY");
      assertNotNull(mockFileOutputStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("@uzfo[bYwA&Z4[,)|)8");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      SerializedString serializedString0 = new SerializedString("@uzfo[bYwA&Z4[,)|)8");
      assertEquals(19, serializedString0.charLength());
      assertEquals("@uzfo[bYwA&Z4[,)|)8", serializedString0.toString());
      assertEquals("@uzfo[bYwA&Z4[,)|)8", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      mockFileOutputStream0.flush();
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 148, (ObjectCodec) null, mockFileOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(148, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeNumberField("@uzfo[bYwA&Z4[,)|)8", bigDecimal0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(148, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(21, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0._releaseBuffers();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(148, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(21, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      try { 
        uTF8JsonGenerator0.writeFieldName("]");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(1);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(8000, byteArray0.length);
      assertNotNull(byteArray0);
      assertSame(iOContext0, iOContext1);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals("", stringWriter0.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(writerBasedJsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals("", stringWriter0.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(filteringGeneratorDelegate0);
      
      ObjectCodec objectCodec0 = filteringGeneratorDelegate0.getCodec();
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals("", stringWriter0.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(objectCodec0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      IOContext iOContext2 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.JsonFactory", true);
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext2);
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      
      SerializedString serializedString0 = new SerializedString("Can not ");
      assertEquals(8, serializedString0.charLength());
      assertEquals("Can not ", serializedString0.toString());
      assertEquals("Can not ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals("", stringWriter0.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(8, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(8, serializedString0.charLength());
      assertEquals("Can not ", serializedString0.toString());
      assertEquals("Can not ", serializedString0.getValue());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext1, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext2));
      
      ObjectCodec objectCodec1 = filteringGeneratorDelegate0.getCodec();
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals("", stringWriter0.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(8, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(8, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(objectCodec1);
      assertNotSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext1, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext2));
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)80;
      byteArray1[2] = (byte)80;
      byteArray1[3] = (byte)80;
      byteArray1[4] = (byte)82;
      byteArray1[5] = (byte)80;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 56319, false);
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(56319, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertArrayEquals(new byte[] {(byte)80, (byte)80, (byte)80, (byte)80, (byte)82, (byte)80}, byteArray1);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(6, byteArray1.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.JsonFactory");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(dataOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1351, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, (-1266), true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1266), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1351, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("?CSaro53I&*");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1266
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 224, (ObjectCodec) null, mockPrintStream0, byteArray0, 2000, true);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2000, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(224, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(5, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      charArray0[6] = 'C';
      charArray0[7] = 'C';
      charArray0[8] = 'C';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 1260);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      String string0 = ":%Ci";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1993), (ObjectCodec) null, mockPrintStream0, byteArray0, (-14), true);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-1993), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-14), uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-5), (byte)95, (byte) (-12), (byte)49, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      char char0 = 'C';
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2093, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2093
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 40, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)49, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(49, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((-3472L));
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)34, (byte)45, (byte)51, (byte)52, (byte)55, (byte)50, (byte)34, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)34, (byte)49, (byte)34, (byte)52, (byte)55, (byte)50, (byte)34, (byte)32}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeRaw("5JyCrT~|");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)114, (byte)84, (byte)126, (byte)124, (byte)74, (byte)121, (byte)127, (byte)67}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNull();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(40, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108, (byte)32, (byte)121, (byte)127, (byte)67}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte) (-12);
      byteArray2[2] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray2[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray2, 56320, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      SerializedString serializedString0 = new SerializedString(":%Ci");
      assertEquals(":%Ci", serializedString0.toString());
      assertEquals(4, serializedString0.charLength());
      assertEquals(":%Ci", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      SerializedString serializedString1 = new SerializedString("'");
      assertEquals(1, serializedString1.charLength());
      assertEquals("'", serializedString1.getValue());
      assertEquals("'", serializedString1.toString());
      assertNotNull(serializedString1);
      assertFalse(serializedString1.equals((Object)serializedString0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream1);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      char[] charArray0 = new char[0];
      mockFileOutputStream1.release();
      assertNotSame(mockFileOutputStream1, mockFileOutputStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      uTF8JsonGenerator0.writeRaw(charArray0, 610, (-592));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, charArray0.length);
      assertNotSame(mockFileOutputStream1, mockFileOutputStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 3, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-116);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 1024, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1024, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-5), (byte)95, (byte) (-12), (byte)49, (byte)1, (byte)92, (byte) (-116)}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte) (-5), 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext1);
      assertSame(iOContext2, iOContext0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte) (-58));
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'e';
      charArray0[4] = 'C';
      uTF8JsonGenerator0.writeRaw(charArray0, 745, (-8));
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'E', 'C', 'C', 'e', 'C', '\u0000'}, charArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(7, byteArray0.length);
      assertEquals(6, charArray0.length);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding0, jsonEncoding1);
      assertSame(iOContext1, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding1));
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-55);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumberField("yH7R`U\"c{", bigDecimal0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(12, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(14, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      uTF8JsonGenerator0.writeNumber((double) 1);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(18, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      uTF8JsonGenerator0.writeNumber((float) (byte) (-55));
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(24, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 599, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)0, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(599, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 2);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(599, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)34, (byte)92, (byte)34, (byte)92, (byte)92, (byte)34, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      
      uTF8JsonGenerator0.writeString("");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(599, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)34, (byte)92, (byte)34, (byte)92, (byte)92, (byte)34, (byte)32, (byte)34, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4581, (ObjectCodec) null, (OutputStream) null);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(4581, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0._flushBuffer();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(4581, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      uTF8JsonGenerator0.writeNumber(0.0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(4581, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      String string0 = "No digit following minus sign";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("No digit following minus sign", "No digit following minus sign", true, 'N', (-132));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 29)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertTrue(iOContext2.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte) (-58));
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-103), (ObjectCodec) null, pipedOutputStream0, byteArray0, 10, true);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-103), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(10, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte) (-58), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) (-103));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(98);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-55);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte) (-55), false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-55), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55)}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(6, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      assertEquals(109, serializedString0.charLength());
      assertEquals("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", serializedString0.toString());
      assertEquals("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -55
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)24, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)24, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(24, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(24, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeString(":%Ci");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(24, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)34, (byte)58, (byte)37, (byte)67, (byte)105, (byte)34, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.flush();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(24, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)34, (byte)58, (byte)37, (byte)67, (byte)105, (byte)34, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer(1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(8000, byteArray0.length);
      assertNotNull(byteArray0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 555, (ObjectCodec) null, pipedOutputStream0, byteArray0, 555, true);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(555, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(555, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8000, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.close();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(555, pipedInputStream0.available());
      assertEquals(555, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2660.6412625378);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(writerBasedJsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertNotNull(tokenFilter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(filteringGeneratorDelegate0);
      
      ObjectCodec objectCodec0 = filteringGeneratorDelegate0.getCodec();
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(objectCodec0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      IOContext iOContext2 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.JsonFactory", true);
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      
      ObjectCodec objectCodec1 = filteringGeneratorDelegate0.getCodec();
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(objectCodec1);
      assertNotSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext1, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext2));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)80;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 164, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 56319, false);
      assertEquals(164, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(56319, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertArrayEquals(new byte[] {(byte)80, (byte)80, (byte)80, (byte)80, (byte)82, (byte)80}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(6, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) (byte)80);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 599, 599);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler1);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler1, object0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      byte[] byteArray0 = byteArrayBuilder0.finishCurrentSegment();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1000, byteArray0.length);
      assertNotNull(byteArray0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2), true);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-2), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)10;
      byteArray0[0] = (byte)10;
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)10;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)10;
      intArray0[2] = 2;
      intArray0[3] = 3;
      intArray0[4] = 1;
      intArray0[5] = 8;
      intArray0[6] = (int) (byte)10;
      intArray0[7] = 3;
      pipedOutputStream0.flush();
      assertEquals(0, pipedInputStream0.available());
      
      intArray0[8] = 2;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(intArray0, 10, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      
      uTF8JsonGenerator0.writeRaw("kgt~^]u");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(9, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)93, (byte)117, (byte)0, (byte)48, (byte)107, (byte)103, (byte)116, (byte)126, (byte)94}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      
      uTF8JsonGenerator0.writeNull();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(9, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)93, (byte)117, (byte)32, (byte)110, (byte)117, (byte)108, (byte)108, (byte)126, (byte)94}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      
      uTF8JsonGenerator0.writeStartArray();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(9, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)93, (byte)117, (byte)32, (byte)110, (byte)117, (byte)108, (byte)108, (byte)32, (byte)91}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)92;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 199, (byte)92, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertArrayEquals(new byte[] {(byte) (-53), (byte)92}, byteArray0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, (TokenFilter) null, false, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(1, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte) (-53), (byte)92}, byteArray0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, byteArray0.length);
      assertNotNull(filteringParserDelegate0);
      
      ObjectCodec objectCodec0 = filteringParserDelegate0.getCodec();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(1, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte) (-53), (byte)92}, byteArray0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, byteArray0.length);
      assertNull(objectCodec0);
      assertSame(iOContext0, iOContext1);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-5792), (ObjectCodec) null, (OutputStream) null, byteArray0, 75, true);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(75, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-5792), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte) (-53), (byte)92}, byteArray0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(2, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      String string0 = "";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 706, (ObjectCodec) null, dataOutputStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(706, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber("");
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(706, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      
      String string1 = "NL@mO+Hfhr?4 ]";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("NL@mO+Hfhr?4 ]", "write a null", true, 'F', 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 12)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      int int0 = (-3629);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3629), (ObjectCodec) null, mockPrintStream0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((-3629), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumberField("", bigDecimal0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((-3629), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      uTF8JsonGenerator0._releaseBuffers();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((-3629), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      String string0 = "]";
      try { 
        uTF8JsonGenerator0.writeFieldName("\"~Y_");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeStartArray();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertEquals(2, charArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeNumberField(":%Ci", bigDecimal0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)49;
      char[] charArray0 = iOContext0.allocTokenBuffer();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(4000, charArray0.length);
      assertNotNull(charArray0);
      
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)56;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 989, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1987, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(989, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1987, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte)95, (byte) (-12), (byte)49, (byte)1, (byte)56, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeBoolean(false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(989, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)102, (byte)97, (byte)108, (byte)115, (byte)101, (byte)1, (byte)56, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeNumber((short) (byte)1);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(989, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)49, (byte)97, (byte)108, (byte)115, (byte)101, (byte)32, (byte)56, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte) (-58));
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder1);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      
      ByteArrayBuilder byteArrayBuilder2 = new ByteArrayBuilder(bufferRecycler0, (-626));
      assertEquals(0, byteArrayBuilder2.getCurrentSegmentLength());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder2);
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder0));
      assertFalse(byteArrayBuilder2.equals((Object)byteArrayBuilder1));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-4), (ObjectCodec) null, pipedOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-4), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      uTF8JsonGenerator0.writeNumber(5061.216601176625);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(19, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-4), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      uTF8JsonGenerator0.writeNumber((short) (byte)95);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-4), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(24, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      BigDecimal bigDecimal0 = new BigDecimal(2.147483647E9);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-4), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(37, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext1, iOContext0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertTrue(iOContext2.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding0, jsonEncoding1);
      assertSame(iOContext2, iOContext1);
      assertSame(iOContext2, iOContext0);
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding1));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      uTF8JsonGenerator0.writeNull();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext1, iOContext2);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      uTF8JsonGenerator0.writeNumber((double) 3);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext1, iOContext2);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeNumberField("Non-standard token '", bigDecimal0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(23, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertArrayEquals(new byte[] {(byte)49, (byte)48, (byte)110, (byte)32, (byte)39, (byte)100, (byte)32, (byte)116, (byte)111}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(9, byteArray0.length);
      
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(23, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)49, (byte)48, (byte)110, (byte)32, (byte)39, (byte)100, (byte)32, (byte)116, (byte)111}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(9, byteArray0.length);
      assertNotNull(object0);
      assertSame(pipedOutputStream0, object0);
      assertSame(object0, pipedOutputStream0);
      
      uTF8JsonGenerator0.writeNull();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(23, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new byte[] {(byte)49, (byte)48, (byte)32, (byte)110, (byte)117, (byte)108, (byte)108, (byte)116, (byte)111}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(9, byteArray0.length);
      assertSame(pipedOutputStream0, object0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber("D");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)68, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      assertEquals(4, pipedInputStream0.available());
      assertNotNull(objectOutputStream0);
      
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(objectOutputStream0);
      assertEquals(4, pipedInputStream0.available());
      assertNotNull(objectOutputStream1);
      assertFalse(objectOutputStream1.equals((Object)objectOutputStream0));
      
      uTF8JsonGenerator0.writeNumber((short)170);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(9, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)49, (byte)55, (byte)48, (byte)68, (byte)32, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
      
      uTF8JsonGenerator0.writeStartObject();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(9, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertArrayEquals(new byte[] {(byte)49, (byte)55, (byte)48, (byte)32, (byte)123, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 109);
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder1);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder1);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      
      uTF8JsonGenerator0.writeNumber((double) 3);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteArrayBuilder1, byteArrayBuilder0);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      
      uTF8JsonGenerator0.writeNumber((short) (byte)95);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteArrayBuilder1, byteArrayBuilder0);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      
      BigDecimal bigDecimal0 = new BigDecimal((double) 57343);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-8193), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(12, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-8193), bigDecimal0.shortValue());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteArrayBuilder1, byteArrayBuilder0);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext1, iOContext0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding0, jsonEncoding1);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding1));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      uTF8JsonGenerator0.writeNull();
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext1, iOContext2);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      uTF8JsonGenerator0.writeNumber((float) 1);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext1, iOContext2);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte) (-58));
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)95;
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, (-1894));
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(byteArrayBuilder1);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-58), (ObjectCodec) null, byteArrayBuilder0);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-58), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArrayBuilder0.equals((Object)byteArrayBuilder1));
      
      uTF8JsonGenerator0.writeNumber(0.0);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-58), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(byteArrayBuilder0, byteArrayBuilder1);
      assertFalse(byteArrayBuilder0.equals((Object)byteArrayBuilder1));
      
      uTF8JsonGenerator0.writeNumber((short) (byte)95);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-58), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(byteArrayBuilder0, byteArrayBuilder1);
      assertFalse(byteArrayBuilder0.equals((Object)byteArrayBuilder1));
      
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte)123);
      assertEquals((byte)123, bigDecimal0.byteValue());
      assertEquals((short)123, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-58), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(10, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((byte)123, bigDecimal0.byteValue());
      assertEquals((short)123, bigDecimal0.shortValue());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext0, iOContext2);
      assertNotSame(byteArrayBuilder0, byteArrayBuilder1);
      assertFalse(byteArrayBuilder0.equals((Object)byteArrayBuilder1));
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      mockPrintStream0.print(true);
      byte[] byteArray2 = bufferRecycler0.allocByteBuffer(2, 2);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2000, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, true);
      assertNull(iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      assertFalse(iOContext1.equals((Object)iOContext0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 96, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 1383, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(96, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1383, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray1.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(iOContext1.equals((Object)iOContext0));
      
      uTF8JsonGenerator0.writeBinary(byteArray0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(96, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(1405, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(13, byteArray0.length);
      assertEquals(2000, byteArray1.length);
      assertNotSame(iOContext0, iOContext1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(iOContext1, iOContext0);
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(iOContext1.equals((Object)iOContext0));
      
      uTF8JsonGenerator0.writeString("start an array");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(96, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1422, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2000, byteArray1.length);
      assertNotSame(iOContext0, iOContext1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(iOContext1, iOContext0);
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(iOContext1.equals((Object)iOContext0));
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 695, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(695, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((long) 0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeArrayFieldStart(":%Ci");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)32, (byte)91, (byte)34, (byte)58, (byte)37, (byte)67, (byte)105, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.flush();
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)97, (byte)83, (byte)73, (byte)61, (byte)34, (byte)67, (byte)105, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeRaw("");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)97, (byte)83, (byte)73, (byte)61, (byte)34, (byte)67, (byte)105, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeNull();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108, (byte)34, (byte)44, (byte)105, (byte)34}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("dFL:=7mqh;u=`v%jU^");
      assertNotNull(mockPrintStream0);
      
      mockPrintStream0.print(true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2000, byteArray0.length);
      assertNotNull(byteArray0);
      assertSame(iOContext0, iOContext1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 142, true);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(142, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(2000, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeBinary(byteArray0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(817, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(2000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      
      uTF8JsonGenerator0.writeString("dFL:=7mqh;u=`v%jU^");
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(838, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(2000, byteArray0.length);
      assertSame(iOContext0, iOContext1);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(2);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(8000, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[4] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 2, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)11, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray1.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      uTF8JsonGenerator0.writeBinary(byteArray1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(11, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\"AAAiQUFB", byteArrayOutputStream0.toString());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)97, (byte)81, (byte)65, (byte)65, (byte)34, (byte)65, (byte)105, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      uTF8JsonGenerator0.writeRaw('R');
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(11, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\"AAAiQUFB", byteArrayOutputStream0.toString());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)97, (byte)81, (byte)65, (byte)65, (byte)34, (byte)82, (byte)105, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      uTF8JsonGenerator0.writeBoolean(false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(18, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\"AAAiQUFBaQAA\"R ", byteArrayOutputStream0.toString());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertArrayEquals(new byte[] {(byte)102, (byte)97, (byte)108, (byte)115, (byte)101, (byte)82, (byte)32, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1260);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      int int0 = 0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1729);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte) (-55)}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertNotNull(tokenFilter0);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      SerializedString serializedString0 = new SerializedString("[N_p");
      assertEquals("[N_p", serializedString0.getValue());
      assertEquals("[N_p", serializedString0.toString());
      assertEquals(4, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4000, (ObjectCodec) null, pipedOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(4000, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("[N_p", serializedString0.getValue());
      assertEquals("[N_p", serializedString0.toString());
      assertEquals(4, serializedString0.charLength());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(4000, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      uTF8JsonGenerator0.writeStartArray();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(4000, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 4000, 2545);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4000
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      SerializedString serializedString0 = new SerializedString(":%Ci");
      assertEquals(":%Ci", serializedString0.getValue());
      assertEquals(":%Ci", serializedString0.toString());
      assertEquals(4, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockFileOutputStream0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(101, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0.writeNumberField("ZZYi~h~", bigDecimal0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(101, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      uTF8JsonGenerator0._releaseBuffers();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(101, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 676, (ObjectCodec) null, pipedOutputStream0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(676, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      boolean boolean0 = pipedInputStream0.markSupported();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(boolean0);
      
      uTF8JsonGenerator0.writeNumber(301L);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(676, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      
      uTF8JsonGenerator0.writeRaw("EBm07[>&$G#[|");
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(18, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(676, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      
      uTF8JsonGenerator0.writeNull();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(23, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(676, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(":%Ci");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber(":%Ci");
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)58, (byte)37, (byte)67, (byte)105, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(8, byteArray0.length);
      
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler1);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 2);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(byteArrayBuilder0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      int int0 = (-364);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1114111, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-364), false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-364), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1114111, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -364
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Jd;bjCd4D9|pW", true);
      assertNotNull(mockFileOutputStream0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-5680), (ObjectCodec) null, mockFileOutputStream0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-5680), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber((double) (-5680));
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-5680), uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertNull(iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2680, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertNull(iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2680, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext2));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-28);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertTrue(iOContext3.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext3.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext3);
      assertNotSame(iOContext0, iOContext2);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext2, iOContext1);
      assertSame(iOContext2, iOContext3);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertNotSame(iOContext3, iOContext1);
      assertSame(iOContext3, iOContext2);
      assertNotSame(iOContext3, iOContext0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 224, (ObjectCodec) null, dataOutputStream0);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertTrue(iOContext3.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext3.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(224, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext0));
      
      uTF8JsonGenerator0.writeNumber(772L);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertTrue(iOContext3.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext3.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(224, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotSame(iOContext0, iOContext2);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext2, iOContext1);
      assertSame(iOContext2, iOContext3);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertNotSame(iOContext3, iOContext1);
      assertSame(iOContext3, iOContext2);
      assertNotSame(iOContext3, iOContext0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext0));
      
      byte[] byteArray1 = iOContext1.allocBase64Buffer();
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2000, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(iOContext0, iOContext2);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding0, jsonEncoding1);
      assertNotSame(iOContext1, iOContext2);
      assertNotSame(iOContext1, iOContext3);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding1));
      assertFalse(iOContext1.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext2.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext2.getEncoding());
      assertTrue(iOContext3.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext3.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(224, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotSame(iOContext0, iOContext2);
      assertNotSame(iOContext0, iOContext3);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext2, iOContext1);
      assertSame(iOContext2, iOContext3);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertNotSame(iOContext3, iOContext1);
      assertSame(iOContext3, iOContext2);
      assertNotSame(iOContext3, iOContext0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext0.equals((Object)iOContext3));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      assertFalse(iOContext3.equals((Object)iOContext1));
      assertFalse(iOContext3.equals((Object)iOContext0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-553), 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -553
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      System.setCurrentTimeMillis(2955L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 919);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 1692, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1692
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      System.setCurrentTimeMillis(2955L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 919);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1692, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1692, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(dataOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1351, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, (-1266), true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1351, uTF8JsonGenerator0.getFeatureMask());
      assertEquals((-1266), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":%Ci");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 695, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(695, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeNumberField("i", (-1130.2759148485));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)52, (byte)56, (byte)53, (byte)53, (byte)57, (byte)49, (byte)52, (byte)56}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      uTF8JsonGenerator0.writeNumber((long) 0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(14, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)48, (byte)56, (byte)53, (byte)32, (byte)57, (byte)49, (byte)52, (byte)56}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(8, byteArray0.length);
      
      try { 
        uTF8JsonGenerator0._writePPFieldName("T");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte) (-58));
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)95;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (byte)95, false);
      assertEquals(95, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(24, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      iOContext2.setEncoding(jsonEncoding1);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      char[] charArray0 = new char[2];
      char char0 = 'I';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3374, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(3374, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      String string0 = "UB";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("UB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = iOContext1.allocWriteEncodingBuffer(1);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(8000, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      SerializedString serializedString0 = new SerializedString("write a boolean value");
      assertEquals(21, serializedString0.charLength());
      assertEquals("write a boolean value", serializedString0.toString());
      assertEquals("write a boolean value", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals("", stringWriter0.toString());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(writerBasedJsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals("", stringWriter0.toString());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(filteringGeneratorDelegate0);
      
      ObjectCodec objectCodec0 = filteringGeneratorDelegate0.getCodec();
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals("", stringWriter0.toString());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(objectCodec0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      IOContext iOContext2 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.JsonFactory", true);
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext2);
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      
      ObjectCodec objectCodec1 = filteringGeneratorDelegate0.getCodec();
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals("", stringWriter0.toString());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(objectCodec1);
      assertNotSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(iOContext1, iOContext2);
      assertSame(iOContext1, iOContext0);
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext2));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)80;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 164, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 56319, false);
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(164, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(56319, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertArrayEquals(new byte[] {(byte)80, (byte)80, (byte)80, (byte)80, (byte)82, (byte)80}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(6, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRaw(';');
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(4, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertTrue(iOContext2.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext1);
      assertSame(iOContext2, iOContext0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertTrue(iOContext2.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(".+(Xl=9blQ0Ro0Bd", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      String string0 = ".+(Xl=9blQ0Ro0Bd";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(".+(Xl=9blQ0Ro0Bd", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      String string0 = "v";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("v", 1747);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":wCi");
      assertNotNull(mockFileOutputStream0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":wCi");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("Trying to call same allocXxx() method second time", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(".+(Xl=9blQ0Ro0Bd", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 240, (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 69, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)11, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(69, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)11}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1260);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      int int0 = 0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1729);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2048, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2048, false);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(2048, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2048, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte) (-55)}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-564), (ObjectCodec) null, dataOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext2.getEncoding());
      assertFalse(iOContext2.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext2);
      assertSame(iOContext0, iOContext2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(jsonEncoding1, jsonEncoding0);
      assertSame(iOContext2, iOContext0);
      assertSame(iOContext2, iOContext1);
      assertFalse(jsonEncoding1.equals((Object)jsonEncoding0));
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(5, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonEncoding0.equals((Object)jsonEncoding1));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SerializedString serializedString0 = new SerializedString("");
      assertEquals(1, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertEquals("", serializedString0.toString());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer((-1298));
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(8000, byteArray0.length);
      assertNotNull(byteArray0);
      assertSame(iOContext0, iOContext1);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2637);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 116, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1789, true);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1789, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(116, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = new SerializedString("");
      assertEquals("", serializedString0.toString());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1789, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(116, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals("", serializedString0.toString());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3374, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3374, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = new SerializedString("UB");
      assertEquals(2, serializedString0.charLength());
      assertEquals("UB", serializedString0.toString());
      assertEquals("UB", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-58);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-687), (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)95, false);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(95, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-687), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)10, (byte)95, (byte)123, (byte) (-58)}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = new SerializedString("write a boolean value");
      assertEquals("write a boolean value", serializedString0.toString());
      assertEquals(21, serializedString0.charLength());
      assertEquals("write a boolean value", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 105);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 2274, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", although was supposed to have one");
      assertFalse(boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 67, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(67, uTF8JsonGenerator0.getOutputBuffered());
      assertArrayEquals(new byte[] {(byte)12}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1260);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1729);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 53, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(53, uTF8JsonGenerator0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte) (-55)}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(dataOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4315, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 4332, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(4315, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(4332, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-127);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 3369, false);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(3369, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-28), (byte)91, (byte) (-127)}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(5, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 2);
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder1);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder1, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(mockPrintStream0);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder1);
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(dataOutputStream0);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder1.NO_BYTES, 1, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder1.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(byteArrayBuilder1.equals((Object)byteArrayBuilder0));
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('N');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      uTF8JsonGenerator0.writeRaw('m');
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(dataOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1351, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, (-1266), true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-1266), uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1351, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('N');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1266
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-3139), true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals("", stringWriter0.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(writerBasedJsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertNotNull(tokenFilter0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals("", stringWriter0.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(filteringGeneratorDelegate0);
      
      ObjectCodec objectCodec0 = filteringGeneratorDelegate0.getCodec();
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals("", stringWriter0.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(objectCodec0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((long) 2);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeRaw("' (for ");
      uTF8JsonGenerator0.writeNull();
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("z%R<=KCk", "start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((-367L));
      // Undeclared exception!
      try { 
        iOContext0.allocWriteEncodingBuffer();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 18, 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
