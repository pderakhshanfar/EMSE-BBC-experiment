* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.fasterxml.jackson.core.json.UTF8JsonGenerator
* Starting Client-0
* Connecting to master process on port 12911
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonCore-17/target/classes
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.core.json.UTF8JsonGenerator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2877
* Using seed 2404586680
* Starting evolution
* Initial Number of Goals in DynaMOSA = 783 / 2877
* Search finished after 306s and 57 generations, 43453 statements, best individual has fitness: 1468.0
* Minimizing test suite
[MASTER] 12:21:18.085 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 59%
* Total number of goals: 979
* Number of covered goals: 574
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 55%
* Total number of goals: 539
* Number of covered goals: 296
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 106
* Number of covered goals: 106
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 37%
* Total number of goals: 716
* Number of covered goals: 268
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 29%
* Total number of goals: 14
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 93%
* Total number of goals: 45
* Number of covered goals: 42
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 80%
* Total number of goals: 45
* Number of covered goals: 36
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 54%
* Total number of goals: 539
* Number of covered goals: 292
* Generated 295 tests with total length 4312
* Resulting test suite's coverage: 58% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 12:22:21.099 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8337% of time used, but only 9/295 tests minimized), falling back to using all assertions
[MASTER] 12:22:31.098 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 1%
* Compiling and checking tests
[MASTER] 12:23:24.602 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[MASTER] 12:23:24.605 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
assertNotNull(iOContext0);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);

ObjectCodec objectCodec0 = null;
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
assertNotNull(uTF8JsonGenerator0);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
assertFalse(uTF8JsonGenerator0.isClosed());
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

String string0 = "IGNORE_UNDEFINED";
uTF8JsonGenerator0._verifyPrettyValueWrite("IGNORE_UNDEFINED", 0);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
assertFalse(uTF8JsonGenerator0.isClosed());
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

int int0 = uTF8JsonGenerator0.getOutputBuffered();
assertEquals(0, int0);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
assertFalse(uTF8JsonGenerator0.isClosed());
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

int int1 = 0;
StringWriter stringWriter0 = new StringWriter(Integer.MAX_VALUE);

[MASTER] 12:23:26.056 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[MASTER] 12:23:26.059 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
assertNotNull(iOContext0);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);

ObjectCodec objectCodec0 = null;
OutputStream outputStream0 = null;
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
assertNotNull(uTF8JsonGenerator0);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertFalse(uTF8JsonGenerator0.isClosed());
assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

uTF8JsonGenerator0._verifyPrettyValueWrite("IGNORE_UNDEFINED", 0);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertFalse(uTF8JsonGenerator0.isClosed());
assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

int int0 = uTF8JsonGenerator0.getOutputBuffered();
assertEquals(0, int0);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertFalse(uTF8JsonGenerator0.isClosed());
assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

StringWriter stringWriter0 = new StringWriter(Integer.MAX_VALUE);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 8
* Writing tests to file
* Writing JUnit test case 'UTF8JsonGenerator_ESTest' to results/JacksonCore-17/com.fasterxml.jackson.core.json.UTF8JsonGenerator/default/tests/2
* Done!

* Computation finished
