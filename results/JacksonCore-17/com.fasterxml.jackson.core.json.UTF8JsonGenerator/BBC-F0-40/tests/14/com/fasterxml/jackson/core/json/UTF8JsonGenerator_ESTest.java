/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:09:35 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "";
      File file0 = MockFile.createTempFile("c:@>+Wqj", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder("c:@>+Wqj");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)73;
      byteArray0[0] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)73, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber("c:@>+Wqj");
      uTF8JsonGenerator0.writeStartObject();
      int int0 = 2;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[5];
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append(')');
      printStream0.flush();
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "M4wX+c";
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) filterOutputStream0;
      mockPrintStream0.format(locale0, "M4wX+c", objectArray0);
      filterOutputStream0.flush();
      uTF8JsonGenerator0.writeString("");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 12);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 7 bytes (out of 12)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "start an array");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("Failed to get Versione ut of ", "Failed to get Versione ut of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      byte[] byteArray0 = new byte[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      StringBuilder stringBuilder0 = new StringBuilder();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)73, false);
      uTF8JsonGenerator0.writeNumber("DujaR|oy@lz['=cbUn4");
      mockFile0.delete();
      SerializedString serializedString0 = new SerializedString("DujaR|oy@lz['=cbUn4");
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-95), (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)0, false);
      byteArrayOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      filterOutputStream0.flush();
      uTF8JsonGenerator0.writeString("bshTO/D#");
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1790));
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringBuilder stringBuilder0 = new StringBuilder("c:@>+Wqj");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI1);
      String string0 = "d1MwFkd_l@c-sd\"|2j";
      SerializedString serializedString0 = new SerializedString("");
      IOContext iOContext0 = new IOContext(bufferRecycler1, serializedString0, false);
      SerializedString serializedString1 = new SerializedString(",RwjfZRT2>'W[");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1339);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("~wJ", "~wJ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)101, (ObjectCodec) null, mockPrintStream0, byteArray0, 55, true);
      uTF8JsonGenerator0.writeRaw('\u008F');
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber((short) (-3));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext2.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeRaw('');
      uTF8JsonGenerator0.writeNumber((-217.3F));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2841);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)83;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 1802, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0, (byte)108);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringBuilder stringBuilder0 = new StringBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 6, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2757);
      boolean boolean0 = true;
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)6, (ObjectCodec) null, byteArrayOutputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1110);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1103 bytes (out of 1110)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringBuilder stringBuilder0 = new StringBuilder("c:@>+Wqj");
      byte[] byteArray0 = new byte[2];
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI1);
      SerializedString serializedString0 = new SerializedString("");
      IOContext iOContext0 = new IOContext(bufferRecycler1, serializedString0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 306, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("^yjbZlhO?hm_", "q4lGF|5abUdOa|{AWW");
      MockPrintStream mockPrintStream0 = new MockPrintStream("q4lGF|5abUdOa|{AWW");
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFile0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1007, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockPrintStream0, byteArray0, 776, true);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator1.writeRaw("q4lGF|5abUdOa|{AWW");
      uTF8JsonGenerator0.writeFieldName("");
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Failed to get Versioned out of ", "Failed to get Versioned out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[5];
      mockFile0.setReadable(false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 224;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 224, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.flush();
      char[] charArray0 = null;
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("Failed to get Versioned out of ");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      int int0 = 121;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 121, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)125, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("N/A");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 717.6843704345837;
      doubleArray0[2] = (double) 1;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      mockPrintStream0.flush();
      uTF8JsonGenerator0.writeString((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[6] = '\u0000';
      charArray0[4] = 'x';
      charArray0[6] = '6';
      charArray0[7] = '\u0080';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, byteArrayOutputStream0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)107;
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2);
      uTF8JsonGenerator0.writeNumber(2598L);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 54, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-326), 2);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
      char[] charArray0 = iOContext0.allocTokenBuffer(435);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 435, (ObjectCodec) null, byteArrayOutputStream1);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber(115);
      byteArrayOutputStream1.write(byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeString(charArray0, 97, 3302);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("Failed to get Versioned out of ", "Failed to get Versioned out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 270, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 4, true);
      mockFile0.getAbsolutePath();
      try { 
        uTF8JsonGenerator0.writeNumber(1689.350827);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4201), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, (int) (byte) (-24));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("Failed to get Versione ut of ", "Failed to get Versione ut of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      byte[] byteArray0 = new byte[5];
      StringBuilder stringBuilder0 = new StringBuilder();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)73, false);
      try { 
        uTF8JsonGenerator0.writeNumber("DujaR|oy@lz['=cbUn4");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte) (-5);
      byteArray0[8] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 646, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)115, false);
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = '!';
      charArray0[2] = 'g';
      charArray0[3] = 'Y';
      charArray0[4] = '2';
      charArray0[5] = 'b';
      charArray0[6] = '\\';
      charArray0[7] = 'k';
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1478, (int) (byte) (-5));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("^yjbZlhO?hm_", "^yjbZlhO?hm_");
      MockPrintStream mockPrintStream0 = new MockPrintStream("^yjbZlhO?hm_");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1517, (ObjectCodec) null, mockPrintStream0, byteArray0, 1067, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeEndArray();
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[5] = (byte) (-119);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 19, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      char[] charArray0 = iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-95), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeNumber(3302);
      byteArrayOutputStream0.write(byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3302, 1683);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4000
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.toString();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1457, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-14);
      byte byte0 = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1220));
      uTF8JsonGenerator0.writeNumber((long) 2);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)91, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-6), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-6));
      uTF8JsonGenerator0.writeNumber(938L);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[25];
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-326), 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber((long) 1);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("+&4>6 74=W_");
      uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-119));
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("~wJ", "~wJ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1400, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("Failed to get Versione ut of ", "Failed to get Versione ut of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      byte[] byteArray0 = new byte[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      StringBuilder stringBuilder0 = new StringBuilder();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)73, false);
      uTF8JsonGenerator0.writeNumber("DujaR|oy@lz['=cbUn4");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 57343;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 55296;
      doubleArray0[5] = (double) 3;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 3, 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-95);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      iOContext0.allocTokenBuffer(413);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 674, (ObjectCodec) null, byteArrayOutputStream0);
      Base64Variant base64Variant0 = null;
      String string0 = "P_\"@x]&f]1|PAgTk";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (-446), (-162));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader(")");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte) (-12);
      byteArray0[8] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 255, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeStartArray((-1143));
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("Failed to geh Versione ut of ", "Failed to geh Versione ut of ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-61);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Failed to geh Versione ut of ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 14, true);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte)47);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 41 bytes (out of 47)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[17];
      byteArray0[2] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-326), 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      char[] charArray0 = iOContext0.allocNameCopyBuffer(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)15, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)15, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 324);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 200
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "";
      File file0 = MockFile.createTempFile("c:@>+Wqj", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder("c:@>+Wqj");
      mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)73, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeRaw('*');
      uTF8JsonGenerator0.writeNumber("c:@>+Wqj");
      uTF8JsonGenerator0.writeStartObject();
      mockPrintStream0.print((double) 56320);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("yb,Iq4X1~J7I5tI_LS", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[25];
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-326), 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2815, true);
      try { 
        uTF8JsonGenerator0.writeNumber(1320);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[17];
      byteArray0[2] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-326), 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      iOContext0.allocNameCopyBuffer(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)15, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)15, false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 3);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("^yjbZlhO?hm_", "com.fasterxml.jackson.core.base.ParserBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream("^yjbZlhO?hm_");
      StringBuilder stringBuilder0 = new StringBuilder("^yjbZlhO?hm_");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1529, (ObjectCodec) null, mockPrintStream0, byteArray0, 1098, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("~wJ", "~wJ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1422, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((short)416);
      uTF8JsonGenerator0.writeString("@=$qb%F~?3w=");
      uTF8JsonGenerator0.writeNumber((short)32767);
      BigDecimal bigDecimal0 = new BigDecimal((int) (short)416);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((-1L));
      uTF8JsonGenerator0.writeString("~/%5uq");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber(1.0F);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      iOContext2.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeStartObject();
      String string0 = null;
      SerializedString serializedString0 = null;
      try {
        serializedString0 = new SerializedString((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Null String illegal for SerializedString
         //
         verifyException("com.fasterxml.jackson.core.io.SerializedString", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-326), 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)15, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)15, false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 69);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = "Failed to get Versioned out of ";
      MockFile mockFile0 = new MockFile("Failed to get Versioned out of ", "Failed to get Versioned out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[5];
      MockFile.createTempFile("Failed to get Versioned out of ", "Failed to get Versioned out of ");
      StringBuilder stringBuilder0 = new StringBuilder();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)102;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 224, true);
      boolean boolean1 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.flush();
      String string1 = "";
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeBinary(byteArray0, 2, (-1840));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Failed to get Versione ut of ", "Failed to get Versione ut of ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)6, (ObjectCodec) null, objectOutputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte)84);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 78 bytes (out of 84)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1697);
      byte[] byteArray0 = new byte[4];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 255);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      int int0 = 65;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65, (ObjectCodec) null, byteArrayOutputStream0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 6 bytes (out of 10)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "c:@>(W\\";
      File file0 = MockFile.createTempFile("c:@>(W", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 1005);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1005 bytes (out of 1005)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1098), (byte) (-87));
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      ObjectCodec objectCodec0 = null;
      iOContext0.allocTokenBuffer(2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-162), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1788);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1788 bytes (out of 1788)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("c:@>(W", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder(1);
      mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-723), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeRaw('%');
      uTF8JsonGenerator0.writeNumber("c:@>(W");
      uTF8JsonGenerator0.writeStartObject();
      mockPrintStream0.print((double) 56320);
      char[] charArray0 = new char[4];
      iOContext0.allocWriteEncodingBuffer();
      charArray0[1] = '%';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 36);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      String string0 = "-aS>9&e RT$s!8_:*";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-aS>9&e RT$s!8_:*", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      iOContext0.allocTokenBuffer((-328));
      short short0 = (short)24;
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 1;
      doubleArray0[3] = (double) 3;
      MockPrintStream mockPrintStream0 = new MockPrintStream("C9PWK]KzKLB:");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 1.0;
      objectArray0[1] = (Object) iOContext0;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) uTF8JsonGenerator0;
      objectArray0[4] = (Object) uTF8JsonGenerator0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "C9PWK]KzKLB:", objectArray0);
      printStream0.flush();
      uTF8JsonGenerator0.writeString("");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
      uTF8JsonGenerator0.writeNumber((short)306);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "QUOTE_NON_NUMERIC_NUMBERS";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "QUOTE_NON_NUMERIC_NUMBERS");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, 0);
      uTF8JsonGenerator0.writeNumber((long) 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("^yjbZlhO?hm_", "^yjbZlhO?hm_");
      MockPrintStream mockPrintStream0 = new MockPrintStream("^yjbZlhO?hm_");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 18, (ObjectCodec) null, mockPrintStream0, byteArray0, 589, false);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1778.2135757);
      doubleArray0[1] = (double) 55296;
      doubleArray0[2] = (double) 589;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 3;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, (-2127), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2127
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-95), (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)0, false);
      filterOutputStream0.flush();
      uTF8JsonGenerator0.writeString("bshTO/D#");
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1790));
      uTF8JsonGenerator0.writeNumber((short) (-737));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-326), 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 69);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      String string0 = "La8&Z64s";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1098), (byte) (-95));
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = iOContext0.allocTokenBuffer(413);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-162), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      mockPrintStream0.append(')');
      mockPrintStream0.flush();
      uTF8JsonGenerator0.writeString("La8&Z64s");
      uTF8JsonGenerator0.writeString(charArray0, 65, 1641);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", (-1098));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "Failed to get Versione ut of ";
      MockFile mockFile0 = new MockFile("Failed to get Versione ut of ", "Failed to get Versione ut of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)96;
      byteArray0[1] = (byte)7;
      byte[] byteArray1 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 3, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[2] = 's';
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("start an array", bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocTokenBuffer(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)0;
      iOContext0.releaseNameCopyBuffer((char[]) null);
      byteArray0[5] = (byte) (-88);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-338), (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-27), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("=Zp");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -27
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[25];
      byteArray0[21] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-326), 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.writeRawValue("Ns5E{`Y9(,*se%t");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 849, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 849
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("^yjbZlhO?hm_", "");
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)62;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2000, (ObjectCodec) null, pipedOutputStream0, byteArray0, 6, false);
      try { 
        uTF8JsonGenerator0.writeRaw('|');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("c:@>+Wqj", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder(1);
      mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-723), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeRaw('%');
      uTF8JsonGenerator0.writeNumber("c:@>+Wqj");
      uTF8JsonGenerator0.writeStartObject();
      mockPrintStream0.print((double) 56320);
      uTF8JsonGenerator0.writeEndObject();
      String string0 = "AN@r";
      SerializedString serializedString0 = new SerializedString("AN@r");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[17];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-326), 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-119);
      byteArray1[2] = (byte) (-119);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 3, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = "Failed to get Versioned out of ";
      MockFile mockFile0 = new MockFile("Failed to get Versioned out of ", "Failed to get Versioned out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)7, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[1] = 's';
      charArray0[3] = 's';
      charArray0[4] = 's';
      charArray0[5] = 's';
      charArray0[6] = '?';
      charArray0[7] = '\"';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)7, 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("Failed to get Versioned out of ", "com.fasterxml.jackson.core.io.IOContext");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockFile.createTempFile("}P_c[", "");
      StringBuilder stringBuilder0 = new StringBuilder();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1622), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 8, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("Failed to get Versioned out of ", "Failed to get Versioned out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)105;
      StringBuilder stringBuilder0 = new StringBuilder("Failed to get Versioned out of ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("n@CXN2L2YuUi]f]|oUr");
      byte byte0 = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1291, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 8, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1098), (byte) (-95));
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      iOContext0.allocTokenBuffer(413);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-162), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      mockPrintStream0.flush();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
      uTF8JsonGenerator0.writeNumberField("yNm(&Xy~^W1|V", bigDecimal2);
      try { 
        uTF8JsonGenerator0.writeFieldName("La8&Z64s");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)101;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)101;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[4] = (byte)101;
      byteArray1[5] = (byte)101;
      byteArray1[6] = (byte)101;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)101, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, (byte)101, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1126.0166F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Internal error on SymbolTable.rehash(): had ");
      File file0 = MockFile.createTempFile("start an array", "start an array");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "start an array");
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)101;
      byteArray0[6] = (byte)101;
      file0.setExecutable(true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getOutputTarget();
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0._maximumNonEscapedChar = 3;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      uTF8JsonGenerator0.writeNumberField("", 0.0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeBoolean(true);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 57343);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pushbackInputStream0, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "UTF-16BE";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16BE", false);
      byteArrayOutputStream0.write(192);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeBooleanField("FT|di", true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Internal error on SymbolTable.rehash(): had ");
      iOContext0.allocReadIOBuffer(42);
      File file0 = MockFile.createTempFile("start an array", "start an array");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "start an array");
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)101;
      file0.setExecutable(true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-119), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getOutputTarget();
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0._maximumNonEscapedChar = 3;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeBoolean(true);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 57343);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pushbackInputStream0, (int) (byte) (-119));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber(1973);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)15;
      byteArray0[1] = (byte)13;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte) (-6);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)53, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 53
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      String string0 = "La8&Z64s";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1098), (byte) (-95));
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      iOContext0.allocTokenBuffer(413);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      BigDecimal bigDecimal0 = new BigDecimal(540);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-1098), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("La8&Z64s");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1098
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.core.JsonGenerationException", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "com.fasterxml.jackson.core.JsonGenerationException");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)64;
      boolean boolean1 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream0, byteArray0, 515, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.JsonGenerationException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "^yjbZlhO?hm_");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("^yjbZlhO?hm_");
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2128), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(",.");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumberField("^yjbZlhO?hm_", bigDecimal0);
      uTF8JsonGenerator0.writeNumber(2865L);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-124));
      try { 
        uTF8JsonGenerator0.writeFieldName("write raw value");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("Failed to get Versionedkoutof ", "Failed to get Versionedkoutof ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Failed to get Versionedkout\\of /Failed to get Versionedkout\\of ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Failed to get Versionedkoutof ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 65535, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.flush();
      char[] charArray0 = null;
      int int0 = (-3366);
      // Undeclared exception!
      jsonGenerator0.writeFieldName("iJ;z<hKzTM/");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2430, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigDecimal bigDecimal0 = new BigDecimal(1023);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "^yjbZlhO?hm_");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("^yjbZlhO?hm_");
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2128), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(",.");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      String string0 = "";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", false, 'j', 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder();
      mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-723), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeRaw('\u008F');
      uTF8JsonGenerator0.writeObjectField("", "");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber("^yjbZlhO?hm_");
      uTF8JsonGenerator0.writeStartObject();
      mockPrintStream0.print((double) 56320);
      uTF8JsonGenerator0.writeEndObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.stripTrailingZeros();
      String string0 = null;
      try { 
        uTF8JsonGenerator0.writeNumberField((String) null, bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder();
      mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-723), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeRaw('\u008F');
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber("^yjbZlhO?hm_");
      uTF8JsonGenerator0.writeStartObject();
      mockPrintStream0.print((double) 56320);
      uTF8JsonGenerator0.writeEndObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.stripTrailingZeros();
      String string0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField((String) null, bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte)0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, false);
      iOContext0.allocTokenBuffer((int) (byte)0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-95);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-95);
      byteArrayOutputStream0.write(byteArray1);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber((long) 0);
      BigDecimal bigDecimal2 = new BigDecimal((int) (byte) (-95));
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0._flushBuffer();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1098), (byte) (-95));
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      iOContext0.allocTokenBuffer(413);
      String string0 = "L~~Sermw`";
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-95), (ObjectCodec) null, (OutputStream) null, byteArray0, 76, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("L~~Sermw`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.core.JsonGenerationException", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "com.fasterxml.jackson.core.JsonGenerationException");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      CharsToNameCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1267, (ObjectCodec) null, mockPrintStream0, byteArray0, 91, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte byte0 = (byte)101;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)101;
      byteArray0[1] = (byte)115;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 54, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 94, (ObjectCodec) null, mockPrintStream0, byteArray0, 99, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 's';
      uTF8JsonGenerator0.writeString(charArray0, 1, (-2002));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile(" y#?gS[&AO", "l");
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, " y#?gS[&AO", true);
      ObjectCodec objectCodec0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 6, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte) (-12), true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -12
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "";
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder();
      mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-723), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeRaw('|');
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber("^yjbZlhO?hm_");
      uTF8JsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = new BigDecimal(56320);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("wJ", " entries");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("Failed to get Versioned out of ", "Failed to get Versioned out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 65535, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      uTF8JsonGenerator0.writeString((char[]) null, (-3366), 116);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '|';
      charArray0[2] = ')';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 7, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 784, 415, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)80;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1547, (ObjectCodec) null, mockPrintStream0, byteArray0, 48, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(56319);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[2];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 12, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)115;
      doubleArray0[1] = (double) 57343;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 55296;
      doubleArray0[5] = (double) 55296;
      uTF8JsonGenerator0.writeArray(doubleArray0, (-1837), (-777));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "^yjbZlhO?hm_");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext1.withEncoding(jsonEncoding0);
      mockPrintStream0.append((CharSequence) stringBuilder0);
      StringReader stringReader0 = new StringReader("^yjbZlhO?hm_");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = '2';
      charArray0[1] = 'A';
      charArray0[3] = 'f';
      charArray0[4] = '+';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3524), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 17, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/^yjbZlhO?hm_0^yjbZlhO?hm_");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.setEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2292), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeFieldName("0;L Xt ;)I'R\"t}:");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-119);
      String string0 = "La8&Z64s";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 19, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      char[] charArray0 = iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StringReader stringReader0 = new StringReader(" -- suspect a DoS attack based on hash collisions");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(985);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte) (-119), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (byte)0, 1680, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 985, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-1), 1783);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      iOContext0.allocWriteEncodingBuffer(56319);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      int int0 = GeneratorBase.SURR2_FIRST;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      uTF8JsonGenerator0.writeString((char[]) null, (int) (byte)115, 8);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Failed to get Versioned out of ", "Failed to get Versioned out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byte byte0 = (byte)7;
      byteArray0[1] = (byte)7;
      byte[] byteArray1 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 3, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[2] = 's';
      uTF8JsonGenerator0.writeString(charArray0, 2, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-2735L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-95);
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-119);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 19, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      ObjectCodec objectCodec0 = null;
      iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-95), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "^yjbZlhO?hm_");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext1.withEncoding(jsonEncoding0);
      mockPrintStream0.append((CharSequence) stringBuilder0);
      StringReader stringReader0 = new StringReader("^yjbZlhO?hm_");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = '2';
      charArray0[2] = 'A';
      charArray0[3] = 'f';
      charArray0[4] = '+';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3524), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 17, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/^yjbZlhO?hm_0^yjbZlhO?hm_");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.setEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2292), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeFieldName("0;L Xt ;)I'R\"t}:");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-326), 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      SerializedString serializedString0 = new SerializedString("JAIB11k@2s+}p");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 69);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("^yjbZlhO?hm_", "com.fasterxml.jackson.core.base.ParserBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "com.fasterxml.jackson.core.base.ParserBase");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-113);
      mockPrintStream0.write(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-113);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1529, (ObjectCodec) null, mockPrintStream0, byteArray1, 1098, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 70, (ObjectCodec) null, mockPrintStream0, byteArray1, 55296, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayOutputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 60, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((short)22);
      uTF8JsonGenerator0.writeString("L~~Sermw`");
      uTF8JsonGenerator0.writeNumber((short)22);
      BigDecimal bigDecimal0 = new BigDecimal(57343);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.writeString("@=$qb%F~?3w=");
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("L~~Sermw`");
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a raw (unencoded) value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      char char0 = '>';
      charArray0[3] = '>';
      char char1 = 'c';
      charArray0[2] = 'c';
      char char2 = 'e';
      charArray0[0] = 'w';
      charArray0[4] = '<';
      uTF8JsonGenerator0.writeRaw('<');
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("%5hOHb", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(56319);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      int int0 = GeneratorBase.SURR2_FIRST;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 2, 2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1706);
      byte byte0 = (byte) (-125);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-125), 1706);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-232), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 127, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      byte[] byteArray0 = new byte[7];
      uTF8JsonGenerator0._entityBuffer = byteArray0;
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)25;
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber((-45));
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-119);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 19, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-95), (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)0, false);
      filterOutputStream0.flush();
      uTF8JsonGenerator0.writeString("bshTO/D#");
      uTF8JsonGenerator0.writeBinary(byteArray0, (-3585), (-3585));
      uTF8JsonGenerator0.writeNumber((short) (-737));
      uTF8JsonGenerator0.writeRaw('u');
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[2];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      iOContext0.allocWriteEncodingBuffer(2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 255, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("0123456789ABCDEF");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "0123456789ABCDEF";
      objectArray0[1] = (Object) iOContext0;
      PrintStream printStream0 = mockPrintStream0.format("write a number", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)42;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, printStream0, byteArray0, (byte) (-82), true);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-326), 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2240, true);
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 's';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 69, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Failed to get Versioned out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byte byte0 = (byte)7;
      byteArray0[1] = (byte)7;
      mockFileOutputStream0.close();
      byte[] byteArray1 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 3, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[2] = 's';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 34, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, filterOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-465), (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 3, false);
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0._flushBuffer();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-4250), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4250
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-25);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 43, 1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-95), (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)0, false);
      BigDecimal bigDecimal0 = new BigDecimal(1);
      uTF8JsonGenerator0.writeRaw("dxHN");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber("dxHN");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("Failed to get Versioned out of ", "Failed to get Versioned out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-124);
      byteArray0[4] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-461), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("^yjbZlhO?hm_");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)115;
      doubleArray0[1] = (double) 57343;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 55296;
      doubleArray0[5] = (double) 55296;
      uTF8JsonGenerator0.writeArray(doubleArray0, (-1837), (-777));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, mockPrintStream0, byteArray0, 255, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      iOContext0.allocNameCopyBuffer(929);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeStartObject();
      int int0 = 73;
      BigDecimal bigDecimal0 = new BigDecimal(73);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(36);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 28, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 102, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber((double) 56319);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      byte[] byteArray0 = new byte[7];
      uTF8JsonGenerator0._entityBuffer = byteArray0;
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)25;
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber((-45));
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString(" in a value");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName("com.fasterxml.jackson.core.JsonFactory$Feature");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-25);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 43, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      byte byte0 = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-68), (ObjectCodec) null, (OutputStream) null, byteArray0, 141, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16BE", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((short) (byte)56);
      uTF8JsonGenerator0._verifyPrettyValueWrite("yb,IqZ4X1~J7I5tI_LS", 0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      BigDecimal bigDecimal0 = new BigDecimal(3);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      uTF8JsonGenerator0._outputSurrogates(0, 57343);
      SerializedString serializedString0 = new SerializedString("yb,IqZ4X1~J7I5tI_LS");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)56;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (byte)56, 6000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, byteArrayOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)108;
      uTF8JsonGenerator0.writeNumber(0.0F);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)2;
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber(1973);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString(" in a value");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName(" in a value");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "^yjbZlhO?hm_");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)101;
      file0.setExecutable(true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)115, (ObjectCodec) null, mockPrintStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      file0.setReadable(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "com.fasterxml.jackson.core.JsonGenerationException";
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.core.JsonGenerationException", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "com.fasterxml.jackson.core.JsonGenerationException");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0);
      long[] longArray0 = new long[8];
      longArray0[0] = 557L;
      longArray0[1] = (-3280L);
      longArray0[2] = (long) 56319;
      longArray0[3] = (-1623L);
      longArray0[4] = (long) 56319;
      longArray0[5] = (long) 55296;
      longArray0[6] = (long) (byte)48;
      longArray0[7] = (long) 56319;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(longArray0, 3, (int) (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("^yjbZlhO?hm_", "com.fasterxml.jackson.core.base.ParserBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "com.fasterxml.jackson.core.base.ParserBase");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1529, (ObjectCodec) null, mockPrintStream0, byteArray0, 1098, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeRaw("");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)34, 1098);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringBuilder0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 127, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeFieldName("NY6(Q>e");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-32);
      iOContext0.allocTokenBuffer(262144);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)105;
      iOContext0.constructTextBuffer();
      byteArray0[3] = (byte)10;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3209, (ObjectCodec) null, (OutputStream) null, byteArray0, 128, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("^yjbZlhO?hm_", "com.fasterxml.jackson.core.base.ParserBase");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "com.fasterxml.jackson.core.base.ParserBase");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1529, (ObjectCodec) null, mockPrintStream0, byteArray0, 1098, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeRaw("");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte) (-119);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)0;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Rnk.2=", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1602), (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      String string0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, (byte) (-125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte byte0 = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-409), (byte)36);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      BigDecimal bigDecimal0 = new BigDecimal(18);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeStartObject();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      try { 
        uTF8JsonGenerator0.writeNumber("La8&Z64s");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1706);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-125), 1706);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-337), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("3em`cNR");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "^yjbZlhO?hm_");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)101;
      file0.setExecutable(true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)115, (ObjectCodec) null, mockPrintStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 57343);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pushbackInputStream0, (int) (byte)115);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      iOContext1.allocWriteEncodingBuffer(2);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)101;
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)115);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 27, false);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16BE", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)114);
      uTF8JsonGenerator0.writeRaw('o');
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber("Djaoy@l['=cbUn4");
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("UTF-16BE", "Djaoy@l['=cbUn4", false, 'o', 125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 16)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-119);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 19, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1891, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 87, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("La8&Z64s");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2361), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 56319;
      uTF8JsonGenerator0.writeArray(longArray0, 3, 0);
      uTF8JsonGenerator0.writeRaw("-'y.sBB64>8 `1)");
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber("-'y.sBB64>8 `1)");
      uTF8JsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = new BigDecimal((-2147483648L));
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16BE", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw('>');
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1300, (ObjectCodec) null, printStream0, byteArray0, 0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 343, (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 103, (-124));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-119);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 19, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-95), (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)0, false);
      BigDecimal bigDecimal0 = new BigDecimal(1);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber((long) (byte)48);
      uTF8JsonGenerator0._flushBuffer();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile.createTempFile("^yjbZlhO?hm_", "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      mockPrintStream0.append((CharSequence) "^yjbZlhO?hm_");
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-119);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      int int0 = 19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 19, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2014), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-964), false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2361), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 56319;
      uTF8JsonGenerator0.writeArray(longArray0, 3, 0);
      uTF8JsonGenerator0.writeRaw(')');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = '>';
      charArray0[2] = 'c';
      BigDecimal bigDecimal0 = new BigDecimal(1701);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 8, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((short) (-1525));
      uTF8JsonGenerator0.writeRaw('c');
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber("yb,IqZ4X1~J7I5tI_LS");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile.createTempFile("^yjbZlhO?hm_", "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      mockPrintStream0.append((CharSequence) "^yjbZlhO?hm_");
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)125;
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-124);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      Base64Variant base64Variant0 = null;
      SerializedString serializedString0 = new SerializedString("&<0//Pb(/!+<v3E");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2361), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)48;
      iOContext1.allocNameCopyBuffer(56320);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((long) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-326), 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-6), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-6), true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-119);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 19, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-95), (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)0, false);
      filterOutputStream0.flush();
      uTF8JsonGenerator0.writeString("bshTO/D#");
      uTF8JsonGenerator0.writeNumber((short) (-737));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-119);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 19, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-95), (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)0, false);
      BigDecimal bigDecimal0 = new BigDecimal(1);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber((long) (byte)48);
      BigDecimal bigDecimal2 = new BigDecimal((int) (byte) (-119));
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "efR!!Z";
      MockFile mockFile0 = new MockFile("efR!!Z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      iOContext0.allocBase64Buffer();
      PrintStream printStream0 = mockPrintStream0.printf("efR!!Z", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0);
      iOContext0.allocReadIOBuffer(55296);
      SerializedString serializedString0 = new SerializedString("efR!!Z");
      mockFile0.mkdir();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName("efR!!Z");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "^yjbZlhO?hm_";
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)101;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = (MockPrintStream)mockPrintStream1.append((CharSequence) stringBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 127, (ObjectCodec) null, mockPrintStream2, byteArray0, 2, true);
      uTF8JsonGenerator0.writeRaw('<');
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^yjbZlhO?hm_");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1958), (ObjectCodec) null, mockPrintStream0, byteArray0, 125, true);
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = 'e';
      charArray0[2] = '*';
      charArray0[3] = 'e';
      charArray0[4] = 'e';
      uTF8JsonGenerator0.writeRaw(charArray0, 125, (-1));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16BE", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeRaw('w');
      SerializedString serializedString0 = new SerializedString("5[");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16BE", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((short) (-1161));
      uTF8JsonGenerator0.writeString("@=$qb%F~?3w=");
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'L';
      charArray0[2] = 'c';
      charArray0[0] = 'e';
      charArray0[4] = '<';
      uTF8JsonGenerator0.writeRaw('<');
      SerializedString serializedString0 = new SerializedString("^yjbZlhO?hm_");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = new SerializedString("+~?<0^*l<W6i=j{6");
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, serializedString0, true);
      byte[] byteArray0 = new byte[6];
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      mockPrintStream0.append((CharSequence) "+~?<0^*l<W6i=j{6");
      Object object1 = new Object();
      IOContext iOContext3 = new IOContext(bufferRecycler0, object1, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 32767, (ObjectCodec) null, (OutputStream) null, byteArray0, 35, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)0;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      IOContext iOContext2 = new IOContext(bufferRecycler1, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw("ruq_~pP8!%,`");
      uTF8JsonGenerator0.writeNumber("go'@i}h");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0._verifyValueWrite("go'@i}h");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not go'@i}h, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'L';
      charArray0[2] = 'c';
      charArray0[0] = 'e';
      charArray0[4] = '<';
      uTF8JsonGenerator0.writeRaw('<');
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((float) 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)37;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-125);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)37, (-1487));
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream1, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray1 = iOContext1.allocWriteEncodingBuffer(13);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, byteArrayOutputStream1, byteArray1, 1876, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.writeRaw('V');
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)91;
      byteArray0[0] = (byte)91;
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBoolean(false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)91;
      int int0 = (-2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null, (int) (byte)102, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)101;
      byteArray0[1] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      uTF8JsonGenerator0.writeRaw(charArray0, 3, 0);
      char[] charArray1 = new char[6];
      charArray1[0] = 'w';
      charArray1[1] = 'L';
      charArray1[2] = 'c';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("!(SltWvl?n,");
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 54, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringBuilder0;
      objectArray0[1] = (Object) iOContext0;
      objectArray0[2] = (Object) "^yjbZlhO?hm_";
      objectArray0[3] = (Object) (byte)115;
      PrintStream printStream1 = printStream0.format("", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, printStream1);
      uTF8JsonGenerator0.close();
      StringWriter stringWriter0 = new StringWriter(44);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-124), (ObjectCodec) null, stringWriter1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2361), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      long[] longArray0 = new long[1];
      mockFileOutputStream0.close();
      longArray0[0] = (long) 56319;
      uTF8JsonGenerator0.writeArray(longArray0, 3, 0);
      uTF8JsonGenerator0.writeRaw("-'y.sBB64>8 `1)");
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 455, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = new SerializedString("-'y.sBB64>8 `1)");
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      IOContext iOContext3 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext4, (-2361), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55296, true);
      char char0 = '`';
      try { 
        uTF8JsonGenerator2.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      String string0 = "UTF-16BE";
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false, "UTF-16BE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (-348));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-348), (ObjectCodec) null, printStream0, byteArray0, 1, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2361), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)48;
      iOContext1.allocNameCopyBuffer(56320);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-5157), 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)37;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-125);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)37, (-1487));
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream1, false);
      iOContext1.allocWriteEncodingBuffer(13);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-346), (ObjectCodec) null, byteArrayOutputStream1, byteArray0, (-1859), false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 16, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)37;
      byteArray1[1] = (byte) (-125);
      byteArray1[2] = (byte) (-125);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._writeBinary((Base64Variant) null, byteArray1, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 79, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '`';
      charArray0[2] = '/';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = new SerializedString("+~?<0^*l<W6i=j{6");
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, serializedString0, false);
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-4427), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator1.writeRaw('a');
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator1.writeStartObject();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-119);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 19, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-95), (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)0, false);
      BigDecimal bigDecimal0 = new BigDecimal(1);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber((long) (byte)48);
      uTF8JsonGenerator0._flushBuffer();
      SerializedString serializedString0 = new SerializedString("{|(p_35)B~wj>Ku2");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte) (-119);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-119), (-1487));
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-346), (ObjectCodec) null, byteArrayOutputStream1, byteArray0, (-1859), false);
      uTF8JsonGenerator0.writeRaw("", (int) (byte)0, (-3));
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 16, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeUTF8String(byteArray0, (byte)0, (-119));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = new SerializedString("+~?<0^*l<W6i=j{6");
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, serializedString0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((-1142.5433F));
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 108, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2361), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 56319;
      uTF8JsonGenerator0.writeArray(longArray0, 3, 0);
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.close();
      IOContext iOContext2 = new IOContext(bufferRecycler0, "-'y.sBB64>8 `1)", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 512, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      StringBuilder stringBuilder1 = stringBuilder0.deleteCharAt(1);
      mockPrintStream1.append((CharSequence) stringBuilder1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 100, (ObjectCodec) null, mockPrintStream1, byteArray0, 17, true);
      BigDecimal bigDecimal0 = new BigDecimal(3);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) 3);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)0;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      IOContext iOContext2 = new IOContext(bufferRecycler1, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw("ruq_~pP8!%,`");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-648), (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator1.writeNumber((BigInteger) null);
      uTF8JsonGenerator1.writeNumber((-2681.8425F));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2371), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 56319;
      uTF8JsonGenerator0.writeArray(longArray0, 3, 0);
      uTF8JsonGenerator0.writeRaw("-'y.sBB64>8 `1)");
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = new SerializedString("-'y.sBB64>8 `1)");
      uTF8JsonGenerator1.getOutputTarget();
      uTF8JsonGenerator1.writeStartObject((Object) iOContext2);
      uTF8JsonGenerator0.writeString("");
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 65535, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-119);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 19, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      char[] charArray0 = WriterBasedJsonGenerator.HEX_CHARS;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-95), (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)0, false);
      BigDecimal bigDecimal0 = new BigDecimal(1);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byte byte0 = (byte)101;
      byteArray0[1] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'L';
      charArray0[2] = 'c';
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "^yjbZlhO?hm_");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)101;
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringBuilder0, true);
      StringReader stringReader0 = new StringReader("^yjbZlhO?hm_");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      JsonParserSequence.createFlattened(jsonParser0, jsonParser0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)101, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = '*';
      uTF8JsonGenerator0.writeRaw(charArray0, (-2), (-3693));
      uTF8JsonGenerator0.writeNumber((double) (-3693));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)0;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-25);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 2251, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      StringBuilder stringBuilder1 = stringBuilder0.deleteCharAt(1);
      mockPrintStream1.append((CharSequence) stringBuilder1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)0;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 45, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeNumber((int) (byte)0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      StringBuilder stringBuilder1 = stringBuilder0.deleteCharAt(1);
      mockPrintStream1.append((CharSequence) stringBuilder1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 100, (ObjectCodec) null, mockPrintStream1, byteArray0, 17, true);
      BigDecimal bigDecimal0 = new BigDecimal(3);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("^yjbZlhO?hm_");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (-348));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.append((CharSequence) "");
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 98, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 242, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = new SerializedString("+~?<0^*l<W6i=j{6");
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, serializedString0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 56319, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 4441, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      String string0 = "UTF-16BE";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16BE", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)79;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-621), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-2058), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('{');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2058
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'L';
      charArray0[2] = 'c';
      charArray0[0] = 'e';
      charArray0[4] = '<';
      uTF8JsonGenerator0.writeRaw('<');
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'L';
      charArray0[2] = 'c';
      uTF8JsonGenerator0.writeRaw('w');
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) 56319);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = new SerializedString("+~?<0^*l<W6i=j{6");
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, serializedString0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-104);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 256, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)9, true);
      uTF8JsonGenerator0.writeRaw('e');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._writePPFieldName("+~?<0^*l<W6i=j{6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)115;
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'L';
      charArray0[2] = 'c';
      charArray0[3] = 'e';
      charArray0[4] = '<';
      int int0 = (-3528);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((int) (byte)115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)91, 0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 508, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      Object object0 = new Object();
      uTF8JsonGenerator0.writeStartObject((Object) fileDescriptor0);
      try { 
        uTF8JsonGenerator0.writeString("|Ny");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'L';
      charArray0[2] = 'c';
      charArray0[3] = 'e';
      charArray0[4] = '<';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, printStream0, byteArray0, (-1201), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("Qm");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1201
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)0;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-25);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-25), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 56322, false);
      BigDecimal bigDecimal0 = new BigDecimal((-1281));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16BE", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("yb,IqZ4X1~J7I5tI_LS", 0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      BigDecimal bigDecimal0 = new BigDecimal((-279));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0._outputSurrogates(0, 57343);
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (-348));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Can not write a field name, expecting a value");
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-348), (ObjectCodec) null, printStream0, byteArray0, 1, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-824), (ObjectCodec) null, printStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRawValue("", 3, 224);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      SerializedString serializedString0 = new SerializedString("K~7[+/r,)>");
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      iOContext0.withEncoding(jsonEncoding0);
      Object object1 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 8000, (ObjectCodec) null, mockPrintStream0, byteArray0, (-896), false);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 2046, (-896));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1959.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -896
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("HJ9E");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[2] = '\u0000';
      stringReader0.ready();
      CharBuffer charBuffer0 = CharBuffer.allocate(1694);
      stringReader0.read(charBuffer0);
      charArray0[3] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-2058), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WRITE_NUMBERS_AS_STRINGS", true);
      byte[] byteArray0 = new byte[0];
      int int0 = 1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 46, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      BigDecimal bigDecimal0 = new BigDecimal(56319);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      SerializedString serializedString0 = new SerializedString("K~7[+/r,)>");
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      iOContext1.constructTextBuffer();
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeStartArray();
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0, true);
      ObjectCodec objectCodec0 = null;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 3;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 40, 2347);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "";
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'L';
      charArray0[2] = 'c';
      charArray0[3] = 'e';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "L\"", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) filterOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "L\"";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("L\"", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1402), (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%LD65`4");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 20, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      Object object1 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2462, (ObjectCodec) null, (OutputStream) null, byteArray0, 290, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('e');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2371), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 56319;
      uTF8JsonGenerator0.writeArray(longArray0, 3, 0);
      uTF8JsonGenerator0.writeRaw("-'y.sBB64>8 `1)");
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 455, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = new SerializedString("-'y.sBB64>8 `1)");
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      IOContext iOContext3 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext4, (-2371), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55296, true);
      uTF8JsonGenerator2.writeStartArray();
      uTF8JsonGenerator0.writeRaw('`');
      uTF8JsonGenerator2.writeNumber((double) 0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (-1963));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext3 = new IOContext(bufferRecycler0, "8[HB^tRa", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext4 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext4, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.getCurrentValue();
      Object object1 = new Object();
      uTF8JsonGenerator0.writeStartObject((Object) byteArrayInputStream0);
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)123, 201);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "HJ9E";
      StringReader stringReader0 = new StringReader("HJ9E");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[2] = '\u0000';
      charArray0[3] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-2058), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 46, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)101;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream0, byteArray0, 102, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-119), (-1487));
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-346), (ObjectCodec) null, byteArrayOutputStream1, byteArray0, (-1859), false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 16, false);
      uTF8JsonGenerator1.writeRaw('`');
      try { 
        uTF8JsonGenerator1.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (-348));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-348), (ObjectCodec) null, printStream0, byteArray0, 1, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-824), (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1706);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-125), 1706);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      BigDecimal bigDecimal0 = new BigDecimal(1507);
      bigDecimal0.stripTrailingZeros();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1507, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((-2757L));
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      boolean boolean0 = false;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-63);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 3690, (ObjectCodec) null, (OutputStream) null, byteArray0, (-1), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte) (-63));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[2];
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = new SerializedString("+~?<0^*l<W6i=j{6");
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, serializedString0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 32, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2328, false);
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRaw('=');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2361), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 56319;
      uTF8JsonGenerator0.writeArray(longArray0, 3, 0);
      uTF8JsonGenerator0.writeRaw("-'y.sBB64>8 `1)");
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 455, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = new SerializedString("-'y.sBB64>8 `1)");
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      IOContext iOContext3 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext4, (-2361), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55296, true);
      uTF8JsonGenerator2.writeNull();
      uTF8JsonGenerator0.writeRaw('`');
      uTF8JsonGenerator2.writeNumber((double) 0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2361), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler2, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 5629, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRawUTF8String(byteArray0, 56319, 56319);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Failed to get Versioned out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)7;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-124);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 3, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 'D';
      charArray0[2] = 'L';
      uTF8JsonGenerator0.writeString(charArray0, 34, 0);
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)7, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-2735L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16BE", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-824), 13);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.append((CharSequence) "UTF-16BE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-824), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 512, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(9223372036854775807L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("Db9^", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)126;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 13, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.allocNameCopyBuffer((-706));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      iOContext1.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 828, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("HJ9E");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = 'J';
      charArray0[2] = 'V';
      charArray0[3] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-2058), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 46, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)91;
      byteArray0[0] = (byte)91;
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1007, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((short)17);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("A~XEC'ujb]A0__*F\"*", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      Object object0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2498), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3549, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)115);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Failed to get Versioned out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)7;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-124);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 3, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 'D';
      charArray0[2] = 'L';
      uTF8JsonGenerator0.writeString(charArray0, 34, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-2735L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[17];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-348), 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      byteArrayOutputStream0.write(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.writeStartArray();
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1706);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-125), 1706);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)32, (byte)32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)91;
      byteArray0[0] = (byte)91;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBoolean(true);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)91;
      byteArray1[2] = (byte)91;
      byte byte1 = (byte) (-102);
      byteArray1[3] = (byte) (-102);
      byteArray1[4] = (byte)91;
      byteArray1[5] = (byte)91;
      BigInteger bigInteger0 = BigInteger.valueOf((byte)91);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2361), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 56319;
      uTF8JsonGenerator0.writeArray(longArray0, 3, 0);
      uTF8JsonGenerator0.writeRaw("-'y.sBB64>8 `1)");
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 455, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = new SerializedString("-'y.sBB64>8 `1)");
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      IOContext iOContext3 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext4, (-2361), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55296, true);
      uTF8JsonGenerator0.writeRaw('`');
      uTF8JsonGenerator2.writeNumber((double) 0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-34);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumberField("^B:dRXq`5})m|Xb", 0L);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-29);
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte) (-29);
      byteArray1[4] = (byte) (-29);
      mockPrintStream0.print(false);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte) (-64), (ObjectCodec) null, mockPrintStream0, byteArray1, 1327, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte byte0 = (byte) (-119);
      byte byte1 = (byte)0;
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 548, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumberField("3;=-", 0L);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1697, (ObjectCodec) null, (OutputStream) null, byteArray0, (-4067), true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-103);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2023), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2937), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-883.052F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2937
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, printStream0, byteArray0, 17, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      BigDecimal bigDecimal0 = new BigDecimal(135);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16BE", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3963, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-25);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-803), (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 2251, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeString("EJKE9");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "-'y.sBB64>8 `1)";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2361), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 56319;
      uTF8JsonGenerator0.writeArray(longArray0, 3, 0);
      uTF8JsonGenerator0.writeRaw("-'y.sBB64>8 `1)");
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 455, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = new SerializedString("-'y.sBB64>8 `1)");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator1.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRawUTF8String(byteArray0, 101, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "w-<", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)91;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      char[] charArray0 = new char[1];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      uTF8JsonGenerator0.configure(jsonGenerator_Feature0, true);
      charArray0[0] = '*';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 8, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "La8&Z64s", false);
      iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-95), (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeString("bshTO/D#");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBoolean(true);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)91;
      byteArray1[2] = (byte)91;
      byteArray1[3] = (byte) (-102);
      byteArray1[4] = (byte)91;
      byteArray1[5] = (byte)91;
      byteArray1[6] = (byte)91;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-449), (ObjectCodec) null, (OutputStream) null, byteArray1, (byte)91, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 5, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("Failed to get Versioned out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-461), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte) (-124), 248);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-16), (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[1] = '<';
      charArray0[2] = '*';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      iOContext0.allocBase64Buffer();
      charArray0[6] = '*';
      charArray0[7] = '<';
      charArray0[8] = '*';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2247, 822);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2247
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "w-<", false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1887), (byte)91);
      boolean boolean1 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1706);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-125), 1706);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-362), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1706, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 65535, (-1404));
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1404), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getCurrentValue();
      Object object0 = new Object();
      uTF8JsonGenerator0.writeStartObject(object0);
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 48, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16BE", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-824), 13);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "UTF-16BE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4, (ObjectCodec) null, printStream0, byteArray0, 3, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber((long) 13);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)49, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator1.flush();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1706);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-125), 1706);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-362), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("3em`cNR");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      iOContext0.releaseNameCopyBuffer((char[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-27);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw((char[]) null, 128, (-1029));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "n)[N", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber(3611);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      iOContext0.withEncoding(jsonEncoding1);
      iOContext0.releaseNameCopyBuffer((char[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)91, false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 2219, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("^yjbZlhO?hm_", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "^yjbZlhO?hm_");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1833, (ObjectCodec) null, printStream0, byteArray0, 17, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'L';
      charArray0[2] = 'c';
      charArray0[3] = 'e';
      charArray0[4] = '<';
      charArray0[5] = 'I';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2046, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2046
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 983, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((short)17);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("A~XEC'ujb]A0__*F\"*", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16BE", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3963, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
      uTF8JsonGenerator0._verifyPrettyValueWrite("^g^", (byte)0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 12000, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 32768, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2083, (ObjectCodec) null, (OutputStream) null, byteArray0, 147, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-3L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-119), (-1487));
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 897, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber((long) 1);
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-119), (-1487));
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-119), (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 16, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2078, 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3611, (ObjectCodec) null, (OutputStream) null, byteArray0, 110, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-119), (-1487));
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-119), (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 16, false);
      uTF8JsonGenerator0.getCurrentValue();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)48;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 115, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 83, false);
      String string0 = "O4(7D~x>_UCG76ZZ|+";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("O4(7D~x>_UCG76ZZ|+");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16BE", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("yb,IqZ4X1~J7I5tI_LS", 0);
      BigDecimal bigDecimal0 = new BigDecimal((-279));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      uTF8JsonGenerator0.writeNumber((-180L));
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2083, (ObjectCodec) null, (OutputStream) null, byteArray0, 147, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 4986, (-949));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile((String) null, "O`");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('9');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2161, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigDecimal bigDecimal0 = new BigDecimal(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 64, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((-2124L));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-22), (byte)61);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-27);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte) (-65);
      byteArray1[4] = (byte)0;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "}%V+E>V=R[>Q#-", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = '';
      charArray0[2] = 'B';
      charArray0[3] = 'T';
      charArray0[4] = 'Z';
      charArray0[5] = '\"';
      charArray0[6] = 'G';
      charArray0[7] = '5';
      charArray0[8] = '2';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, (int) (byte) (-27));
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-119), (-1487));
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-119), (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 16, false);
      uTF8JsonGenerator0.getCurrentValue();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject((Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 915, (ObjectCodec) null, filterOutputStream0, byteArray0, 1597, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)115;
      byteArray0[1] = (byte)115;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocTokenBuffer((int) (byte)115);
      iOContext0.releaseNameCopyBuffer((char[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeFieldName("=Zp");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal((int) (byte)115);
      BigDecimal bigDecimal2 = bigDecimal0.add(bigDecimal1);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      BigDecimal bigDecimal3 = new BigDecimal(2);
      bigDecimal0.add(bigDecimal2);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)115;
      byteArray1[1] = (byte) (-47);
      byteArray1[2] = (byte)115;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)115;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 591, (ObjectCodec) null, (OutputStream) null, byteArray1, 1865, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-471);
      iOContext0.allocTokenBuffer((-471));
      iOContext0.releaseNameCopyBuffer((char[]) null);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal((-471));
      bigDecimal0.add(bigDecimal1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2806), (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-1525));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-112);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 117, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      uTF8JsonGenerator0.flush();
      int int0 = 989;
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-112);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 117, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      uTF8JsonGenerator0.flush();
      try { 
        uTF8JsonGenerator0._outputSurrogates(989, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x3dd, second 0x3
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[.S'f4,p<f+h$", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)92;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0._verifyValueWrite("2ku+1GW3Jh<{2<vwe");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)0;
      iOContext0.releaseNameCopyBuffer((char[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-361), (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-27), false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -27
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 337, (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 103, (-124));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "-'y.sBB64>8 `1)";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2361), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 56319;
      uTF8JsonGenerator0.writeArray(longArray0, 3, 0);
      uTF8JsonGenerator0.writeRaw("-'y.sBB64>8 `1)");
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 455, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRawUTF8String(byteArray0, 101, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocTokenBuffer(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)127;
      iOContext0.releaseNameCopyBuffer((char[]) null);
      byteArray0[5] = (byte) (-88);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-361), (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-27), false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(64);
      bigDecimal0.add(bigDecimal1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -27
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 8, (byte)61);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte) (-65);
      byteArray1[4] = (byte)0;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "}%V+E>V=R[>Q#-", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = '';
      charArray0[2] = 'B';
      charArray0[3] = 'T';
      charArray0[4] = 'Z';
      charArray0[5] = '\"';
      charArray0[6] = 'G';
      charArray0[7] = '5';
      charArray0[8] = '2';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2361), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)92;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, (OutputStream) null, byteArray0, 3085, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1452, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[.S'f4,p<f+h$", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 19, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)115;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocTokenBuffer((int) (byte)115);
      iOContext0.releaseNameCopyBuffer((char[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeFieldName("=Zp");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal((int) (byte)115);
      bigDecimal0.add(bigDecimal1);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((long) 64);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 844, (ObjectCodec) null, (OutputStream) null, byteArray0, (-3227), true);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 8, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((short) (-1525));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("yb,IqZ4X1~J7I5tI_LS", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, (OutputStream) null, byteArray0, (-2931), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-65);
      byte byte0 = (byte) (-125);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "La8&Z64s");
      byteArray0[7] = (byte)72;
      byteArray0[8] = (byte)0;
      int int0 = 8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 8, (byte)72);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)72;
      byteArray1[3] = (byte) (-65);
      byteArray1[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, (byte) (-65), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("write a null");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -65
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-32);
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 685, 8);
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2017, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2600, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-530), 324);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, (OutputStream) null, byteArray0, 14, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2017), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((short)6000);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 987);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[.S'f4,p<f+h$", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)92;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 237, (ObjectCodec) null, (OutputStream) null, byteArray0, 108, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'y.sBB64>8 `1)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2361), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)33;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-696), (byte)33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      charsToNameCanonicalizer0.release();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      String string1 = "0h";
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 2;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(longArray0, 128, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-123);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-32), (byte)0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
      StringReader stringReader0 = new StringReader("\"~-y'");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1093), (ObjectCodec) null, filterOutputStream0, byteArray0, (-3232), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, (byte[]) null, (-3583), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)72;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 8, (byte)72);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)72;
      byteArray1[3] = (byte) (-65);
      byteArray1[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, (byte) (-65), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 500, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -65
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      int int0 = 127;
      String string0 = "~v";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~v", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocTokenBuffer(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)0;
      iOContext0.releaseNameCopyBuffer((char[]) null);
      byteArray0[5] = (byte) (-88);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-361), (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-27), false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("=Zp");
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 952);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5433), (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 1908, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }
}
