/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:21:53 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("KUza+;i");
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[25];
      byteArray0[9] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-102), false);
      uTF8JsonGenerator0.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((-9223372036854775808L));
      uTF8JsonGenerator0.writeFieldName("1@zC4");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((float) (byte)56);
      uTF8JsonGenerator0.writeNumber(2381);
      uTF8JsonGenerator0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocWriteEncodingBuffer(0);
      ObjectCodec objectCodec0 = null;
      String string0 = "*2<W-rt96+Q6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 39, (ObjectCodec) null, mockPrintStream0, byteArray0, 39, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("g4%X");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("KUza+;i");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[1] = (byte)55;
      int int0 = 6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 6, false);
      uTF8JsonGenerator0.writeStartObject();
      String string0 = "zr&7(y;ic_AFQ";
      SerializedString serializedString0 = new SerializedString("KUza+;i");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 57343, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "*2<W-rt96+Q6", true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 46, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeFieldName("S@sdy");
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 52);
      uTF8JsonGenerator0.writeRaw("HTxp", 3, 0);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2JW-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 101, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(" of 4-char base64 unit: can only used between units");
      defaultPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 90, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-112);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 65599, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      int int0 = 26;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 102, (-417));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<{-rt96+Q6");
      byte byte0 = (byte) (-102);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-102);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((String) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, filterOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-2584), (ObjectCodec) null, filterOutputStream0, byteArray0, 248, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber(1743);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-290), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 5223);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.flush();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      int int0 = GeneratorBase.SURR1_LAST;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "*2<W-rt96+Q6", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-103);
      byteArray0[8] = (byte)111;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-290), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeString("v'5<zK\u0004VI|&");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 57343, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)17;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-965), (ObjectCodec) null, mockPrintStream0, byteArray0, 130, false);
      uTF8JsonGenerator0.close();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      uTF8JsonGenerator0.writeString("");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte)17, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeNumber(5);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)11;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("`uUo");
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.flush();
      SerializedString serializedString0 = new SerializedString("*2<W-rt96+Q6");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-23), (ObjectCodec) null, mockPrintStream0, byteArray0, 2019, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a string");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)13, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((int) (byte)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "\u0004dN2h3-/As0~", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*2<W-rt96+Q6");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("\u0004dN2h3-/As0~");
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.flush();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.allocWriteEncodingBuffer(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-102), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = 'S';
      charArray0[5] = '{';
      SerializedString serializedString0 = new SerializedString("*2<W-rt96+Q6");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 52, (ObjectCodec) null, (OutputStream) null, byteArray0, 102, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      jsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 26, 2);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeNumber(3168);
      uTF8JsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Current context not an object but ", "Current context not an object but ", true, '^', 56320);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 34)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 52, (ObjectCodec) null, (OutputStream) null, byteArray0, 102, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 26, 2);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeNumber(3168);
      jsonGenerator0.writeFieldName("t_4h(Id+t].R(kUr");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 12, (ObjectCodec) null, mockPrintStream0, byteArray0, 3859, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeObject("");
      String string0 = "B;K9\\!=^;R]";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Can not write a field name, expecting a value", "B;K9!=^;R]", true, ':', 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 10)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2JW-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)14;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5507, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString0 = new SerializedString("*2JW-rt96+Q6");
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 4, (int) (byte)14);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("KUza+;i");
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-102), false);
      uTF8JsonGenerator0.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeString("KUza+;i");
      uTF8JsonGenerator0.writeString("v'5<zK\u0004VI|&");
      uTF8JsonGenerator0._flushBuffer();
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = 'z';
      charArray0[2] = '9';
      charArray0[3] = 'H';
      charArray0[4] = 'J';
      charArray0[5] = '1';
      uTF8JsonGenerator0.writeString(charArray0, (-2123), (-1054));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "*2<W-rt96+Q6", true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 46, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeRaw("S@sdy");
      uTF8JsonGenerator0.writeFieldName("S@sdy");
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 48);
      uTF8JsonGenerator0.writeRaw("HTxp", 3, 0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.allocWriteEncodingBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(593);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, mockPrintStream0, byteArray0, 1837, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName(")mU6o0y,RqBBKj&;TP");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-290), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 5223);
      uTF8JsonGenerator0.writeFieldName("&,I\"AOC");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 23, 2049);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeFieldName("*2<W-rt96+Q6");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-34), (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = 'X';
      charArray0[2] = 'L';
      charArray0[3] = 'z';
      charArray0[4] = '\\';
      charArray0[5] = 'U';
      charArray0[6] = 'W';
      int int0 = (-3059);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 4043, (-3059));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      String string0 = "k'Y|a#]F8v\\}I;%";
      MockPrintStream mockPrintStream0 = new MockPrintStream("k'Y|a#]F8v}I;%");
      MockPrintStream mockPrintStream1 = new MockPrintStream("k'Y|a#]F8v}I;%");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2047, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber("vm");
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'q';
      SerializedString serializedString0 = new SerializedString("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*2<W-rt96+Q6");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray1 = new byte[2];
      IOContext iOContext2 = new IOContext(bufferRecycler0, evoSuiteFile0, true);
      iOContext1.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-102), (ObjectCodec) null, mockPrintStream0, byteArray1, 2, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext3 = new IOContext(bufferRecycler0, object0, true);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockPrintStream2, byteArray1, (byte) (-102), false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "write a string";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)11;
      byteArray0[1] = (byte)11;
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, false);
      iOContext2.allocConcatBuffer();
      iOContext2.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2659, (ObjectCodec) null, mockPrintStream0, byteArray0, 8, false);
      String string1 = "";
      uTF8JsonGenerator0.writeNumber("n");
      char char0 = 'b';
      SerializedString serializedString0 = new SerializedString("write a string");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte byte0 = (byte) (-102);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2528, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1839), false);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-102), false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber((double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -102
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("KUza+;i");
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-102), false);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-875), (ObjectCodec) null, mockPrintStream0, byteArray0, (-2328), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2328
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2JW-rt96+Q6");
      byte byte0 = (byte)11;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 102, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-290), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 73, 5223);
      uTF8JsonGenerator0.writeFieldName("&,I\"AOC");
      try { 
        uTF8JsonGenerator0.writeFieldName("LC]~o#-J<");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2JW-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)14;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5487, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      uTF8JsonGenerator0.writeString(charArray0, 4, (-2201));
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) 2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      int int0 = 4416;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4416, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(") out o# range of |ava short");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 1746, (ObjectCodec) null, mockPrintStream0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 1553);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1553 bytes (out of 1553)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte) (-23);
      byteArray0[8] = (byte) (-23);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 200, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (byte) (-23), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeBinary(byteArray0);
      SerializedString serializedString0 = new SerializedString("5G+~``{(Ag(*6&Mzf0");
      uTF8JsonGenerator1.writeNullField("write a boolean value");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator1.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._verifyPrettyValueWrite(" You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`", 23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("k'Y|a#]F8v}I;%");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)11, false);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)11, (ObjectCodec) null, mockPrintStream1, byteArray0, 108, false);
      uTF8JsonGenerator1.writeNumber((long) (byte)49);
      uTF8JsonGenerator0.writeNumber(68);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "*2<W-rt96+Q6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 58, true);
      uTF8JsonGenerator0.writeNumber((long) 3);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)11);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, (-1623));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("KUza+;i");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-49);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)11, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)11, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      SerializedString serializedString0 = new SerializedString(" You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("x$qb0#iG0T;GkD~", 27);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(") out o# range of |ava short");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 1746, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumberField(") out o# range of |ava short", (long) 3);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-56);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 43, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      iOContext0.allocWriteEncodingBuffer((int) (byte) (-124));
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-2154), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeRaw('{');
      byte[] byteArray1 = new byte[1];
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray1, 1114111, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("k'Y|a#]F8v}I;%");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)11, false);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)11, (ObjectCodec) null, mockPrintStream1, byteArray0, 108, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(55296);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      uTF8JsonGenerator1.writeBinary((InputStream) mockFileInputStream0, 0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("k'Y|a#]F8v}I;%");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 100, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-102), false);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext3, 18, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      uTF8JsonGenerator0.writeBinary((InputStream) null, 0);
      uTF8JsonGenerator0._releaseBuffers();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-691));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[4] = (byte)11;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1641), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a string");
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockPrintStream1, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.signum();
      bigInteger1.multiply(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeString("t&sAE/d#jA'!&IqTcL");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 57343, (ObjectCodec) null, mockPrintStream1, byteArray0, 5, false);
      uTF8JsonGenerator1.writeNumber((long) (byte)11);
      uTF8JsonGenerator0.writeNumber((short)74);
      uTF8JsonGenerator0.writeNumber((double) 55296);
      uTF8JsonGenerator1.writeNumber((short)74);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 58, true);
      uTF8JsonGenerator0.writeNumber((long) 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("*2<W-rt96+Q6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 12, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 6, (ObjectCodec) null, mockPrintStream0, byteArray0, 56319, true);
      uTF8JsonGenerator1.writeNumber((long) (byte)11);
      uTF8JsonGenerator0.writeFieldName("*2<W-rt96+Q6");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "\u0004dN2h3-/As0~", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*2<W-rt96+Q6");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "*2<W-rt96+Q6");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("\u0004dN2h3-/As0~");
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "{Vy8r";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "{Vy8r", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a string");
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, mockPrintStream1, byteArray0, 5, false);
      uTF8JsonGenerator0.writeNumber("?Lr[g BIJp''i");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("?Lr[g BIJp''i", (String) null, true, 'b', 84);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2JW-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)14;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5507, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      uTF8JsonGenerator0.writeString(charArray0, 4, (-2201));
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("' (code 0x", "", false, 'b', 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2JW-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)14;
      iOContext1.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5507, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("' (code 0x", "", false, 'b', 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "*2<W-rt96+Q6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)13;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)5, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-2665), (-2861));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 56319;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 57343;
      doubleArray0[6] = (double) 1;
      uTF8JsonGenerator0.writeArray(doubleArray0, 3, 2);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-372), (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("KUza+;i");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-155), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)11, true);
      uTF8JsonGenerator0.writeStartObject((Object) bufferRecycler0);
      try { 
        uTF8JsonGenerator0.writeNumber((long) (byte) (-102));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 39, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString("write a string");
      uTF8JsonGenerator0.writeNumber(0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte byte0 = (byte)4;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2550), (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      try { 
        uTF8JsonGenerator0.writeNumber((long) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-102), (ObjectCodec) null, mockPrintStream0, byteArray0, (-167), false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((-1228L));
      uTF8JsonGenerator0.writeRaw('D');
      uTF8JsonGenerator0.writeFieldName("zI.(8");
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("k'Y|a#]F8v}I;%");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2047, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber("NEm");
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      uTF8JsonGenerator0.writeNumber((long) (byte)11);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) (-144L));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1641), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a string");
      IOContext iOContext3 = new IOContext(bufferRecycler0, mockPrintStream1, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-4828), (ObjectCodec) null, mockPrintStream0, byteArray0, 12, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.multiply(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeString("t&sAE/d#jA'!&IqTcL");
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = '>';
      charArray0[2] = ';';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 12, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 6, (ObjectCodec) null, mockPrintStream0, byteArray0, 56319, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) (byte)11;
      Object object0 = uTF8JsonGenerator1.getOutputTarget();
      objectArray0[2] = object0;
      mockPrintStream0.format("*2<W-rt96+Q6", objectArray0);
      uTF8JsonGenerator1.writeNumber((long) (byte)11);
      uTF8JsonGenerator0.writeNumber((short) (byte)11);
      uTF8JsonGenerator1.writeNumber(0.0);
      uTF8JsonGenerator0.writeNumber((short) (byte)48);
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-56);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 43, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-2154), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeRaw('{');
      byte[] byteArray1 = new byte[0];
      int int0 = 1114111;
      boolean boolean0 = false;
      uTF8JsonGenerator1._outputBuffer = byteArray1;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(") out of range of Java short");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 1746, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumberField("*,3@\":@b$", (long) 3);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      try { 
        uTF8JsonGenerator0.writeFieldName("*,3@\":@b$");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeString("LH\"");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(26);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 4, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeRootValue((-190));
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, true);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0._outputTail = 2;
      uTF8JsonGenerator0.writeNumber(1737);
      uTF8JsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      System.setCurrentTimeMillis(1L);
      uTF8JsonGenerator0.writeNumber(1737);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "*2<W-rt96+Q6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 240, false);
      uTF8JsonGenerator0.close();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte)11);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1._outputSurrogates((-1251), 57343);
      uTF8JsonGenerator1.writeNumber((short) (byte) (-102));
      double double0 = 1779.1;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-372.0207F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      String string0 = "k'Y|a#]F8v\\}I;%";
      MockPrintStream mockPrintStream0 = new MockPrintStream("k'Y|a#]F8v}I;%");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8000, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, sequenceInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream1, 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*2<W-rt96+Q6");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      mockPrintStream0.println();
      byteArray0[1] = (byte)11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-102), (ObjectCodec) null, mockPrintStream0, byteArray0, 73, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte) (-102);
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = 't';
      charArray0[2] = '2';
      charArray0[4] = 'G';
      charArray0[5] = 'Q';
      charArray0[6] = '!';
      charArray0[7] = '\\';
      charArray0[8] = 't';
      uTF8JsonGenerator0.writeString(charArray0, 2, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, sequenceInputStream0, byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(") out of range of Java short");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, (-1859), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)11, false);
      uTF8JsonGenerator0.writeNumber(1000L);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName(") out of range of Java short");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "*2<W-rt96+Q6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "*2<W-rt96+Q6");
      byteArray0[1] = (byte)11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.movePointRight(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-102), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(69);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, (-553));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      char[] charArray0 = new char[0];
      mockPrintStream0.println(charArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 58, true);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeNumber(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)11, 0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 52, (ObjectCodec) null, (OutputStream) null, byteArray0, 102, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((byte)2);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 26, 2);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeString((String) null);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 501, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1641), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a string");
      IOContext iOContext3 = new IOContext(bufferRecycler0, mockPrintStream1, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-4828), (ObjectCodec) null, mockPrintStream0, byteArray0, 12, false);
      uTF8JsonGenerator1.writeFieldName("");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.multiply(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeString("t&sAE/d#jA'!&IqTcL");
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = '>';
      charArray0[2] = ';';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 57343, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)11, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      try { 
        uTF8JsonGenerator1.writeBinary((InputStream) sequenceInputStream0, 69);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 898, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream1, byteArray1, 57343, true);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)87;
      byteArray2[1] = (byte) (-102);
      byteArray2[2] = (byte) (-102);
      byteArray2[3] = (byte) (-102);
      byteArray2[5] = (byte)87;
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, (byte) (-102), (ObjectCodec) null, mockPrintStream0, byteArray2, 56319, true);
      uTF8JsonGenerator2.writeNumber((long) (byte)0);
      uTF8JsonGenerator2.writeNumber((double) 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "*2<W-rt96+Q6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      char[] charArray0 = new char[0];
      mockPrintStream0.println(charArray0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-102), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((short) (byte)45);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*2<W-rt96+Q6");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "py}]w");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-150), true);
      String string0 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 297, 2582);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -150
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1641), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext3 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-4828), (ObjectCodec) null, mockPrintStream0, byteArray0, 12, false);
      uTF8JsonGenerator1.writeFieldName("");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeString("t&sAE/d#jA'!&IqTcL");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 12, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 6, (ObjectCodec) null, mockPrintStream0, byteArray0, 56319, true);
      uTF8JsonGenerator1.writeNumber(0L);
      uTF8JsonGenerator1.writeNumber(0.0);
      uTF8JsonGenerator0.writeBoolean(false);
      try { 
        uTF8JsonGenerator0._outputSurrogates((byte)115, 45);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x73, second 0x2d
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 12, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 6, (ObjectCodec) null, mockPrintStream0, byteArray0, 56319, true);
      uTF8JsonGenerator1.writeNumber(0L);
      uTF8JsonGenerator1.writeNumber(0.0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(52);
      int[] intArray0 = new int[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-532), (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter1, false, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeNumber(52);
      jsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      try { 
        jsonGenerator0.writeFieldName("Current context not an ARRAY but ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*2<W-rt96+Q6");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      char[] charArray0 = new char[0];
      mockPrintStream0.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2316), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString(charArray0, (-1187), (-4084));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "{Vy8nr", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a string");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("write a number", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, 55);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+U(e6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 240, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      charArray0[6] = 'g';
      charArray0[7] = 'g';
      charArray0[8] = 'g';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 1213);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.close();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 73);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, 2480, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, (byte)11, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator2.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an ARRAY but ");
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[5] = '=';
      mockPrintStream0.println(charArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      String string0 = "K.ZdEv1aU.Uq^2Ze";
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Current context not an ARRAY but ", false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 116, (ObjectCodec) null, mockPrintStream0, byteArray0, 132, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.util.DefaultPrettyPrinter");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+U(e6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.mark((-3438));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-557), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNull();
      IOContext iOContext2 = new IOContext(bufferRecycler0, "*2<W-rt96+U(e6", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      // Undeclared exception!
      uTF8JsonGenerator1.writeString("K.ZdEv1aU.Uq^2Ze");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "*2<W-rt96+Q6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      uTF8JsonGenerator0._flushBuffer();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, mockPrintStream0, byteArray0, 55296, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 240, false);
      assertEquals(240, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.close();
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte)11);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1._outputSurrogates((-1251), 57343);
      uTF8JsonGenerator1.writeNumber((short) (byte) (-102));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("*2<W-rt96+Q6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ByteArrayBuilder.NO_BYTES;
      byteArray0[0] = (byte)2;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 7, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      charArray0[7] = '=';
      mockPrintStream0.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1086), (ObjectCodec) null, mockPrintStream0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*2<W-rt96+Q6");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      mockPrintStream0.println();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*2<W-rt96+Q6");
      byteArray0[1] = (byte)11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-102), (ObjectCodec) null, mockPrintStream0, byteArray0, 73, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte) (-102);
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = 't';
      charArray0[2] = '2';
      charArray0[3] = 's';
      charArray0[4] = 'G';
      charArray0[5] = 'Q';
      charArray0[6] = '!';
      charArray0[7] = '\\';
      charArray0[8] = 'p';
      uTF8JsonGenerator0.writeString(charArray0, 2, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, sequenceInputStream0, byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+U(e6");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1837, (ObjectCodec) null, mockPrintStream0, byteArray0, 8, true);
      uTF8JsonGenerator0.writeNumber(0L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1837);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+U(e6");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1702), true);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1702
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3305);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      byte[] byteArray1 = new byte[3];
      byte byte0 = (byte) (-69);
      byteArray1[0] = (byte) (-69);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-290), (ObjectCodec) null, mockPrintStream0, byteArray1, 115, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 421, 3);
      uTF8JsonGenerator0.writeFieldName("");
      try { 
        uTF8JsonGenerator0.writeFieldName("write a binary value");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocReadIOBuffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 32, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+U(e6");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      String string0 = "write a null";
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("write a null");
      int int0 = (-2273);
      defaultPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, 2493);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)11;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 450, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "*2<W-rt96+Q6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      charArray0[7] = '=';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1310), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(3412.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1310
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*2<W-rt96+Q6");
      byteArray0[1] = (byte)11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("*2<W-rt96+Q6", "}B+m#9YyN1EWD!7", true, 'L', 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 16)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)11;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      int int0 = 911;
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 911, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      byte[] byteArray1 = new byte[6];
      uTF8JsonGenerator0.writeStartObject();
      byteArray1[0] = (byte)87;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)87;
      SerializableString serializableString0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(52);
      byteArray0[0] = (byte)2;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 7, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeNumber((-451.3309));
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-165), (ObjectCodec) null, byteArrayBuilder0, byteArray1, (-1144), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "*2<W-rt96+Q6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a boolean value");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("}#Um)=L4B~a]8");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 240, false);
      uTF8JsonGenerator0.close();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte)11);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1._outputSurrogates((-1251), 57343);
      uTF8JsonGenerator1.writeNumber((short) (byte) (-102));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("*2<W-rt96+Q6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      boolean boolean0 = false;
      int int0 = 0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1874), false);
      uTF8JsonGenerator0.close();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 73);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, 2480, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, (byte)11, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator2._outputSurrogates(3, 57343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3305);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 937, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      Base64Variant base64Variant0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 57343, 4000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3305);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      byte[] byteArray1 = new byte[3];
      byte byte0 = (byte) (-69);
      byteArray1[0] = (byte) (-69);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-290), (ObjectCodec) null, mockPrintStream0, byteArray1, 115, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 421, 3);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("write a binary value");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byte byte0 = (byte)11;
      byteArray0[1] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("write a null");
      defaultPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, (-2273));
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 3);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "*2<W-rt96+Q6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-308), (ObjectCodec) null, mockPrintStream0, byteArray0, 3049, false);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 1598.145974;
      doubleArray0[4] = (double) 56319;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1555.94012922;
      int int0 = 1828;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 1828, 3049);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1828
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      mockPrintStream0.write(byteArray0);
      byteArray0[1] = (byte)11;
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = bigDecimal0.movePointRight(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3788), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      int int0 = 1801;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("*2<W-rt96+Q6", "", true, 'a', 1801);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(52);
      byteArray0[0] = (byte)2;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 7, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeNumber((-451.3309));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeNumber((double) 2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*2<W-rt96+Q6");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*2<W-rt96+Q6");
      byteArray0[1] = (byte)11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-102), (ObjectCodec) null, mockPrintStream0, byteArray0, 73, true);
      String string0 = "";
      Base64Variant base64Variant0 = null;
      int int0 = (-1025);
      int int1 = (-5379);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte) (-102);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, sequenceInputStream0, byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-102);
      MockPrintStream mockPrintStream1 = new MockPrintStream("*2<W-rt96+Q6");
      byte byte1 = (byte)11;
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 720, (ObjectCodec) null, mockPrintStream2, byteArray0, (-1422), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("-10");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1422
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 27, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      String string0 = "NEm";
      uTF8JsonGenerator0.writeNumber("NEm");
      SerializedString serializedString0 = new SerializedString("NEm");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1513), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.close();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 73);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-1513), (ObjectCodec) null, mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, 2480, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, (byte)11, false);
      uTF8JsonGenerator0.writeNumber((long) 3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator2.writeString("*2<W-rt96+Q6");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an ARRAY but ");
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[5] = '=';
      mockPrintStream0.println(charArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-102), false);
      uTF8JsonGenerator0.getOutputTarget();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("Current context not an ARRAY but ");
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 512, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -102
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 240, false);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 53, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(52);
      byteArray0[0] = (byte)2;
      int[] intArray0 = new int[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-532), (ObjectCodec) null, (OutputStream) null, byteArray1, 2, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter1, false, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 2, 0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeRaw("", 0, 0);
      uTF8JsonGenerator0.writeNumber(52);
      System.setCurrentTimeMillis(3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(52);
      byteArray0[0] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-532), (ObjectCodec) null, (OutputStream) null, byteArray1, 2, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter1, false, true);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawValue((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator1.writeString("");
      uTF8JsonGenerator1.writeRaw("", 0, (-22));
      uTF8JsonGenerator0.writeNumber(57343);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}pEra7Ks8e<0@bz9");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 3619, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*2<W-rt96+Q6");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "*2<W-rt96+Q6");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 56320;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 56319;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) 0;
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, 2);
      uTF8JsonGenerator0.writeFieldName("*2<W-rt96+Q6");
      uTF8JsonGenerator0.writeNumber((-1776.8F));
      uTF8JsonGenerator0.flush();
      SerializedString serializedString0 = new SerializedString("l714g/n*Z T)RPcC3)");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 240, false);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 53, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*2<W-rt96+Q6");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*2<W-rt96+Q6");
      byteArray0[1] = (byte)11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-102), (ObjectCodec) null, mockPrintStream0, byteArray0, 73, true);
      String string0 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (-1025), (-5379));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 39, (ObjectCodec) null, mockPrintStream0, byteArray0, 39, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("write a string", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "*2<W-rt96+Q6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "*2<W-rt96+Q6");
      byteArray0[1] = (byte)11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.movePointRight(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-102), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("*2<W-rt96+Q6", "*2<W-rt96+Q6", false, 'm', (byte) (-102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 13)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      int int0 = 575;
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 773, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0._verifyValueWrite("");
      int[] intArray0 = new int[0];
      uTF8JsonGenerator0.writeArray(intArray0, 0, (int) (byte) (-102));
      uTF8JsonGenerator0.writeRaw('&');
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler1, object0, false);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".");
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(52);
      byteArray0[0] = (byte)2;
      int[] intArray0 = new int[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-532), (ObjectCodec) null, (OutputStream) null, byteArray1, 2, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter1, false, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 2, 0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeString((String) null);
      defaultPrettyPrinter0.createInstance();
      uTF8JsonGenerator0.writeRaw("", 0, 0);
      uTF8JsonGenerator0.writeNumber(52);
      uTF8JsonGenerator1.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator1._verifyPrettyValueWrite("write a boolean value", 3);
      uTF8JsonGenerator1.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(52);
      byteArray0[0] = (byte)2;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 7, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) 2);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 111, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 46, true);
      Object object0 = uTF8JsonGenerator1.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 63, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 49, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("*2<W-rt96+Q6");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byte byte0 = (byte)11;
      byteArray0[1] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("write a null");
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 3);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = "*2<W-rt96+Q6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      int int0 = (-831);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, mockPrintStream0, byteArray0, (-831), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -831
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3305);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-69);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-290), (ObjectCodec) null, mockPrintStream0, byteArray1, 115, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 421, 3);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("1lq|A6~z!dxh");
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)102;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 317, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 52, (byte) (-4));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "*2<W-rt96+Q6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 240, false);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 53, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
      uTF8JsonGenerator1.writeNull();
      String string1 = "Too few bytes available: missing ";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Too few bytes available: missing ", "*2<W-rt96+Q6", true, 'r', 56319);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 13)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(52);
      byteArray0[0] = (byte)2;
      int[] intArray0 = new int[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-532), (ObjectCodec) null, (OutputStream) null, byteArray1, 2, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter1, false, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 2, 0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeRaw("", 0, 0);
      uTF8JsonGenerator0.writeNumber(52);
      uTF8JsonGenerator1.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator1._verifyPrettyValueWrite("write a boolean value", 3);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 240, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(816.4138530675);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-719), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-5365), true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 24, 57343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.allocReadIOBuffer(3305);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-290), (ObjectCodec) null, mockPrintStream0, byteArray0, 115, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 16, 2048);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'Q';
      charArray0[2] = 'C';
      charArray0[3] = 'p';
      charArray0[4] = 'J';
      charArray0[5] = 'a';
      charArray0[6] = 'H';
      mockPrintStream0.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-102), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString(charArray0, 240, (-189));
      uTF8JsonGenerator0.writeNumber((double) 3);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 52, (ObjectCodec) null, (OutputStream) null, byteArray0, 102, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((byte)2);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 26, 2);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeNumber(3168);
      uTF8JsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*2<W-rt96+Q6");
      byteArray0[1] = (byte)11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-102), (ObjectCodec) null, mockPrintStream0, byteArray0, 73, true);
      uTF8JsonGenerator0.writeNumberField("", (long) 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.allocWriteEncodingBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-102), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = 'U';
      charArray0[2] = '3';
      uTF8JsonGenerator0.writeRaw("*2<W-rt96+Q6");
      charArray0[3] = 'S';
      charArray0[4] = 'S';
      uTF8JsonGenerator0.writeStartArray((int) (byte) (-102));
      charArray0[5] = '{';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 3, 1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      charArray0[7] = '=';
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 4, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.allocReadIOBuffer(3305);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-290), (ObjectCodec) null, mockPrintStream0, byteArray0, 115, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 16, 2048);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "*2<W-rt96+Q6", false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream1, byteArray0, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 1121, 65536);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("1lq|A6~z!dxh");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getValueAsLong((long) 3);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw("1lq|A6~z!dxh", 2, (-3));
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 768, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(52);
      byteArray0[0] = (byte)2;
      int[] intArray0 = new int[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-532), (ObjectCodec) null, (OutputStream) null, byteArray1, 2, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter1, false, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 2, 0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeRaw("", 0, 0);
      uTF8JsonGenerator0.writeNumber(52);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream1);
      try { 
        uTF8JsonGenerator0._outputSurrogates((byte)11, (-1068));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xb, second 0xfffffbd4
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 240, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(816.4138530675);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("+NU/n]=Rh");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 1, false);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#Kp(,JL5J`", false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)41;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1279), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 54840, false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[1];
      iOContext0.allocReadIOBuffer(2);
      int int0 = 117;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 117, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('u');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[1];
      iOContext0.allocReadIOBuffer(48);
      byteArray0[0] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 48;
      intArray0[2] = 0;
      intArray0[3] = 48;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(intArray0, 575, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 575
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byte byte0 = (byte)11;
      byteArray0[1] = (byte)11;
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      iOContext1.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 898, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      byte byte1 = (byte)87;
      byte byte2 = (byte)123;
      byte byte3 = (byte)41;
      byte[] byteArray1 = new byte[6];
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
      uTF8JsonGenerator0.writeStringField(".fQGtX<)$G:(*", "' for name");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(") out of range of Java short");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, (-1859), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)11, false);
      uTF8JsonGenerator0.writeNumber(1000L);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(1676.0F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+U(e6");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1837, (ObjectCodec) null, mockPrintStream0, byteArray0, 8, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("*2<W-rt96+U(e6");
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0Pb", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)102;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(52);
      byteArray0[0] = (byte)2;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 7, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeNumber((-451.3309));
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder("R6v$0");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) stringBuilder0, (int) (byte)2, 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 33
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 240, false);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 53, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+U(e6");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, mockPrintStream0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 57343;
      doubleArray0[3] = (double) 0;
      uTF8JsonGenerator0.writeArray(doubleArray0, 102, (-2243));
      uTF8JsonGenerator0.writeNumber((-1.0F));
      uTF8JsonGenerator0.flush();
      SerializedString serializedString0 = new SerializedString("l714g/n*Z T)RPcC3)");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3305);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2874, (ObjectCodec) null, mockPrintStream0, byteArray0, 123, false);
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 4697, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.allocWriteEncodingBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      char char0 = 'S';
      char char1 = '{';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-102), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = '&';
      charArray0[2] = '3';
      // Undeclared exception!
      uTF8JsonGenerator0.writeObject("*2<W-rt96+Q6");
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("k'Y|a#]F8v}I;%");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2047, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber("NEm");
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'q';
      uTF8JsonGenerator0.writeRaw(charArray0, 56320, (-1480));
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) (-1480));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)11, (ObjectCodec) null, mockPrintStream0, byteArray0, 1751, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("*2<W-rt96+Q6");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeRaw("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = ";|r@iI<Vc&kc3+YQ";
      IOContext iOContext1 = new IOContext(bufferRecycler0, ";|r@iI<Vc&kc3+YQ", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 56320, true);
      uTF8JsonGenerator0.writeFieldName("");
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      char[] charArray0 = new char[8];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 57344, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-591), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -591
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format("HU:@bIR B9k~T*", objectArray0);
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      charArray0[7] = '=';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 87, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-102), false);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1600L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      charArray0[7] = '=';
      mockPrintStream0.println(charArray0);
      iOContext0.allocWriteEncodingBuffer();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)11, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-102), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("@N=!T7lX+,i1s");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -102
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeRaw("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, ";|r@iI<Vc&kc3+YQ", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 56320, true);
      uTF8JsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.setEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(48);
      byteArray0[0] = (byte)2;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-532), (ObjectCodec) null, (OutputStream) null, byteArray1, 2, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter1, false, true);
      filteringGeneratorDelegate0.getPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 2, 0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeRaw("", 0, 0);
      uTF8JsonGenerator0.writeNumber(48);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byte byte0 = (byte)11;
      byteArray0[1] = (byte)11;
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 898, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      byte byte1 = (byte)87;
      byte byte2 = (byte)123;
      byte byte3 = (byte)41;
      byte[] byteArray1 = new byte[6];
      // Undeclared exception!
      uTF8JsonGenerator0.writeStringField(".fQGtX<)$G:(*", "' for name");
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "*2<W-rt96+Q6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, mockPrintStream0, byteArray0, 55296, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3919), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1299, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber("NEm");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[1];
      iOContext0.allocReadIOBuffer(48);
      byteArray0[0] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 48;
      intArray0[2] = 0;
      intArray0[3] = 48;
      uTF8JsonGenerator0._verifyValueWrite("a^4(#5(*&tJ4:Jc%Z");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(intArray0, 575, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.setEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(48);
      byteArray0[0] = (byte)2;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-532), (ObjectCodec) null, (OutputStream) null, byteArray1, 2, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 2, 0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeRaw("", 0, 0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.setEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      byte[] byteArray0 = iOContext2.allocReadIOBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, (OutputStream) null, byteArray0, (-2716), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)2, (-507));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2716
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      iOContext0.allocReadIOBuffer(48);
      byteArray0[0] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRaw('E');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("Split surrogate on writeRaw() input (last character)", (-2067));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 898, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 69, 69);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      mockPrintStream0.write(byteArray0, 1, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 36, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      mockPrintStream0.write(byteArray0, 0, 98);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (-4567), false);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("*2<W-rt96+Q6");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("1lq|A6~z!dxh");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw("1lq|A6~z!dxh", 2, (-3));
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      assertNotNull(object0);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeNumber(898);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      char[] charArray0 = new char[9];
      byteArrayBuilder0.write(232);
      charArray0[0] = 'g';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber(0L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 898, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = 'A';
      charArray0[2] = '?';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 73, 3);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      charArray0[7] = '=';
      mockPrintStream0.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1086), (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 218, 421);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 218
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.setEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(48);
      byteArray0[0] = (byte)2;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-532), (ObjectCodec) null, (OutputStream) null, byteArray1, 2, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 2, 0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      System.setCurrentTimeMillis(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 0, 57343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+U(e6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1649, (ObjectCodec) null, mockPrintStream0, byteArray0, 44, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte) (-102), (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator1.writeString("=^8]Xq|/t");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRaw((String) null, 55296, 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-719), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-5365), true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5365
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      char[] charArray0 = new char[9];
      charArray0[1] = 'k';
      charArray0[2] = 'W';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2852), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2198, 1543);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2852
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("l(VmE Rc6<Q85sRx\"");
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      byte[] byteArray0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, (byte[]) null, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("1lq|A6~z!dxh");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      CharsToNameCanonicalizer.createRoot();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw("1lq|A6~z!dxh", 2, (-3));
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      assertNotNull(object0);
      
      uTF8JsonGenerator0.close();
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte) (-81);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1683, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)11, false);
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.close();
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[1];
      iOContext0.allocReadIOBuffer(48);
      byteArray0[0] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRaw('E');
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField((String) null, 1866.8964);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("1lq|A6~z!dxh");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw("1lq|A6~z!dxh", 2, (-3));
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getOutputBuffered();
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      mockPrintStream0.write(byteArray0, (-1541), 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 240, false);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("*2<W-rt96+Q6");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = 'e';
      charArray0[2] = 'V';
      charArray0[3] = 'u';
      charArray0[4] = 'i';
      charArray0[5] = 'J';
      charArray0[6] = 'q';
      charArray0[7] = '=';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw("");
      StringWriter stringWriter0 = new StringWriter(240);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = 'e';
      charArray0[2] = 'V';
      charArray0[3] = 'u';
      charArray0[4] = 'i';
      charArray0[5] = 'J';
      charArray0[6] = 'q';
      charArray0[7] = '=';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5365), (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 207, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 63, 63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2612, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 5, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('g');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      String string0 = "";
      uTF8JsonGenerator0.writeRaw("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("W^{v");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      Object object0 = new Object();
      IOContext iOContext3 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, (-1518));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1641), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext3 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-4828), (ObjectCodec) null, mockPrintStream0, byteArray0, 12, false);
      uTF8JsonGenerator1.writeFieldName("");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.multiply(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeString("t&sAE/d#jA'!&IqTcL");
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = '>';
      charArray0[2] = ';';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*2<W-rt96+Q6");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "*2<W-rt96+Q6");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("*2<W-rt96+Q6");
      uTF8JsonGenerator0.writeNumber((-1776.8F));
      assertEquals(20, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.flush();
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer((-1529));
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      uTF8JsonGenerator0.writeRaw('s');
      uTF8JsonGenerator0.writeRaw("I=;Yx$6OhT*");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-719), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-5365), true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 8, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("?N6.5(");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5365
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'k';
      charArray0[2] = 'W';
      charArray0[3] = 'X';
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 56319, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      char[] charArray0 = new char[9];
      charArray0[1] = 'k';
      charArray0[2] = 'W';
      charArray0[4] = 'Z';
      charArray0[5] = '\u0000';
      charArray0[6] = 'E';
      charArray0[7] = ',';
      System.setCurrentTimeMillis((-1L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3041, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 2, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "*2<W-rt96+Q6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 898, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      byte byte0 = (byte)41;
      byte[] byteArray1 = new byte[6];
      uTF8JsonGenerator0.writeStartObject();
      byteArray1[0] = (byte)87;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)87;
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a raw (unencoded) value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      charArray0[7] = '=';
      mockPrintStream0.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2221, (ObjectCodec) null, mockPrintStream0, byteArray0, 2469, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*2<W-rt96+Q6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 240, true);
      uTF8JsonGenerator0.writeNumber(0L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1690);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = 'e';
      charArray0[2] = 'V';
      charArray0[3] = 'u';
      charArray0[4] = 'i';
      charArray0[5] = 'J';
      charArray0[6] = 'q';
      charArray0[7] = '=';
      mockPrintStream1.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-38L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'k';
      charArray0[2] = 'W';
      charArray0[3] = 'X';
      charArray0[4] = 'Z';
      charArray0[5] = '7';
      charArray0[6] = 'E';
      charArray0[7] = ',';
      charArray0[8] = '!';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      iOContext0.allocReadIOBuffer(48);
      byteArray0[0] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRaw('E');
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      uTF8JsonGenerator0._outputEscapes = intArray0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 564, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2242), (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 1, 2469);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("%4k)PygCajunlX");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 262144, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 47, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 101;
      MockFile mockFile0 = new MockFile("NoQ!Rea=y;r7=0", "NoQ!Rea=y;r7=0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2048, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }
}
