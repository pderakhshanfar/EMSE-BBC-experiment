/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:36:08 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[3];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw('P');
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      charArray0[5] = 'P';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, (-638));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      byteArrayBuilder0.release();
      char[] charArray0 = new char[2];
      charArray0[0] = '\u008D';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "Zp~;HxzYew,I", false);
      MockFile mockFile0 = new MockFile((File) null, "Zp~;HxzYew,I");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 80, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      try { 
        uTF8JsonGenerator1.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, (-420));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, mockPrintStream0, byteArray0, 8, false);
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0087';
      charArray0[1] = '\u0087';
      charArray0[2] = 'c';
      charArray0[3] = '\u0087';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 2000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Can not ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[4];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2151, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      iOContext0.allocBase64Buffer();
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      byteArrayBuilder0.setCurrentSegmentLength(0);
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0086';
      charArray0[2] = '\u0086';
      uTF8JsonGenerator0.writeNumber((long) 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject((Object) bufferRecycler0);
      uTF8JsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3964, true);
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q]{5M*`kGUJVS");
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 479, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      byteArrayBuilder0.completeAndCoalesce(9);
      uTF8JsonGenerator0.writeObjectFieldStart(">'v2VQ*|Q5");
      byteArrayBuilder0.release();
      uTF8JsonGenerator0.writeRaw('\u0087');
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES, 1, 63);
      try { 
        uTF8JsonGenerator0.writeString("lG5_a!/]q8mp)>MbzB");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-2770), 15);
      jsonGenerator0.writeArrayFieldStart(") not numeric, can not use numeric value accessors");
      jsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      StringWriter stringWriter0 = new StringWriter(128);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1877), (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-2), true);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(1);
      uTF8JsonGenerator0.writeRaw('\u0097');
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(35);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)49;
      byte byte0 = (byte) (-3);
      byteArray0[7] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)28, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('I');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-2774), 15);
      jsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[4];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, true);
      int int0 = 799;
      StringReader stringReader0 = new StringReader("write a boolean value");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 799, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 2, 33, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 33, true);
      try { 
        uTF8JsonGenerator0.writeRaw('o');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeObjectFieldStart("");
      try { 
        uTF8JsonGenerator0.writeNumber((-3366.6768F));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      byteArrayBuilder0.release();
      uTF8JsonGenerator0.writeRaw('\u0087');
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0087';
      charArray0[1] = '\u0087';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      byteArrayBuilder0.toByteArray();
      uTF8JsonGenerator0.setHighestNonEscapedChar(56319);
      char[] charArray0 = new char[20];
      charArray0[0] = 'G';
      charArray0[1] = '\u0089';
      charArray0[2] = '\'';
      charArray0[3] = 'L';
      charArray0[4] = '\'';
      charArray0[8] = 'G';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 77);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-2774), 15);
      jsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeArrayFieldStart("20qt8Ox#/ig0j`D");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeString((String) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      jsonGenerator0.writeFieldName("jz:,{");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2626), (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 3);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      uTF8JsonGenerator0.writeRawValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeRaw('\u0089');
      byteArrayBuilder0.toByteArray();
      uTF8JsonGenerator0.setHighestNonEscapedChar(56319);
      char[] charArray0 = new char[20];
      charArray0[0] = 'G';
      charArray0[1] = '\u0089';
      charArray0[2] = '\'';
      charArray0[3] = 'L';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = 'G';
      charArray0[7] = '\u0089';
      charArray0[8] = 'G';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 77);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartObject((Object) null);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.flush();
      try { 
        uTF8JsonGenerator0.writeNumber((long) 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-2774), 15);
      jsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartObject();
      jsonGenerator0.writeArrayFieldStart("");
      BigDecimal bigDecimal0 = new BigDecimal((double) 56320);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1223, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray1 = new byte[0];
      int int0 = 1089;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1872, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 1089, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 755, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.close();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 55, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-521), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(2747);
      byteArrayBuilder0.release();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString("KYN;t");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a raw (unencoded) value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRawValue("Yk<eUg5[$]bX-");
      uTF8JsonGenerator0.writeRaw('\'');
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '\u0089';
      uTF8JsonGenerator0.setHighestNonEscapedChar(80);
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 427);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-2774), 15);
      JsonGenerator jsonGenerator1 = jsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeArrayFieldStart("20qt8Ox#/ig0j`D");
      BigDecimal bigDecimal0 = new BigDecimal((double) 56320);
      String string0 = null;
      uTF8JsonGenerator0.writeString((String) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber((double) 1);
      jsonGenerator0.writeBoolean(true);
      // Undeclared exception!
      try { 
        jsonGenerator1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      byteArrayBuilder0.reset();
      byteArrayBuilder0.setCurrentSegmentLength(0);
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.writeString("5V^PyN~3XhBzl}30~l3");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("5V^PyN~3XhBzl}30~l3");
      int int0 = 512;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "CnD=A`NWp1", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 795, false);
      uTF8JsonGenerator0.writeRawValue("");
      String string0 = "y\"aMhlX66|^4j=cuG4k";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      uTF8JsonGenerator0.writeRawValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeRaw('\u0089');
      byteArrayBuilder0.toByteArray();
      uTF8JsonGenerator0.setHighestNonEscapedChar(18);
      char[] charArray0 = new char[20];
      charArray0[0] = '4';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = 'L';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = '4';
      charArray0[7] = '\u0089';
      charArray0[8] = '4';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeRaw('\u0089');
      byteArrayBuilder0.toByteArray();
      uTF8JsonGenerator0.setHighestNonEscapedChar(18);
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = 'L';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = '4';
      charArray0[7] = '\u0089';
      charArray0[8] = '4';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 56320);
      iOContext1.constructTextBuffer();
      int int0 = GeneratorBase.SURR1_FIRST;
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = 'M';
      charArray0[2] = 'F';
      charArray0[3] = '?';
      charArray0[4] = 'b';
      charArray0[5] = '?';
      charArray0[6] = '|';
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 1, 44);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.setCurrentSegmentLength(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject((Object) "Invalid custom escape definitions; custom escape not found for character code 0x");
      try { 
        uTF8JsonGenerator0.writeString("#BKxwPgO^C]\"Q");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[4];
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2151, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      iOContext0.allocBase64Buffer();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRawValue("Yk<eUg5[$]bX-");
      uTF8JsonGenerator0.writeRaw('\'');
      byteArrayBuilder0.toByteArray();
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '\u0089';
      uTF8JsonGenerator0.setHighestNonEscapedChar(80);
      charArray0[2] = '4';
      charArray0[3] = '4';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 427);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)8;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)84, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-567), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 57343, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, filterOutputStream0, byteArrayBuilder0.NO_BYTES, 181, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      SerializedString serializedString0 = new SerializedString("_+d(Z#");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte) (-114);
      byteArray1[3] = (byte)81;
      byteArray1[4] = (byte)18;
      byteArray1[5] = (byte)126;
      byteArray1[6] = (byte) (-96);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 0, 729);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("B{?DKADeA%");
      uTF8JsonGenerator0.writeRawValue("B{?DKADeA%");
      uTF8JsonGenerator0.writeFieldName("B{?DKADeA%");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.overrideStdFeatures((-2774), 15);
      uTF8JsonGenerator0.writeNumber(15);
      byteArrayBuilder0.appendTwoBytes((-1619));
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 3);
      uTF8JsonGenerator1._outputBuffer = byteArrayBuilder0.NO_BYTES;
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder(stringBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber("expected padding character '");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      iOContext2.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.reset();
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream1, 8);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 224, 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[4];
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2151, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      iOContext0.allocBase64Buffer();
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.json.UTF8JsonGenerator", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 106, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3472, true);
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.writeNumberField("com.fasterxml.jackson.core.json.UTF8JsonGenerator", (float) (byte) (-33));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.json.UTF8JsonGenerator", 4130);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ONE;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1693));
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeString("9~oJW<}N|4q[WX");
      uTF8JsonGenerator0._verifyValueWrite("");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = new SerializedString("m0^c");
      uTF8JsonGenerator0._rootValueSeparator = (SerializableString) serializedString0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", expecting field name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRawValue("k8*7?j/I<&<5?BX");
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName(", expecting field name");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      byteArrayBuilder0.setCurrentSegmentLength(0);
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.writeString("5V^PyN~3XhBzl}30~l3");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("5V^PyN~3XhBzl}30~l3");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 1, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(2);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(56319);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("4;[fG ]&$9):.");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      byteArrayBuilder0.append(240);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("4;[fG ]&$9):.");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      uTF8JsonGenerator0.writeArray(doubleArray0, 102, 0);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigDecimal0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2117), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, sequenceInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      SerializedString serializedString0 = new SerializedString("_+d(Z#");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 78, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 2, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      SerializedString serializedString0 = new SerializedString("_+d(Z#");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      byteArrayBuilder0.setCurrentSegmentLength(0);
      uTF8JsonGenerator0.close();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      int int0 = 1358;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder1.NO_BYTES, 1358, false);
      String string0 = "jdod!4y.&\\3{";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeFieldName("jdod!4y.&\u0003{");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 23, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(Double.NaN);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byteArrayBuilder0.setCurrentSegmentLength(0);
      uTF8JsonGenerator0.close();
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[2] = '\u0088';
      charArray0[3] = '\u0088';
      charArray0[4] = '\u0088';
      charArray0[5] = '1';
      uTF8JsonGenerator0.writeString(charArray0, 3, 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartArray();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeUTF8String(byteArray0, 1, 2167);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      byteArrayBuilder0.setCurrentSegmentLength(0);
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitions; custom escape not found for character code 0x");
      BigDecimal bigDecimal0 = new BigDecimal(2033L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(1);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(0);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[12];
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream("/g=%B&&26!;5");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, mockPrintStream0, byteArray0, 1128, true);
      iOContext0.allocReadIOBuffer();
      SerializedString serializedString0 = new SerializedString("/[A[#,Dse");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      byteArrayBuilder0.setCurrentSegmentLength(0);
      uTF8JsonGenerator0.close();
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = '\u0088';
      charArray0[2] = '\u0088';
      charArray0[3] = '\u0088';
      charArray0[4] = '\u0088';
      charArray0[5] = '1';
      uTF8JsonGenerator0.writeString(charArray0, 3, 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartArray();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRawUTF8String(byteArray0, 3, 87);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1242), (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartArray(3);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte)101;
      byteArray1[2] = (byte)84;
      byteArray1[3] = (byte)14;
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte) (-69);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream0.markSupported();
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) (-69));
      uTF8JsonGenerator0.writeBinary(byteArray1, 26, 0);
      uTF8JsonGenerator0.writeBinary(byteArray0, 45, (-369));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      SerializedString serializedString0 = new SerializedString("_+d(Z#");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1);
      uTF8JsonGenerator0.writeNumber((-413L));
      uTF8JsonGenerator0.writeBinary(byteArray0, 3, 0);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1182);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeArrayFieldStart("");
      uTF8JsonGenerator0.writeString((String) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-2774), 15);
      JsonGenerator jsonGenerator1 = jsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 3);
      byte[] byteArray1 = byteArrayBuilder1.finishCurrentSegment();
      String string0 = "4;[=fG ]&V9)\\:.";
      jsonGenerator0.writeRawValue("com.fasterxml.jackson.core.util.JsonGeneratorDelegate");
      jsonGenerator1.writeNumber(56319);
      // Undeclared exception!
      try { 
        jsonGenerator1.writeRawUTF8String(byteArray1, 56319, (-2774));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-2774), 15);
      JsonGenerator jsonGenerator1 = jsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeArrayFieldStart("");
      BigDecimal bigDecimal0 = new BigDecimal((double) 56320);
      uTF8JsonGenerator0.writeString((String) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber((double) 1);
      jsonGenerator0.writeBoolean(true);
      // Undeclared exception!
      try { 
        jsonGenerator1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(1);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(1);
      uTF8JsonGenerator0.writeRawValue("K|,U8l9bD8!3'o");
      uTF8JsonGenerator0.writeRaw('\u0089');
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("Bcl2P");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "LdZ?>", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1182);
      uTF8JsonGenerator0.writeRaw('j');
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 1000000, 2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = GeneratorBase.SURR2_LAST;
      uTF8JsonGenerator0.writeBinary(byteArray0, 1, 1330);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 104, 57343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[3];
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byteArrayBuilder0.release();
      uTF8JsonGenerator0.writeArray((double[]) null, 0, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3006, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      String string0 = "_+d(Z#";
      SerializedString serializedString0 = new SerializedString("_+d(Z#");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1);
      uTF8JsonGenerator0.writeNumber((-413L));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1970, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1970
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(1);
      byteArrayBuilder0.release();
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      byteArrayBuilder0.append(0);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a null, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 5, true);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-2306));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, (-392), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -392
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[3];
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-2825));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-763), (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeStartArray(1958);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 2, 0);
      byteArrayInputStream1.markSupported();
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-2));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("&a5b]EZ5 cTT,O#O,&5", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 931);
      byteArrayInputStream0.close();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) (-1));
      uTF8JsonGenerator0.writeString("Th+*FF&!");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, true);
      uTF8JsonGenerator0.overrideStdFeatures((-2774), 15);
      BigDecimal bigDecimal0 = new BigDecimal((double) 56320);
      uTF8JsonGenerator0.writeNumberField("\"e` 2elpCesX_L5t97", bigDecimal0);
      uTF8JsonGenerator0.writeString((String) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext2.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.setCurrentSegmentLength(0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      byte[] byteArray1 = iOContext2.allocWriteEncodingBuffer(0);
      int int0 = 4209;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 2, 4209);
      byteArrayInputStream0.markSupported();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1961, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 18);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 2, 34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(1);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(0);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cv;JUYj[I_zHSX}7H");
      byteArray0[0] = (byte)19;
      byteArray0[2] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      String string0 = ") not numeric, can not use numeric value accessors";
      MockPrintStream mockPrintStream0 = new MockPrintStream(") not numeric, can not use numeric value accessors");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)19, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[3];
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, (-371));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 54, 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 54
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[3];
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-765), (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 52);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 88, 52);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber(2);
      byteArrayBuilder0.release();
      int int0 = 4000;
      uTF8JsonGenerator0.writeString("0");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(15);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1102), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 14, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byteArrayBuilder0.release();
      char[] charArray0 = new char[8];
      charArray0[0] = '!';
      byteArrayBuilder0.append(57343);
      charArray0[1] = '!';
      charArray0[2] = '!';
      charArray0[3] = '!';
      charArray0[4] = '!';
      charArray0[5] = '!';
      charArray0[6] = '!';
      charArray0[7] = '!';
      uTF8JsonGenerator0.writeString(charArray0, 1, 0);
      uTF8JsonGenerator0.writeNumberField("[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]", 828.0F);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber(3414.06);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      byteArrayBuilder0.setCurrentSegmentLength(0);
      SerializedString serializedString0 = new SerializedString("_+d(Z#");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("3");
      uTF8JsonGenerator0.writeNumber((long) 1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeStartArray(38);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 56320, (-1252));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 2, 1970);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(1);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(1);
      uTF8JsonGenerator0.writeRawValue("K|,U8l9bD8!3'o");
      uTF8JsonGenerator0.writeRaw('\u0089');
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      byteArrayBuilder0.toByteArray();
      charArray0[1] = '\u0089';
      charArray0[2] = '\u0089';
      charArray0[3] = '\u0089';
      charArray0[4] = '\u0089';
      charArray0[5] = '4';
      charArray0[6] = '2';
      charArray0[7] = '\u0089';
      charArray0[8] = '\u0089';
      uTF8JsonGenerator0.writeString(charArray0, 3, 3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byteArrayBuilder0.release();
      char[] charArray0 = new char[8];
      charArray0[0] = '!';
      byteArrayBuilder0.append(57343);
      charArray0[1] = '!';
      charArray0[2] = '!';
      charArray0[3] = '!';
      charArray0[4] = '!';
      charArray0[5] = '!';
      charArray0[6] = '!';
      charArray0[7] = '!';
      uTF8JsonGenerator0.writeString(charArray0, 1, 0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeString("Current context not an object but ");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byteArrayBuilder0.release();
      char[] charArray0 = new char[8];
      charArray0[0] = '\u001A';
      byteArrayBuilder0.append(57343);
      charArray0[1] = '\u001A';
      charArray0[2] = '\u001A';
      charArray0[3] = '\u001A';
      charArray0[4] = '\u001A';
      charArray0[5] = '\u001A';
      charArray0[6] = '\u001A';
      charArray0[7] = '\u001A';
      uTF8JsonGenerator0.writeString(charArray0, 1, 0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        jsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 2, 8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      byteArrayBuilder0.setCurrentSegmentLength(0);
      iOContext0.allocWriteEncodingBuffer(56320);
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.close();
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.writeNumber(1L);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      byteArrayBuilder0.setCurrentSegmentLength(0);
      byteArrayBuilder0.finishCurrentSegment();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('i');
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 56319, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, true);
      byteArrayBuilder0.setCurrentSegmentLength(0);
      iOContext0.allocWriteEncodingBuffer(56320);
      uTF8JsonGenerator0.writeNumber((float) 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[3];
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byteArrayBuilder0.release();
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 39, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 57, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("=}DN");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byteArrayBuilder0.release();
      char[] charArray0 = new char[8];
      charArray0[0] = '!';
      charArray0[1] = '!';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1516), (-1806));
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-4437), (ObjectCodec) null, mockPrintStream0, byteArray0, 27, false);
      uTF8JsonGenerator0.writeNumber((float) (byte) (-21));
      uTF8JsonGenerator0.writeNumberField(") not numeric, can not use numeric value accessors", (float) 1);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeStartArray(38);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, (-2), (-1252));
      String string0 = "&{+Xtd9># ~J+";
      uTF8JsonGenerator0.writeString("&{+Xtd9># ~J+");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, (-370), (-370));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber(55);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      byteArrayBuilder1.release();
      byteArrayBuilder0.append(1970);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("4;[fG ]&$9):.");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeString("4;[fG ]&$9):.");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue("d~+6A%");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("4;[fG ]&$9):.");
      char[] charArray0 = new char[9];
      charArray0[1] = '';
      charArray0[2] = 'U';
      charArray0[3] = 'O';
      charArray0[5] = 'a';
      charArray0[7] = 'U';
      charArray0[8] = '1';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-33);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") not numeric, can not use numeric value accessors", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockFileOutputStream0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      mockFileOutputStream0.close();
      uTF8JsonGenerator0.writeRawValue("");
      uTF8JsonGenerator0.writeStringField("", "");
      try { 
        uTF8JsonGenerator0.writeNumber(84);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-33);
      byteArray0[2] = (byte)19;
      byteArray0[1] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") not numeric, can not use numeric value accessors", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-33), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)19);
      uTF8JsonGenerator0.writeNumberField(") not numeric, can not use numeric value accessors", (float) (byte)48);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)19;
      byteArray0[1] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") not numeric, can not use numeric value accessors", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-33), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.writeNumber((double) 2);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", (String) null, false, '\"', (-1712));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      byteArrayBuilder0.setCurrentSegmentLength(36);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray1 = iOContext1.allocWriteEncodingBuffer(2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 19, (-892));
      byteArrayInputStream0.markSupported();
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1404));
      uTF8JsonGenerator0.writeBinary(byteArray0, 21, (-163));
      uTF8JsonGenerator0.writeString("@v=");
      uTF8JsonGenerator0.writeNumber((-34L));
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 0, 57);
      int int0 = 53;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer("@v=");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) stringBuffer0, 699, 699);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 699
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[3];
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 54, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 54
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      byteArrayBuilder0.setCurrentSegmentLength(0);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(56320);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 55296, 2137);
      byteArrayInputStream0.markSupported();
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-163));
      uTF8JsonGenerator0.writeBinary(byteArray1, 2027, 512);
      uTF8JsonGenerator0.writeString(",w7$lS6_m!i<b");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 59, 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      byteArrayBuilder0.setCurrentSegmentLength((-2));
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(56);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES, 48, (-61));
      byteArrayInputStream0.markSupported();
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-433));
      uTF8JsonGenerator0.writeBinary(byteArray1, 21, (-1));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 937);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = ") not numeric, can not use numeric value accessors";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not write a field name, expecting a value", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockFileOutputStream0.release();
      int int0 = (-88);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-88), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-211), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -211
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 127, false);
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, object1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.close();
      short short0 = (short)117;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(444);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 444, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 0, true);
      int int0 = 46;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(22);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(84);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("4;[fG ]&$9):.");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeString("<5.f!D*tme$*:a\"E0");
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeStartArray(43);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("HzV_vl9\"h");
      uTF8JsonGenerator0.version();
      uTF8JsonGenerator0.writeArray((double[]) null, 1, (-1548));
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeBinary(byteArray0, 563, 0);
      uTF8JsonGenerator0.writeStartArray();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 19, (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder0.NO_BYTES, 0, true);
      ByteArrayBuilder byteArrayBuilder2 = new ByteArrayBuilder(bufferRecycler0, 19);
      byteArrayBuilder1.release();
      uTF8JsonGenerator0.writeNumber(2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRawUTF8String(byteArrayBuilder2.NO_BYTES, 19, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      SerializedString serializedString0 = new SerializedString("_+d(Z#");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3063, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 8, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(25);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      byteArrayBuilder1.release();
      byteArrayBuilder1.append(2);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("4;[fG ]&$9):.");
      uTF8JsonGenerator0.writeNumber(1717);
      uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder1.NO_BYTES, (byte)0, 0);
      uTF8JsonGenerator0.flush();
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(2);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(56319);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("4;[fG ]&$9):.");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("Can not ");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[2] = 't';
      charArray0[3] = ',';
      charArray0[5] = '\u0088';
      charArray0[6] = '1';
      charArray0[8] = 'a';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      boolean boolean0 = false;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      byteArrayBuilder0.setCurrentSegmentLength(0);
      byteArrayBuilder0.append(1);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)1562);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      boolean boolean1 = true;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 49, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)117);
      uTF8JsonGenerator0.flush();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-1584), (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = '?';
      charArray0[2] = '9';
      charArray0[3] = ']';
      charArray0[4] = 'I';
      charArray0[5] = 'N';
      charArray0[6] = '1';
      charArray0[7] = 'B';
      charArray0[8] = 't';
      uTF8JsonGenerator0.writeString(charArray0, 127, 0);
      uTF8JsonGenerator1.writeStartObject();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawValue("W7#]#ND_,(tU", 2, (-1512));
      uTF8JsonGenerator0.writeNumber((short)117);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue("X3#`/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-210), (ObjectCodec) null, (OutputStream) null, byteArray0, (-1566), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber((double) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1566
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)117);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.json.UTF8JsonGenerator", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 106, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3472, true);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      uTF8JsonGenerator0.writeNumberField("Yr2", (float) (byte) (-33));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(2);
      uTF8JsonGenerator0.writeString("");
      ByteArrayBuilder byteArrayBuilder2 = new ByteArrayBuilder();
      SerializedString serializedString0 = new SerializedString("]Vw");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      iOContext2.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2999, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-11));
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal(115);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.flush();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1260, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeFieldName("");
      uTF8JsonGenerator1.writeRaw((SerializableString) serializedString0);
      char char0 = '_';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", true, '_', 12000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      uTF8JsonGenerator0.writeString("-INF");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = '\\';
      jsonGenerator0.writeNull();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1296, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeBinary(byteArrayBuilder0.NO_BYTES, 1296, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = '!';
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 54, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 54
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeStartArray(43);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("HzV_vl9\"h");
      uTF8JsonGenerator0.version();
      uTF8JsonGenerator0.writeArray((double[]) null, 1, (-1548));
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("HzV_vl9\"h");
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 255, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = '!';
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      SerializedString serializedString0 = new SerializedString("X!,c'NX]nJ}I xYH,<");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, (-3022), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3022
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      byteArrayBuilder0.append(1);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)117);
      uTF8JsonGenerator0.flush();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1._verifyPrettyValueWrite("", 0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      IOContext iOContext2 = new IOContext(bufferRecycler1, jsonEncoding0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, Integer.MAX_VALUE, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(1);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue("expected digit (0-9) to follow minus sign, for valid numeric value");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("Can not ");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeString((String) null);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeBinary(byteArray0, 0, 1);
      uTF8JsonGenerator1.writeStartArray();
      uTF8JsonGenerator1.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRaw(')');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 65599, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      SerializedString serializedString0 = new SerializedString("N/A");
      serializedString0.appendUnquotedUTF8(byteArrayBuilder0.NO_BYTES, 16);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "SDv", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      byteArrayBuilder0.resetAndGetFirstSegment();
      uTF8JsonGenerator0.writeRawValue("");
      String string0 = "q*S8DF";
      SerializedString serializedString0 = new SerializedString("q*S8DF");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      iOContext2.withEncoding(jsonEncoding2);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 57343, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      uTF8JsonGenerator1.writeNumber(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      byteArrayBuilder1.release();
      byteArrayBuilder0.append(57343);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator1.writeRawValue("4;[fG ]&$9):.");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      iOContext2.withEncoding(jsonEncoding1);
      uTF8JsonGenerator1.writeString("<5.f!D*tme$*:a\"E0");
      uTF8JsonGenerator1.writeNumber((short) (-598));
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = 'C';
      charArray0[2] = '6';
      charArray0[3] = 'H';
      charArray0[4] = '';
      uTF8JsonGenerator0.writeRaw(charArray0, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringReader stringReader0 = new StringReader("8H-k6G*zki=|Hk<7=");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      int int0 = 56320;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 56320, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = 1970;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      SerializedString serializedString0 = new SerializedString("_+d(Z#");
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      byteArrayBuilder0.append(1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 3;
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeFieldName("");
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(3);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(2);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("4;[fG ]&$9):.");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeRaw('');
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      byteArrayBuilder0.append(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator1.writeRawValue("");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 56319;
      uTF8JsonGenerator1.writeNumber((BigDecimal) null);
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, (-1603), (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      String string0 = "-INF";
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      String string1 = "ea/sv";
      String string2 = "";
      byteArrayBuilder0.release();
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)117);
      uTF8JsonGenerator0.flush();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(22);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(84);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("4;[fG ]&$9):.");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeString("<5.f!D*tme$*:a\"E0");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      StringReader stringReader0 = new StringReader("Internal error: failed to locate expected buffered tokens");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1192, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder2 = readerBasedJsonParser0._getByteArrayBuilder();
      byteArrayBuilder2.release();
      byteArrayBuilder1.append(3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("Internal error: failed to locate expected buffered tokens");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeString("4;[fG ]&$9):.");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("-INF");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeStartArray();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "-INF", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 5, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[3];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      int int0 = 1624;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1624, (ObjectCodec) null, byteArrayBuilder0);
      int int1 = (-85);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-85));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("qbNY", 391, 1624);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "SDv", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = "Can not ";
      SerializedString serializedString0 = new SerializedString("3\"3");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, 255, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[3];
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3019, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString((char[]) null, 1476, 17);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      int int0 = 1624;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1624, (ObjectCodec) null, byteArrayBuilder0);
      int int1 = (-85);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-85));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("qbNY", 391, 1624);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1230), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw(';');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 73);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, sequenceInputStream0, byteArrayBuilder0.NO_BYTES, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, objectOutputStream0, byteArray0, (-692), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      SerializedString serializedString0 = new SerializedString("_+d(Z#");
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1);
      uTF8JsonGenerator0.writeNumber((-413L));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1970, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1970
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("T#!");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal(1);
      uTF8JsonGenerator0.writeBinary(byteArray0, 2, 2);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = ']';
      charArray0[2] = 'w';
      charArray0[3] = 'l';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)117);
      uTF8JsonGenerator0.flush();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-1584), (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeBinary((Base64Variant) null, byteArray0, 463, 56320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(2);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(56319);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue("4;[fG ]&$9):.");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("Can not ");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '';
      uTF8JsonGenerator0.writeNumber(6);
      uTF8JsonGenerator0.writeRaw('>');
      try { 
        uTF8JsonGenerator0._writePPFieldName(" / 0x");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF32_BE");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.ROOT;
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") not numeric, can not use numeric value accessors", true);
      mockFileOutputStream0.write(1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockFileOutputStream0.release();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1020.83026F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("8H-k6G*zki=|Hk<7=");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-156), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object1, false);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 8, (ObjectCodec) null, byteArrayBuilder1);
      uTF8JsonGenerator1.writeNumber(1);
      ByteArrayBuilder byteArrayBuilder2 = new ByteArrayBuilder(bufferRecycler0, 105);
      byteArrayBuilder2.release();
      uTF8JsonGenerator1.writeNumber(109);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("-INF");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = 'f';
      charArray0[2] = '\"';
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2151, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      iOContext0.allocBase64Buffer();
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = "gF%(h.[jMRN=S\"";
      SerializedString serializedString0 = new SerializedString("gF%(h.[jMRN=S\"");
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 392, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((-2168));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      SerializedString serializedString0 = new SerializedString("_+d(Z#");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1);
      uTF8JsonGenerator0.writeNumber((-413L));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1970, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1970
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1558), (ObjectCodec) null, pipedOutputStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeBinary(byteArray0, 1814, (-770));
      uTF8JsonGenerator0.writeStartArray();
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)15;
      byteArray0[1] = (byte)15;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 13, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext3 = new IOContext(bufferRecycler1, uTF8JsonGenerator0, false);
      iOContext3.allocBase64Buffer();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("ea/sv");
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream2, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 19);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(6);
      uTF8JsonGenerator0.writeRaw('\u0089');
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-1568));
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(0);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      try { 
        uTF8JsonGenerator0._verifyValueWrite("UI)P?q@^~-b|");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not UI)P?q@^~-b|, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      byte[] byteArray0 = new byte[1];
      byteArrayOutputStream0.reset();
      SerializedString serializedString0 = new SerializedString("Can not write a field name, expecting a value");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-763), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(71);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[1] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") not numeric, can not use numeric value accessors", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockFileOutputStream0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)19, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      uTF8JsonGenerator0.writeNumber((float) (byte)48);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeRaw('-');
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NQ.S7H-D");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-879), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 57343, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-2), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "R:'sd2`j@", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("R:'sd2`j@", 7, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2151, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      String string0 = "-INF";
      iOContext0.allocReadIOBuffer();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        uTF8JsonGenerator0.writeString("ea/sv");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") not numeric, can not use numeric value accessors", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockFileOutputStream0.release();
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)19);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byteArrayInputStream0;
      objectArray0[1] = (Object) (byte)19;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) ") not numeric, can not use numeric value accessors";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) iOContext0;
      objectArray0[6] = (Object) (byte)19;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, ") not numeric, can not use numeric value accessors", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0, byteArray0, 8000, true);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 1649;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1649, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-49);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") not numeric, can not use numeric value accessors", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockFileOutputStream0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-49), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 0, (int) (byte)19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinaryField("write a raw (unencoded) value", byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeStartArray();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte) (-124);
      byteArray1[2] = (byte)58;
      byteArray1[3] = (byte)101;
      byteArray1[4] = (byte) (-118);
      byteArray1[5] = (byte) (-68);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 25, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 588, (ObjectCodec) null, byteArrayBuilder0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append('`');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 588, (ObjectCodec) null, stringWriter1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "SDv", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(3324L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)8, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(399.86676F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeRaw('N');
      uTF8JsonGenerator0.writeString("+]");
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      charArray0[6] = 'N';
      charArray0[7] = 'N';
      uTF8JsonGenerator0.writeRaw(charArray0, 3, 2);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("+]", "com.fasterxml.jackson.core.json.UTF8JsonGenerator", false, '3', 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 49)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = true;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(2);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(56319);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("4;[fG ]&$9):.");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      String string0 = "Can not ";
      byteArrayBuilder0.append(240);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("4;[fG ]&$9):.");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) (byte)0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 1, 61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-69);
      byteArray0[0] = (byte) (-11);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      iOContext2.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2999, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-11));
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal(115);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeString("NQ.S7H-D");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1260, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._verifyPrettyValueWrite("-INF", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      String string0 = "";
      uTF8JsonGenerator0.writeString("");
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-119);
      byteArray0[0] = (byte) (-11);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-11);
      byteArray1[1] = (byte) (-101);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 606, 6000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputTarget();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)2;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)108, 110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(126);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)71;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-1150), false);
      SerializedString serializedString0 = new SerializedString("r{-oc0-");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ", although was supposed to have one", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-1770));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 2816, (-1770));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)36;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder1.NO_BYTES, 2, false);
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-763), (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 1, (-362));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "R:'sd2`j@", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('.');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "SDv";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "SDv", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-922));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 78, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-33);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") not numeric, can not use numeric value accessors", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockFileOutputStream0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-33), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("NIE3");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(2);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(56319);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("4;[fG ]&$9):.");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("Can not ");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[2] = 't';
      charArray0[3] = ',';
      charArray0[5] = '}';
      charArray0[6] = '1';
      charArray0[7] = 'U';
      charArray0[8] = 'a';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = true;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      Locale locale0 = Locale.GERMAN;
      String string0 = ".";
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.printf(locale0, ".", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2188), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      mockPrintStream0.print((Object) byteArrayInputStream1);
      String string1 = "%u'";
      uTF8JsonGenerator0.writeNumber("%u'");
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-69);
      byteArray0[0] = (byte) (-11);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      iOContext2.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2999, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-11));
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(1);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal(115);
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") not numeric, can not use numeric value accessors", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockFileOutputStream0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      uTF8JsonGenerator0.writeNumber((float) (byte)48);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeRaw('-');
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      Object object1 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-627), (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
      uTF8JsonGenerator0.writeString("write a number");
      uTF8JsonGenerator0.writeRaw(";kxR\"Bp", 2, 0);
      int int0 = 92;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (-1996));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      byteArrayBuilder1.resetAndGetFirstSegment();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1624, (ObjectCodec) null, byteArrayBuilder1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArrayBuilder1.NO_BYTES);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) (-8));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, (int) (byte) (-2), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 2 bytes (out of 2)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-33);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") not numeric, can not use numeric value accessors", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockFileOutputStream0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-33), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((short) (-349));
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(") not numeric, can not use numeric value accessors", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(2);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(56319);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("4;[fG ]&$9):.");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("Can not ");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = 'H';
      charArray0[2] = 't';
      charArray0[3] = ',';
      charArray0[4] = '';
      charArray0[5] = '}';
      charArray0[6] = '1';
      charArray0[7] = 'U';
      charArray0[8] = 'a';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString("-INF");
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      uTF8JsonGenerator0.writeNumber(0L);
      SerializedString serializedString0 = new SerializedString("ea/sv");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder1.NO_BYTES, 2, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)15;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1624, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString("");
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      uTF8JsonGenerator0.flush();
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      Locale locale0 = Locale.CANADA_FRENCH;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      byteArrayOutputStream0.reset();
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString("");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      uTF8JsonGenerator0.flush();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeNumber((double) 2);
      byteArrayBuilder0.reset();
      SerializedString serializedString1 = new SerializedString("");
      serializedString1.asQuotedChars();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, 0);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString("-INF");
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      uTF8JsonGenerator0.writeNumber(0L);
      SerializedString serializedString0 = new SerializedString("ea/sv");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      mockPrintStream0.printf(locale0, "R:'sd2`j@", (Object[]) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2091, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 3);
      char[] charArray0 = new char[19];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      uTF8JsonGenerator0.writeString(charArray0, 5, 1);
      uTF8JsonGenerator0.writeNumber((float) 2);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(99);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0._verifyValueWrite("Ml81bJL");
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1696, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator1._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyValueWrite("Ml81bJL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeString(")");
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      uTF8JsonGenerator0.writeString(charArray0, 0, 0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber(0L);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "R:'sd2`j@", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((float) 1);
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte byte0 = (byte) (-33);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 874, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1804, true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-197), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 170, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber((-3317));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)74;
      byteArray0[1] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = ") not numeric, can not use numeric value accessors";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") not numeric, can not use numeric value accessors", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-33), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)48);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField(") not numeric, can not use numeric value accessors", (float) (byte)34);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      mockPrintStream0.printf(locale0, "R:'sd2`j@", (Object[]) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 125, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2047, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      boolean boolean0 = false;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2008), (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder1.NO_BYTES, (-3), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("Invalid UTF-8 start byte 0x", byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      Object object1 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      pipedInputStream0.mark(3);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 3);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 0, 2);
      byteArrayInputStream1.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)60;
      byteArray1[2] = (byte)68;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1528), (ObjectCodec) null, byteArrayBuilder0, byteArray1, 11, true);
      uTF8JsonGenerator0.getSchema();
      uTF8JsonGenerator0.getSchema();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('^');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(99);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(1);
      byteArrayBuilder0.reset();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("K|,U8l9bD8!3'o");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal(99);
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeString("4;[fG ]&$9):.");
      try { 
        uTF8JsonGenerator0.writeFieldName("ddF(#gUJF_ENdCx");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(3);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(2);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("4;[fG ]&$9):.");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream1, 85);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 80 bytes (out of 85)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      byte byte0 = (byte)55;
      byteArray0[1] = (byte)55;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)126, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("\"eP7 $X5x", byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((short)151);
      uTF8JsonGenerator0.writeNumber(16);
      uTF8JsonGenerator0.writeString("XKhJk9uzsUS<");
      uTF8JsonGenerator0.writeRaw('}');
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      byteArrayOutputStream0.reset();
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeString("iU)~W#;)");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString("");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      uTF8JsonGenerator0.flush();
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, 0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iU");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)19;
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1487, (ObjectCodec) null, dataOutputStream0);
      dataOutputStream0.close();
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-562), (ObjectCodec) null, pipedOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-787));
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-999), (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      dataOutputStream0.writeDouble(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-69);
      byteArray0[0] = (byte) (-11);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      iOContext2.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2999, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-11));
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal(115);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0._verifyValueWrite("-INF");
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocTokenBuffer((-412));
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(3);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(2);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeFieldName("Poxh^;zq,m.~Jg8I}N");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)15;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1624, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNull();
      byte[] byteArray1 = new byte[0];
      uTF8JsonGenerator0.writeString("");
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      uTF8JsonGenerator0.flush();
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 97, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      System.setCurrentTimeMillis(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3540), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber((short)255);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("com.fasterxml.jackson.core.JsonFactory$Feature");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(23);
      byteArrayBuilder0.append(2);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString("-INF");
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      int int0 = 111;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder1.NO_BYTES, 7, 111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray1 = byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-763), (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 52);
      uTF8JsonGenerator0.writeString("WiA");
      uTF8JsonGenerator0.writeRaw("", 3065, (-559));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "uj=Oxo");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 1957);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("-INF");
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 3, 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(3);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(2);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 97, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 97
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-1));
      byteArrayBuilder0.append(2);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((long) (byte) (-33));
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1970, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      SerializedString serializedString0 = new SerializedString("_+d(Z#");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-116));
      String string0 = "";
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeRaw('.');
      String string1 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 3, 68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      byteArrayOutputStream0.reset();
      String string0 = "Can not write a field name, expecting a value";
      SerializedString serializedString0 = new SerializedString("Can not write a field name, expecting a value");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2028, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal(56319);
      try { 
        uTF8JsonGenerator0.writeNullField("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-787));
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(99);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("K|,U8l9bD8!3'o");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal(99);
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeString("4;[fG ]&$9):.");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      byteArrayOutputStream0.reset();
      SerializedString serializedString0 = new SerializedString("Can not write a field name, expecting a value");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2);
      serializedString0.putQuotedUTF8(byteBuffer0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2028, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal(56319);
      uTF8JsonGenerator0.flush();
      byte[] byteArray1 = null;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, (byte[]) null, (byte)106, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)110;
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      byte[] byteArray1 = byteArrayBuilder1.resetAndGetFirstSegment();
      int int0 = 1624;
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1624, (ObjectCodec) null, byteArrayBuilder1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArrayBuilder1.NO_BYTES);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1 bytes (out of 1)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1624, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-85));
      uTF8JsonGenerator0.writeString("write a number");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("qbNY", 391, 1624);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-4463), (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      byteArrayBuilder0.append((byte)0);
      char[] charArray0 = new char[5];
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = '4';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 1, 1827);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-116));
      String string0 = "";
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeRaw('.');
      uTF8JsonGenerator0.writeNullField("");
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-26);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-801), (byte) (-21));
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, true);
      mockFileOutputStream0.getChannel();
      uTF8JsonGenerator0.writeNumber((-1550.2145F));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2754), true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (byte) (-33), (ObjectCodec) null, byteArrayBuilder1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(56319);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2754
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      try { 
        uTF8JsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byte byte0 = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-2);
      byte byte1 = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      byteArrayBuilder1.resetAndGetFirstSegment();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1624, (ObjectCodec) null, byteArrayBuilder1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArrayBuilder1.NO_BYTES);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) (-8));
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.util.DefaultPrettyPrinter");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("qbNY", 391, 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-116));
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeRaw('.');
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(3);
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeRaw(charArray0, (-2387), 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 1229, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)15;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1624, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNull();
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1575, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 2, false);
      String string0 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeString("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString("-INF");
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeString("ea/sv");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray1 = byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1624, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
      uTF8JsonGenerator0.writeString("\"m");
      uTF8JsonGenerator0.writeRaw("write a raw (unencoded) value", 0, 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeStartArray();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 20, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 56320, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.close();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-21), (byte)19);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Can not write a field name, expecting a value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not write a field name, expecting a value", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte)67;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-26), (ObjectCodec) null, mockPrintStream0, byteArray1, (byte)19, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) (byte) (-33));
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      String string0 = "ea/sv";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 928, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("ea/sv");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      Object object1 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 3);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 0, 2);
      byteArrayInputStream1.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray1 = byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 19, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream2, 1624);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1124 bytes (out of 1624)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(3);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(2);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue("4;[fG ]&$9):.");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)0);
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeString("<5.f!D*tmL$*:a\"E0");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1558), (ObjectCodec) null, pipedOutputStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString((String) null);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      uTF8JsonGenerator0.writeNumber(2095L);
      uTF8JsonGenerator0.writeString("ea/sv");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-3152), true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte)72;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)72;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)72;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1775);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3152
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((float) 1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.writeRaw('-');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("R:'sd2`j@", 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      byteArrayBuilder0.release();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = (-3540);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)15;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1624, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("ea/sv");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString("ea/sv");
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte)15;
      uTF8JsonGenerator0.writeNumber(0L);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(3);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(2);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)0);
      uTF8JsonGenerator0.writeString("<5.f!D*tmL$*:a\"E0");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 2, 121);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(3);
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(2);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw("", 40, 0);
      uTF8JsonGenerator0.writeString("+INF");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinaryField("write a raw (unencoded) value", byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.writeNull();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 454, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-3540), false);
      uTF8JsonGenerator0.getSchema();
      uTF8JsonGenerator0.getSchema();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('y');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3540
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      boolean boolean0 = true;
      int int0 = 255;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 255, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1475), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeRaw((char[]) null, 532, (-1475));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "R:'sd2`j@", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(3429);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("-INF");
      uTF8JsonGenerator0.writeNull();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 454, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Can not write a field name, expecting a value", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(192);
      String string0 = ",Haij";
      uTF8JsonGenerator0.writeArrayFieldStart(",Haij");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, true, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)67;
      byteArray0[1] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") not numeric, can not use numeric value accessors", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-33), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)48);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      SerializedString serializedString0 = new SerializedString("RlBEw86A rIK$)SLmtg");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      byteArrayBuilder0.append(5840);
      String string0 = "";
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = 'R';
      charArray0[2] = ',';
      charArray0[3] = '\"';
      charArray0[4] = '$';
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-116));
      byteArrayBuilder0.append(56319);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((long) (byte) (-116));
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      char char0 = '>';
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 92, true);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-33), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(93);
      byteArrayBuilder0.append(123);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray1 = byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeString("qE");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString("ESCAPE_NON_ASCII");
      byteArrayBuilder0.write(byteArray1, (-1401), (int) (byte)0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 2, 192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[7] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-116);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-116));
      byteArrayBuilder0.append(56319);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("w86UO.|WeqR");
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "R:'sd2`j@", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((float) 1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)115;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 18, 1576);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "R:'sd2`j@", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      printStream0.println('4');
      uTF8JsonGenerator0.writeNumber((float) 1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)47;
      byteArrayOutputStream0.write(byteArray0);
      char[] charArray0 = new char[7];
      uTF8JsonGenerator0.writeStartObject();
      charArray0[0] = 'o';
      charArray0[1] = 'w';
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)47);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) (-21));
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") not numeric, can not use numeric value accessors", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-33), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)48);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "R:'sd2`j@", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteBuffer.wrap(byteArrayBuilder0.NO_BYTES);
      String string0 = ", expecting field name";
      BigInteger bigInteger0 = BigInteger.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 83, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-4463), (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      byteArrayBuilder0.append((byte)0);
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = ')';
      charArray0[3] = '4';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 92, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = new SerializedString("rHI-!k");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(296.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)15;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      int int0 = 1624;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1624, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("ea/sv");
      Base64Variant base64Variant0 = null;
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString("ea/sv");
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte)15;
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)15;
      byteArray1[4] = (byte)15;
      byteArray1[5] = (byte)15;
      byteArray1[6] = (byte)15;
      byteArray1[7] = (byte)15;
      byteArray1[8] = (byte)15;
      // Undeclared exception!
      try { 
        byteArrayBuilder1.write(byteArray1, 115, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      SerializedString serializedString0 = new SerializedString("");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "R:'sd2`j@", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      printStream0.println('4');
      uTF8JsonGenerator0.writeNumber((float) 1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = 'w';
      charArray0[2] = 'i';
      charArray0[3] = 'o';
      charArray0[4] = 'i';
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 92, false);
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(3);
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeRaw(charArray0, (-2387), 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 1229, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-116));
      byteArrayBuilder0.release();
      byteArrayBuilder0.append(56319);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-4463), (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      byteArrayBuilder0.append((byte)0);
      char[] charArray0 = new char[5];
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = '4';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "R:'sd2`j@", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeNumber((float) 1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = 'w';
      charArray0[2] = 'i';
      charArray0[3] = 'o';
      charArray0[4] = 'i';
      charArray0[5] = 'w';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, (-1097));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._releaseBuffers();
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-4463), (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      byteArrayBuilder0.append((byte)0);
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = '4';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-3115L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)72;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0);
      byteArrayBuilder0.append((byte) (-33));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, (-3419), 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = 92;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 92, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = 'h';
      charArray0[2] = 'r';
      charArray0[3] = 'N';
      charArray0[4] = 'i';
      charArray0[5] = 'r';
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.getSchema();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.setSchema((FormatSchema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, object0, true);
      File file0 = MockFile.createTempFile("UTF-8", "UTF-8");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)84;
      byte byte0 = (byte)32;
      byteArray0[5] = (byte)32;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (byte)32, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      SerializedString serializedString0 = new SerializedString("Split surrogate on writeRaw() input (last character)");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(3);
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeRaw(charArray0, (-2387), 0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 92, false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = 'H';
      charArray0[2] = 'u';
      charArray0[3] = 'S';
      charArray0[4] = 'I';
      charArray0[5] = 'l';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "R:'sd2`j@", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((float) 1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = 'w';
      charArray0[2] = 'i';
      charArray0[3] = 'o';
      charArray0[4] = 'i';
      charArray0[5] = 'w';
      charArray0[6] = 'w';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, (-1097));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 92, false);
      SerializedString serializedString0 = new SerializedString("");
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = 'h';
      charArray0[2] = 'r';
      charArray0[3] = 'N';
      charArray0[4] = 'i';
      charArray0[5] = 'r';
      charArray0[6] = 'w';
      char char0 = 'o';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      byteArrayBuilder0.append((byte)0);
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = ')';
      charArray0[2] = ' ';
      charArray0[3] = '4';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byteArrayInputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("qE");
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (byte)0, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(3);
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = 's';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte) (-33), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -33
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = 92;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 92, false);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = 'h';
      charArray0[2] = 'r';
      charArray0[3] = 'N';
      charArray0[4] = 'i';
      charArray0[5] = 'r';
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(Double.NaN);
      uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, 0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-983), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((float) 3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeNumber((-3068.57853));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-370), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 536870900, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "-";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 110, true);
      try { 
        uTF8JsonGenerator0.writeNumber((double) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 92, false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = 'H';
      charArray0[2] = 'u';
      charArray0[3] = 'S';
      charArray0[4] = 'I';
      charArray0[5] = 'l';
      charArray0[6] = 'o';
      charArray0[7] = 'J';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 100, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeNumber((int) (byte) (-116));
      byteArrayBuilder0.append(56319);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 8, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArrayBuilder0.NO_BYTES);
      String string0 = ", expecting field name";
      SerializedString serializedString0 = new SerializedString(", expecting field name");
      serializedString0.putUnquotedUTF8(byteBuffer0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2757, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2757, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 92, false);
      SerializedString serializedString0 = new SerializedString("");
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = 'h';
      charArray0[2] = 'r';
      charArray0[3] = 'N';
      charArray0[4] = 'i';
      charArray0[5] = 'r';
      charArray0[6] = 'w';
      charArray0[7] = 'o';
      uTF8JsonGenerator0.writeRaw(charArray0, (-1412), (-1412));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("qE");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (byte)0, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1773, (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 8, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      iOContext0.allocReadIOBuffer(1);
      String string0 = "$&AFbw{F";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("$&AFbw{F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2151, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      iOContext0.allocBase64Buffer();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      StringReader stringReader0 = new StringReader("JL|Q*WL!J6#Vy#qAQ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 56319, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 33, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      byteArrayBuilder0.release();
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 125);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "R:'sd2`j@", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      printStream0.println('4');
      uTF8JsonGenerator0.writeNumber((float) 1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)47;
      byteArrayOutputStream0.write(byteArray0);
      char[] charArray0 = new char[7];
      uTF8JsonGenerator0.writeStartObject();
      charArray0[0] = 'o';
      charArray0[1] = 'w';
      charArray0[2] = 'i';
      charArray0[3] = 'o';
      charArray0[4] = 'i';
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3019, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, true);
      char[] charArray0 = null;
      // Undeclared exception!
      uTF8JsonGenerator0.writeString((char[]) null, 1476, 17);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 92, false);
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-3036), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 57343, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "-";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 110, false);
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'p';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-1048), (int) (byte)19);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 123;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(123);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "R:'sd2`j@", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      uTF8JsonGenerator0.writeNumber("R:'sd2`j@");
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("R:'sd2`j@", "%]9{jFC<FR$2&_", true, 'j', 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 15)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 3, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      int int0 = 0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("5LEV@<{.vr");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      int int0 = 1039;
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2344);
      iOContext0.releaseNameCopyBuffer((char[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1039, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0._flushBuffer();
      byteArrayOutputStream0.write(57343);
      try { 
        uTF8JsonGenerator0._outputSurrogates(0, 1039);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x0, second 0x40f
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }
}
