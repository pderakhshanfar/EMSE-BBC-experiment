* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.fasterxml.jackson.core.json.UTF8JsonGenerator
* Starting Client-0
* Connecting to master process on port 19925
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonCore-17/target/classes
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.core.json.UTF8JsonGenerator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2877
* Using seed 3480267387
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 783 / 2877
* Search finished after 603s and 156 generations, 148640 statements, best individual has fitness: 1225.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 23:07:28.131 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 67%
* Total number of goals: 979
* Number of covered goals: 656
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 64%
* Total number of goals: 539
* Number of covered goals: 345
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 106
* Number of covered goals: 106
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 45%
* Total number of goals: 716
* Number of covered goals: 322
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 29%
* Total number of goals: 14
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 93%
* Total number of goals: 45
* Number of covered goals: 42
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 82%
* Total number of goals: 45
* Number of covered goals: 37
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 64%
* Total number of goals: 539
* Number of covered goals: 344
* Generated 265 tests with total length 5489
* Resulting test suite's coverage: 62% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 23:08:27.297 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7475166666666667% of time used, but only 10/265 tests minimized), falling back to using all assertions
[MASTER] 23:08:43.090 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 0%
* Compiling and checking tests
[MASTER] 23:09:12.171 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:09:12.584 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:09:27.922 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_321_tmp__ESTest.test0(UTF8JsonGenerator_321_tmp__ESTest.java:235)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:09:27.932 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, "Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow", true);
assertNotNull(iOContext0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);

ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
assertNotNull(byteArrayBuilder0);
assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);

StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
assertNotNull(stringReader0);

CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
assertNotNull(charsToNameCanonicalizer0);
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);

CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1901);
assertNotNull(charsToNameCanonicalizer1);
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer1.size());
assertEquals(0, charsToNameCanonicalizer1.collisionCount());
assertEquals(64, charsToNameCanonicalizer1.bucketCount());
assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
assertFalse(charsToNameCanonicalizer1.maybeDirty());
assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);

StringReader stringReader1 = new StringReader("F>~Vs]8@X1Q]u *3j5");
assertNotNull(stringReader1);
assertFalse(stringReader1.equals((Object)stringReader0));

CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild(23);
assertNotNull(charsToNameCanonicalizer2);
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(839877741, charsToNameCanonicalizer2.hashSeed());
assertEquals(0, charsToNameCanonicalizer2.maxCollisionLength());
assertEquals(0, charsToNameCanonicalizer2.collisionCount());
assertEquals(64, charsToNameCanonicalizer2.bucketCount());
assertEquals(0, charsToNameCanonicalizer2.size());
assertFalse(charsToNameCanonicalizer2.maybeDirty());
assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
assertFalse(charsToNameCanonicalizer2.equals((Object)charsToNameCanonicalizer1));
assertFalse(charsToNameCanonicalizer2.equals((Object)charsToNameCanonicalizer0));
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer2);
assertNotSame(charsToNameCanonicalizer2, charsToNameCanonicalizer1);
assertNotSame(charsToNameCanonicalizer2, charsToNameCanonicalizer0);

char[] charArray0 = new char[3];
charArray0[0] = 'N';
CharsToNameCanonicalizer charsToNameCanonicalizer3 = CharsToNameCanonicalizer.createRoot();
assertNotNull(charsToNameCanonicalizer3);
assertFalse(charsToNameCanonicalizer3.maybeDirty());
assertEquals(0, charsToNameCanonicalizer3.size());
assertEquals(64, charsToNameCanonicalizer3.bucketCount());
assertEquals(0, charsToNameCanonicalizer3.collisionCount());
assertEquals(839877741, charsToNameCanonicalizer3.hashSeed());
assertEquals(0, charsToNameCanonicalizer3.maxCollisionLength());
assertFalse(charsToNameCanonicalizer3.equals((Object)charsToNameCanonicalizer1));
assertFalse(charsToNameCanonicalizer3.equals((Object)charsToNameCanonicalizer0));
assertFalse(charsToNameCanonicalizer3.equals((Object)charsToNameCanonicalizer2));
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertNotSame(charsToNameCanonicalizer3, charsToNameCanonicalizer1);
assertNotSame(charsToNameCanonicalizer3, charsToNameCanonicalizer0);
assertNotSame(charsToNameCanonicalizer3, charsToNameCanonicalizer2);

stringReader1.reset();
assertFalse(stringReader1.equals((Object)stringReader0));
assertNotSame(stringReader1, stringReader0);

charArray0[1] = 'T';
charArray0[2] = '>';
ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 3, (-644), true);
assertNotNull(readerBasedJsonParser0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(839877741, charsToNameCanonicalizer2.hashSeed());
assertEquals(0, charsToNameCanonicalizer2.maxCollisionLength());
assertEquals(0, charsToNameCanonicalizer2.collisionCount());
assertEquals(64, charsToNameCanonicalizer2.bucketCount());
assertEquals(0, charsToNameCanonicalizer2.size());
assertFalse(charsToNameCanonicalizer2.maybeDirty());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertEquals(1, readerBasedJsonParser0.getFeatureMask());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
assertNull(readerBasedJsonParser0.getCurrentToken());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertFalse(readerBasedJsonParser0.hasCurrentToken());
assertFalse(readerBasedJsonParser0.isClosed());
assertNull(readerBasedJsonParser0.getCurrentName());
assertArrayEquals(new char[] {'N', 'T', '>'}, charArray0);
assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer2));
assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer3));
assertFalse(stringReader1.equals((Object)stringReader0));
assertFalse(charsToNameCanonicalizer2.equals((Object)charsToNameCanonicalizer3));
assertFalse(charsToNameCanonicalizer2.equals((Object)charsToNameCanonicalizer0));
assertFalse(charsToNameCanonicalizer2.equals((Object)charsToNameCanonicalizer1));
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertEquals(3, charArray0.length);

BigInteger bigInteger0 = BigInteger.TEN;
assertNotNull(bigInteger0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());

BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
assertNotNull(bigDecimal0);
assertEquals((short)10, bigDecimal0.shortValue());
assertEquals((byte)10, bigDecimal0.byteValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());

MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
assertNotNull(mockPrintStream0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4541, (ObjectCodec) null, mockFileOutputStream0);
assertNotNull(uTF8JsonGenerator0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(fileDescriptor0.valid());
assertFalse(uTF8JsonGenerator0.isClosed());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertEquals(4541, uTF8JsonGenerator0.getFeatureMask());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

uTF8JsonGenerator0.writeNumber(bigDecimal0);
assertEquals((short)10, bigDecimal0.shortValue());
assertEquals((byte)10, bigDecimal0.byteValue());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(fileDescriptor0.valid());
assertFalse(uTF8JsonGenerator0.isClosed());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
assertEquals(4541, uTF8JsonGenerator0.getFeatureMask());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

uTF8JsonGenerator0.writeNumber((float) 33);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(fileDescriptor0.valid());
assertFalse(uTF8JsonGenerator0.isClosed());
assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertEquals(4541, uTF8JsonGenerator0.getFeatureMask());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

uTF8JsonGenerator0._writePPFieldName("F>~Vs]8@X1Q]u *3j5");

[MASTER] 23:09:39.564 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_361_tmp__ESTest.test0(UTF8JsonGenerator_361_tmp__ESTest.java:117)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:09:39.565 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

Object object0 = new Object();
assertNotNull(object0);

IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
assertNotNull(iOContext0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
assertNotNull(iOContext1);
assertTrue(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
assertTrue(iOContext1.isResourceManaged());
assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertSame(iOContext0, iOContext1);
assertSame(iOContext1, iOContext0);

ObjectCodec objectCodec0 = null;
StringReader stringReader0 = new StringReader("start an object");
assertNotNull(stringReader0);

CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
assertNotNull(charsToNameCanonicalizer0);
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);

char[] charArray0 = new char[7];
charArray0[0] = 'C';
charArray0[1] = 'c';
CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
assertNotNull(charsToNameCanonicalizer1);
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
assertEquals(0, charsToNameCanonicalizer1.collisionCount());
assertEquals(64, charsToNameCanonicalizer1.bucketCount());
assertFalse(charsToNameCanonicalizer1.maybeDirty());
assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
assertEquals(0, charsToNameCanonicalizer1.size());
assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

byte[] byteArray0 = new byte[0];
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
assertNotNull(uTF8JsonGenerator0);
assertTrue(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
assertFalse(fileDescriptor0.valid());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertFalse(uTF8JsonGenerator0.isClosed());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertArrayEquals(new byte[] {}, byteArray0);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(0, byteArray0.length);

uTF8JsonGenerator0.writeFieldName("`O1Mp.-?)");

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'UTF8JsonGenerator_ESTest' to results/JacksonCore-17/com.fasterxml.jackson.core.json.UTF8JsonGenerator/BBC-F0-50/tests/9
* Done!

* Computation finished
