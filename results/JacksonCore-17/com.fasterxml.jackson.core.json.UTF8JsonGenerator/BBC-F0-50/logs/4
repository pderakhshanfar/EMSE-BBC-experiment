* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.fasterxml.jackson.core.json.UTF8JsonGenerator
* Starting Client-0
* Connecting to master process on port 8870
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonCore-17/target/classes
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.core.json.UTF8JsonGenerator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2877
* Using seed 3151240900
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 783 / 2877
* Search finished after 603s and 95 generations, 96127 statements, best individual has fitness: 1218.0
* Minimizing test suite
[MASTER] 23:06:39.738 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 66%
* Total number of goals: 979
* Number of covered goals: 646
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 63%
* Total number of goals: 539
* Number of covered goals: 339
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 47%
* Total number of goals: 716
* Number of covered goals: 335
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 36%
* Total number of goals: 14
* Number of covered goals: 5
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 82%
* Total number of goals: 45
* Number of covered goals: 37
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 63%
* Total number of goals: 539
* Number of covered goals: 338
* Generated 260 tests with total length 5474
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 23:07:43.234 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8401% of time used, but only 17/260 tests minimized), falling back to using all assertions
[MASTER] 23:07:52.848 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 2%
* Compiling and checking tests
[MASTER] 23:08:17.919 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:08:17.924 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_260_tmp__ESTest.test0(UTF8JsonGenerator_260_tmp__ESTest.java:31)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:08:17.925 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
ObjectCodec objectCodec0 = null;
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte) (-126);
byte byte0 = (byte)0;
byteArray0[1] = (byte)0;
byteArray0[2] = (byte)63;
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3195), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
StringWriter stringWriter0 = new StringWriter((-926));

[MASTER] 23:08:21.766 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:08:22.000 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:08:22.217 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:08:22.390 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:08:22.564 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:08:23.204 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:08:23.204 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_267_tmp__ESTest.test0(UTF8JsonGenerator_267_tmp__ESTest.java:30)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:08:23.204 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte) (-126);
byteArray0[1] = (byte)0;
byteArray0[2] = (byte)63;
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)0, true);
uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-1013), 3);

[MASTER] 23:08:26.640 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:08:26.809 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:08:27.260 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:08:30.769 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_284_tmp__ESTest.test0(UTF8JsonGenerator_284_tmp__ESTest.java:56)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:08:30.769 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertNotNull(iOContext0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte) (-126);
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 127, false);
assertEquals(3, byteArray0.length);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(fileDescriptor0.valid());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertEquals(127, uTF8JsonGenerator0.getOutputBuffered());
assertFalse(uTF8JsonGenerator0.isClosed());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
assertNotNull(uTF8JsonGenerator0);
assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0}, byteArray0);

uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 352);

[MASTER] 23:08:34.364 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_286_tmp__ESTest.test0(UTF8JsonGenerator_286_tmp__ESTest.java:62)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:08:34.548 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertNotNull(tokenFilter0);

TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1);
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeRawValue());
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter1, tokenFilter0);
assertNotNull(tokenFilter1);

TokenFilter tokenFilter2 = tokenFilter1.includeElement(69);
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeRawValue());
assertTrue(tokenFilter2.includeNull());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter2.toString());
assertTrue(tokenFilter2.includeBinary());
assertTrue(tokenFilter2.includeRawValue());
assertSame(tokenFilter0, tokenFilter2);
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter1, tokenFilter0);
assertSame(tokenFilter1, tokenFilter2);
assertSame(tokenFilter2, tokenFilter1);
assertSame(tokenFilter2, tokenFilter0);
assertNotNull(tokenFilter2);

TokenFilter tokenFilter3 = tokenFilter2.includeProperty("start an array");
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeRawValue());
assertTrue(tokenFilter2.includeNull());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter2.toString());
assertTrue(tokenFilter2.includeBinary());
assertTrue(tokenFilter2.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter3.toString());
assertTrue(tokenFilter3.includeNull());
assertTrue(tokenFilter3.includeBinary());
assertTrue(tokenFilter3.includeRawValue());
assertSame(tokenFilter0, tokenFilter3);
assertSame(tokenFilter0, tokenFilter2);
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter1, tokenFilter0);
assertSame(tokenFilter1, tokenFilter3);
assertSame(tokenFilter1, tokenFilter2);
assertSame(tokenFilter2, tokenFilter1);
assertSame(tokenFilter2, tokenFilter3);
assertSame(tokenFilter2, tokenFilter0);
assertSame(tokenFilter3, tokenFilter1);
assertSame(tokenFilter3, tokenFilter0);
assertSame(tokenFilter3, tokenFilter2);
assertNotNull(tokenFilter3);

TokenFilter tokenFilter4 = tokenFilter3.includeProperty("start an array");
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeRawValue());
assertTrue(tokenFilter2.includeNull());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter2.toString());
assertTrue(tokenFilter2.includeBinary());
assertTrue(tokenFilter2.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter3.toString());
assertTrue(tokenFilter3.includeNull());
assertTrue(tokenFilter3.includeBinary());
assertTrue(tokenFilter3.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter4.toString());
assertTrue(tokenFilter4.includeNull());
assertTrue(tokenFilter4.includeBinary());
assertTrue(tokenFilter4.includeRawValue());
assertSame(tokenFilter0, tokenFilter4);
assertSame(tokenFilter0, tokenFilter3);
assertSame(tokenFilter0, tokenFilter2);
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter1, tokenFilter0);
assertSame(tokenFilter1, tokenFilter4);
assertSame(tokenFilter1, tokenFilter3);
assertSame(tokenFilter1, tokenFilter2);
assertSame(tokenFilter2, tokenFilter1);
assertSame(tokenFilter2, tokenFilter3);
assertSame(tokenFilter2, tokenFilter4);
assertSame(tokenFilter2, tokenFilter0);
assertSame(tokenFilter3, tokenFilter1);
assertSame(tokenFilter3, tokenFilter0);
assertSame(tokenFilter3, tokenFilter2);
assertSame(tokenFilter3, tokenFilter4);
assertSame(tokenFilter4, tokenFilter2);
assertSame(tokenFilter4, tokenFilter1);
assertSame(tokenFilter4, tokenFilter0);
assertSame(tokenFilter4, tokenFilter3);
assertNotNull(tokenFilter4);

StringReader stringReader0 = new StringReader("");
assertNotNull(stringReader0);

CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertNotNull(charsToNameCanonicalizer0);

ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 69, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertNull(readerBasedJsonParser0.getCurrentName());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isClosed());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
assertNull(readerBasedJsonParser0.getCurrentToken());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertFalse(readerBasedJsonParser0.hasCurrentToken());
assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertEquals(69, readerBasedJsonParser0.getFeatureMask());
assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertNotNull(readerBasedJsonParser0);

JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertNull(readerBasedJsonParser0.getCurrentName());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isClosed());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
assertNull(readerBasedJsonParser0.getCurrentToken());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertFalse(readerBasedJsonParser0.hasCurrentToken());
assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertEquals(69, readerBasedJsonParser0.getFeatureMask());
assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser1.isClosed());
assertFalse(readerBasedJsonParser1.hasTextCharacters());
assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
assertNull(readerBasedJsonParser1.getCurrentName());
assertFalse(readerBasedJsonParser1.hasCurrentToken());
assertNull(readerBasedJsonParser1.getLastClearedToken());
assertNull(readerBasedJsonParser1.getCurrentToken());
assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
assertFalse(readerBasedJsonParser1.requiresCustomCodec());
assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
assertEquals(69, readerBasedJsonParser1.getFeatureMask());
assertFalse(readerBasedJsonParser1.canReadTypeId());
assertFalse(readerBasedJsonParser1.canReadObjectId());
assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
assertNotNull(readerBasedJsonParser1);

FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser1, tokenFilter1, false, false);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeRawValue());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertNull(readerBasedJsonParser0.getCurrentName());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isClosed());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
assertNull(readerBasedJsonParser0.getCurrentToken());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertFalse(readerBasedJsonParser0.hasCurrentToken());
assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertEquals(69, readerBasedJsonParser0.getFeatureMask());
assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser1.isClosed());
assertFalse(readerBasedJsonParser1.hasTextCharacters());
assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
assertNull(readerBasedJsonParser1.getCurrentName());
assertFalse(readerBasedJsonParser1.hasCurrentToken());
assertNull(readerBasedJsonParser1.getLastClearedToken());
assertNull(readerBasedJsonParser1.getCurrentToken());
assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
assertFalse(readerBasedJsonParser1.requiresCustomCodec());
assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
assertEquals(69, readerBasedJsonParser1.getFeatureMask());
assertFalse(readerBasedJsonParser1.canReadTypeId());
assertFalse(readerBasedJsonParser1.canReadObjectId());
assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
assertFalse(filteringParserDelegate0.requiresCustomCodec());
assertNull(filteringParserDelegate0.getLastClearedToken());
assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
assertNull(filteringParserDelegate0.getCurrentToken());
assertFalse(filteringParserDelegate0.canReadTypeId());
assertEquals(0, filteringParserDelegate0.getMatchCount());
assertFalse(filteringParserDelegate0.canReadObjectId());
assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
assertEquals(69, filteringParserDelegate0.getFeatureMask());
assertFalse(filteringParserDelegate0.hasCurrentToken());
assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
assertEquals(0, filteringParserDelegate0.getFormatFeatures());
assertNotNull(filteringParserDelegate0);

FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter4, false, false);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertFalse(filteringParserDelegate1.equals((Object)filteringParserDelegate0));
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeRawValue());
assertTrue(tokenFilter2.includeNull());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter2.toString());
assertTrue(tokenFilter2.includeBinary());
assertTrue(tokenFilter2.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter3.toString());
assertTrue(tokenFilter3.includeNull());
assertTrue(tokenFilter3.includeBinary());
assertTrue(tokenFilter3.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter4.toString());
assertTrue(tokenFilter4.includeNull());
assertTrue(tokenFilter4.includeBinary());
assertTrue(tokenFilter4.includeRawValue());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertNull(readerBasedJsonParser0.getCurrentName());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isClosed());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
assertNull(readerBasedJsonParser0.getCurrentToken());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertFalse(readerBasedJsonParser0.hasCurrentToken());
assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertEquals(69, readerBasedJsonParser0.getFeatureMask());
assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser1.isClosed());
assertFalse(readerBasedJsonParser1.hasTextCharacters());
assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
assertNull(readerBasedJsonParser1.getCurrentName());
assertFalse(readerBasedJsonParser1.hasCurrentToken());
assertNull(readerBasedJsonParser1.getLastClearedToken());
assertNull(readerBasedJsonParser1.getCurrentToken());
assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
assertFalse(readerBasedJsonParser1.requiresCustomCodec());
assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
assertEquals(69, readerBasedJsonParser1.getFeatureMask());
assertFalse(readerBasedJsonParser1.canReadTypeId());
assertFalse(readerBasedJsonParser1.canReadObjectId());
assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
assertFalse(filteringParserDelegate0.requiresCustomCodec());
assertNull(filteringParserDelegate0.getLastClearedToken());
assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
assertNull(filteringParserDelegate0.getCurrentToken());
assertFalse(filteringParserDelegate0.canReadTypeId());
assertEquals(0, filteringParserDelegate0.getMatchCount());
assertFalse(filteringParserDelegate0.canReadObjectId());
assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
assertEquals(69, filteringParserDelegate0.getFeatureMask());
assertFalse(filteringParserDelegate0.hasCurrentToken());
assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
assertEquals(0, filteringParserDelegate0.getFormatFeatures());
assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
assertFalse(filteringParserDelegate1.canReadObjectId());
assertNull(filteringParserDelegate1.getLastClearedToken());
assertEquals(0, filteringParserDelegate1.getFormatFeatures());
assertEquals(69, filteringParserDelegate1.getFeatureMask());
assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
assertFalse(filteringParserDelegate1.requiresCustomCodec());
assertNull(filteringParserDelegate1.getCurrentToken());
assertFalse(filteringParserDelegate1.canReadTypeId());
assertEquals(0, filteringParserDelegate1.getMatchCount());
assertFalse(filteringParserDelegate1.hasCurrentToken());
assertNotNull(filteringParserDelegate1);

ObjectCodec objectCodec0 = filteringParserDelegate1.getCodec();
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertFalse(filteringParserDelegate0.equals((Object)filteringParserDelegate1));
assertFalse(filteringParserDelegate1.equals((Object)filteringParserDelegate0));
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeRawValue());
assertTrue(tokenFilter2.includeNull());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter2.toString());
assertTrue(tokenFilter2.includeBinary());
assertTrue(tokenFilter2.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter3.toString());
assertTrue(tokenFilter3.includeNull());
assertTrue(tokenFilter3.includeBinary());
assertTrue(tokenFilter3.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter4.toString());
assertTrue(tokenFilter4.includeNull());
assertTrue(tokenFilter4.includeBinary());
assertTrue(tokenFilter4.includeRawValue());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertNull(readerBasedJsonParser0.getCurrentName());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isClosed());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
assertNull(readerBasedJsonParser0.getCurrentToken());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertFalse(readerBasedJsonParser0.hasCurrentToken());
assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertEquals(69, readerBasedJsonParser0.getFeatureMask());
assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser1.isClosed());
assertFalse(readerBasedJsonParser1.hasTextCharacters());
assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
assertNull(readerBasedJsonParser1.getCurrentName());
assertFalse(readerBasedJsonParser1.hasCurrentToken());
assertNull(readerBasedJsonParser1.getLastClearedToken());
assertNull(readerBasedJsonParser1.getCurrentToken());
assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
assertFalse(readerBasedJsonParser1.requiresCustomCodec());
assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
assertEquals(69, readerBasedJsonParser1.getFeatureMask());
assertFalse(readerBasedJsonParser1.canReadTypeId());
assertFalse(readerBasedJsonParser1.canReadObjectId());
assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
assertFalse(filteringParserDelegate0.requiresCustomCodec());
assertNull(filteringParserDelegate0.getLastClearedToken());
assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
assertNull(filteringParserDelegate0.getCurrentToken());
assertFalse(filteringParserDelegate0.canReadTypeId());
assertEquals(0, filteringParserDelegate0.getMatchCount());
assertFalse(filteringParserDelegate0.canReadObjectId());
assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
assertEquals(69, filteringParserDelegate0.getFeatureMask());
assertFalse(filteringParserDelegate0.hasCurrentToken());
assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
assertEquals(0, filteringParserDelegate0.getFormatFeatures());
assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
assertFalse(filteringParserDelegate1.canReadObjectId());
assertNull(filteringParserDelegate1.getLastClearedToken());
assertEquals(0, filteringParserDelegate1.getFormatFeatures());
assertEquals(69, filteringParserDelegate1.getFeatureMask());
assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
assertFalse(filteringParserDelegate1.requiresCustomCodec());
assertNull(filteringParserDelegate1.getCurrentToken());
assertFalse(filteringParserDelegate1.canReadTypeId());
assertEquals(0, filteringParserDelegate1.getMatchCount());
assertFalse(filteringParserDelegate1.hasCurrentToken());
assertSame(tokenFilter0, tokenFilter4);
assertSame(tokenFilter0, tokenFilter3);
assertSame(tokenFilter0, tokenFilter2);
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter1, tokenFilter0);
assertSame(tokenFilter1, tokenFilter4);
assertSame(tokenFilter1, tokenFilter3);
assertSame(tokenFilter1, tokenFilter2);
assertSame(tokenFilter2, tokenFilter1);
assertSame(tokenFilter2, tokenFilter3);
assertSame(tokenFilter2, tokenFilter4);
assertSame(tokenFilter2, tokenFilter0);
assertSame(tokenFilter3, tokenFilter1);
assertSame(tokenFilter3, tokenFilter0);
assertSame(tokenFilter3, tokenFilter2);
assertSame(tokenFilter3, tokenFilter4);
assertSame(tokenFilter4, tokenFilter2);
assertSame(tokenFilter4, tokenFilter1);
assertSame(tokenFilter4, tokenFilter0);
assertSame(tokenFilter4, tokenFilter3);
assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
assertNotSame(filteringParserDelegate0, filteringParserDelegate1);
assertNotSame(filteringParserDelegate1, filteringParserDelegate0);
assertNull(objectCodec0);

UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2629), (ObjectCodec) null, mockFileOutputStream0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertFalse(uTF8JsonGenerator0.isClosed());
assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertEquals((-2629), uTF8JsonGenerator0.getFeatureMask());
assertFalse(fileDescriptor0.valid());
assertNotNull(uTF8JsonGenerator0);

uTF8JsonGenerator0.writeStartObject();
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertFalse(uTF8JsonGenerator0.isClosed());
assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertEquals((-2629), uTF8JsonGenerator0.getFeatureMask());
assertFalse(fileDescriptor0.valid());

UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, mockFileOutputStream0);

[MASTER] 23:08:39.605 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_297_tmp__ESTest.test0(UTF8JsonGenerator_297_tmp__ESTest.java:56)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:08:39.606 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertNotNull(iOContext0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte) (-126);
byteArray0[1] = (byte)0;
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, (OutputStream) null, byteArray0, (-376), false);
assertEquals(3, byteArray0.length);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(uTF8JsonGenerator0.isClosed());
assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertEquals((-376), uTF8JsonGenerator0.getOutputBuffered());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertEquals(11, uTF8JsonGenerator0.getFeatureMask());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertNotNull(uTF8JsonGenerator0);
assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0}, byteArray0);

uTF8JsonGenerator0.writeStartArray();

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'UTF8JsonGenerator_ESTest' to results/JacksonCore-17/com.fasterxml.jackson.core.json.UTF8JsonGenerator/BBC-F0-50/tests/4
* Done!

* Computation finished
