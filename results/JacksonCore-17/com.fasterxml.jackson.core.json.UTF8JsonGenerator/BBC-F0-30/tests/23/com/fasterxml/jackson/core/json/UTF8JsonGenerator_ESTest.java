/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:17:25 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeStartArray(3);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 2, 0);
      uTF8JsonGenerator0.writeRaw('J');
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 0);
      byteArrayBuilder1.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, true);
      byteArrayBuilder1.getCurrentSegment();
      uTF8JsonGenerator0.writeString("Unexpet^@ $addi'] charact~r ('");
      uTF8JsonGenerator0.writeRaw('\u0080');
      uTF8JsonGenerator0.writeNumber((long) 2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("&(w]]*^z", "&(w]]*^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte)0;
      mockPrintStream0.print((double) 1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[1] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2507, (ObjectCodec) null, mockPrintStream0, byteArray0, 2507, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)9;
      uTF8JsonGenerator0.writeBinary(byteArray1);
      uTF8JsonGenerator0.writeString("&(w]]*^z");
      uTF8JsonGenerator0.writeNumber(1L);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2507, (ObjectCodec) null, mockPrintStream0, byteArray0, 2507, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0._verifyValueWrite("8&w]]*p^z");
      SerializedString serializedString0 = new SerializedString("8&w]]*p^z");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1417, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      filteringGeneratorDelegate0.writeRaw((SerializableString) serializedString0);
      jsonGenerator0.writeStartObject((Object) null);
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale locale0 = Locale.JAPAN;
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, true);
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'G';
      byteArrayBuilder0.toByteArray();
      charArray0[2] = 'E';
      charArray0[3] = '\\';
      charArray0[4] = 'G';
      charArray0[5] = 'D';
      charArray0[6] = 'P';
      uTF8JsonGenerator0.writeString(charArray0, 3, 1);
      uTF8JsonGenerator0.writeRaw('$');
      String string0 = "com.fasterxml.jackson.core.util.VersionUtil";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("com.fasterxml.jackson.core.util.VersionUtil", "expected a digit for number exponent", true, 'G', 25);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 36)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value", "write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2405), (ObjectCodec) null, mockPrintStream0, byteArray0, 2305, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeString(charArray0, 2, (-5516));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      filteringGeneratorDelegate0.writeRaw((SerializableString) serializedString1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator1 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      jsonGenerator1.writeNumber((-1.0));
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte byte0 = (byte) (-1);
      byte byte1 = (byte)0;
      String string0 = "8&w]]*p^z";
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte)0;
      mockPrintStream0.print((double) 1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2507, (ObjectCodec) null, mockPrintStream0, byteArray0, 2507, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      boolean boolean1 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, fileSystemHandling0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 72, true);
      String string1 = "8rn(+zZ\"|c^%";
      uTF8JsonGenerator1.writeString("8rn(+zZ\"|c^%");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, true, false);
      filteringParserDelegate0.getCodec();
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2579), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeStartArray(2);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 512);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      filteringGeneratorDelegate0.writeRaw((SerializableString) serializedString1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      uTF8JsonGenerator0.writeFieldName("B\"d5>cPyo+\".meck;");
      uTF8JsonGenerator0._verifyValueWrite("B\"d5>cPyo+\".meck;");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      String string0 = "MQ";
      uTF8JsonGenerator0.writeStartArray(3);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("MQ", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator1 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(jsonGenerator1, tokenFilter0, false, false);
      uTF8JsonGenerator0.writeFieldName("8&w]]*p^z");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeStartArray(3);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 56320);
      SerializedString serializedString0 = new SerializedString("");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString1 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 0, 279);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder((BufferRecycler) null, 0);
      byteArrayBuilder1.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1235, false);
      byteArrayBuilder1.finishCurrentSegment();
      byte[] byteArray1 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[6];
      charArray0[3] = 'w';
      uTF8JsonGenerator0.writeNumber(861);
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 3326, 3326);
      uTF8JsonGenerator0.writeRaw('9');
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1417, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      filteringGeneratorDelegate0.writeRaw((SerializableString) serializedString0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator1 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(jsonGenerator1, tokenFilter0, false, false);
      uTF8JsonGenerator0.writeFieldName("8&w]]*p^z");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeStartArray(3);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 56320);
      SerializedString serializedString0 = new SerializedString("");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("", byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Random.setNextRandom(6);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.lookup(linkedList0, list0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)116;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 27, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 27, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("");
      serializedString1.asQuotedChars();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      SerializedString serializedString2 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString2);
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)17;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 288, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)17, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeNumber("nYW`(0AK.f2<");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value", "write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2405), (ObjectCodec) null, mockPrintStream0, byteArray0, 2305, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeString(charArray0, 2, (-5516));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 57343);
      uTF8JsonGenerator0.writeStartObject((Object) pushbackInputStream0);
      uTF8JsonGenerator0.writeEndObject();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1466, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = locale0.stripExtensions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale1, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      IOContext iOContext2 = new IOContext(bufferRecycler1, iOContext0, false);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 8, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeFieldName("(_a%cz");
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 1;
      intArray0[2] = (-1022);
      intArray0[3] = 0;
      intArray0[4] = 3;
      uTF8JsonGenerator0.writeArray(intArray0, 3, 2);
      uTF8JsonGenerator0.writeNumber((short)110);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      byteArrayBuilder0.setCurrentSegmentLength(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1217, true);
      bufferRecycler0.allocByteBuffer(2);
      byte[] byteArray1 = byteArrayBuilder0.finishCurrentSegment();
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[4] = 'Q';
      charArray0[2] = 'Q';
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeRaw('s');
      uTF8JsonGenerator0.writeBinary(byteArray1);
      uTF8JsonGenerator0.writeString("H+!t|~,2K2");
      uTF8JsonGenerator0.writeNumber(9223372036854775807L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byteArrayBuilder0.release();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 57);
      byteArrayBuilder1.finishCurrentSegment();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder2 = new ByteArrayBuilder(bufferRecycler1);
      byteArrayBuilder2.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder1.NO_BYTES, 155, true);
      String string0 = "";
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, false);
      filteringGeneratorDelegate0.getCodec();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 56320;
      longArray0[6] = (long) 2;
      longArray0[7] = (long) 3;
      longArray0[8] = (long) 57;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(longArray0, 3, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      String string0 = "";
      uTF8JsonGenerator0.writeStartArray(2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale locale0 = Locale.JAPAN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeStartObject((Object) null);
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartArray(3);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 56320);
      SerializedString serializedString0 = new SerializedString("");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 7992, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder((BufferRecycler) null, 0);
      byteArrayBuilder1.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1235, false);
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.write(byteArray0);
      byte[] byteArray1 = byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("UL>e;T");
      uTF8JsonGenerator0.writeNumber(52);
      uTF8JsonGenerator0.writeBinary(byteArray1);
      // Undeclared exception!
      try { 
        iOContext0.releaseWriteEncodingBuffer(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.writeStartArray(3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._verifyValueWrite("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not , expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder((BufferRecycler) null, 0);
      byteArrayBuilder1.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1235, false);
      byteArrayBuilder1.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("l)uJ?4x$ _MF];%H");
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = '\u008A';
      charArray0[3] = '\u008A';
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
      uTF8JsonGenerator0.writeRaw('<');
      uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("wt raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 126, (ObjectCodec) null, mockPrintStream0);
      iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0.writeFieldName("Hn");
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2493, (ObjectCodec) null, mockPrintStream0, byteArray0, 2493, true);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 4, (byte)0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal(3);
      uTF8JsonGenerator0.writeFieldName("8&w]]*p^z");
      System.setCurrentTimeMillis(56319);
      uTF8JsonGenerator0.writeNumber(2147483647L);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.constructTextBuffer();
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeStartArray(114);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 92);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2801, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-1434), false);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(108);
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray1 = new byte[14];
      mockFile0.setExecutable(false);
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 1697, 1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      iOContext1.releaseReadIOBuffer(byteArray0);
      uTF8JsonGenerator0.writeNumber(2147483647L);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-7);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)11, 869);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(493);
      byteArrayBuilder0.release();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byte byte0 = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 11, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2493, (ObjectCodec) null, mockPrintStream0, byteArray0, 2493, true);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 4, (byte)0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal(3);
      uTF8JsonGenerator0.writeNumber((int) (byte)51);
      uTF8JsonGenerator0.writeFieldName("8&w]]*p^z");
      int int0 = (-504);
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = '=';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2493, (ObjectCodec) null, mockPrintStream0, byteArray0, 2493, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigDecimal bigDecimal0 = new BigDecimal(3);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-1));
      uTF8JsonGenerator0.writeFieldName(" in character escape sequence");
      try { 
        uTF8JsonGenerator0._writePPFieldName("YTd");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      String string0 = "";
      uTF8JsonGenerator0.writeStartArray(3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-304), (ObjectCodec) null, mockPrintStream0, byteArray0, 61, true);
      BigDecimal bigDecimal0 = new BigDecimal((-623L));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, (-304), 0);
      float float0 = 1119.4835F;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2567), 0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      byte[] byteArray1 = new byte[2];
      byteArray0[0] = (byte) (-42);
      byteArray1[1] = (byte)1;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, bufferedInputStream0, byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      String string0 = "";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1748, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2041, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(57343);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)127;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)127, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) pushbackInputStream0, (-3642));
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 56319);
      SerializedString serializedString0 = new SerializedString("Kokk5L`}S ");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("wt rwvalue");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-965), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(125);
      byteArrayBuilder0.getCurrentSegment();
      uTF8JsonGenerator0.writeString("Unexpected padding character ('");
      uTF8JsonGenerator0.writeRaw('8');
      uTF8JsonGenerator0.writeString("Unexpected padding character ('");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-48);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale locale0 = Locale.JAPAN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, true);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 3, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeStartObject((Object) null);
      char[] charArray0 = new char[0];
      byteArrayBuilder0.append(111);
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 784);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw('C');
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeString("write a boolean value");
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2048, (ObjectCodec) null, mockPrintStream0, byteArray0, 2048, true);
      uTF8JsonGenerator0.writeStartArray();
      BigDecimal bigDecimal0 = new BigDecimal(3);
      uTF8JsonGenerator0.writeNumber((int) (byte)48);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("8&w]]*p^z", (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 17, (ObjectCodec) null, mockPrintStream0, byteArray0, 255, true);
      int int0 = 939;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) null, 939);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2493, (ObjectCodec) null, mockPrintStream0, byteArray0, 2493, true);
      uTF8JsonGenerator0.writeStartArray();
      BigDecimal bigDecimal0 = new BigDecimal(3);
      uTF8JsonGenerator0.writeNumber((int) (byte)48);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("8&w]]*p^z", (byte)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      String string0 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2041, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName("");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("JSON");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale locale0 = Locale.JAPAN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeStartObject((Object) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      byteArrayBuilder0.setCurrentSegmentLength(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1235, true);
      byteArrayBuilder0.finishCurrentSegment();
      byte[] byteArray1 = byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("l)uJ?4x$ _MF];%H");
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      uTF8JsonGenerator0.writeRaw('s');
      uTF8JsonGenerator0.writeBinary(byteArray1);
      uTF8JsonGenerator0.writeString("H+!t|~,2K2");
      int int0 = 47;
      ByteArrayBuilder byteArrayBuilder1 = null;
      try {
        byteArrayBuilder1 = new ByteArrayBuilder((-909));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("&%4n", "u$}KUVj,p|/B.9");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 45, (ObjectCodec) null, mockPrintStream0, byteArray0, 17, false);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      uTF8JsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, (byte)61);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      iOContext1.allocReadIOBuffer(108);
      String string0 = "8&w]]*p^z";
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[14];
      mockFile0.setExecutable(false);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1697, 1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocReadIOBuffer(1);
      byteArrayOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(56320);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("wt raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 126, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 1291);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1291 bytes (out of 1291)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 104, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber((long) 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._writeBinary((Base64Variant) null, (InputStream) null, byteArrayBuilder0.NO_BYTES, 56320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString("}");
      byteArrayOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((-1127L));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      String string0 = "}";
      SerializedString serializedString0 = new SerializedString("}");
      byteArrayOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, byteArrayOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2268);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 3214);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      SerializedString serializedString2 = new SerializedString("n+'I~P#LOp3/(8");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3215, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber(1628.7222F);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString("}");
      byteArrayOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a raw (unencoded) value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value", "write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2405), (ObjectCodec) null, mockPrintStream0, byteArray0, 2305, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeString(charArray0, 2, (-5516));
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumberField("f7Lpv#M5rao&NJ_C", (-991.80792));
      uTF8JsonGenerator0.writeString("f7Lpv#M5rao&NJ_C");
      uTF8JsonGenerator0._verifyValueWrite("f7Lpv#M5rao&NJ_C");
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeString("f7Lpv#M5rao&NJ_C");
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("wt raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 126, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("Hn");
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      uTF8JsonGenerator0._verifyPrettyValueWrite("^kx85K>mvb(%0%t", (byte)0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      uTF8JsonGenerator0.writeRaw('9');
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("tcA");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = 1741;
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 1741);
      byteArrayBuilder1.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1741, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 127, false);
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.getCurrentSegment();
      uTF8JsonGenerator0.writeString("\ncXCRU^g5j");
      uTF8JsonGenerator0.writeStartObject((Object) "\ncXCRU^g5j");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-3415), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 719, (-304));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3415
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      byteArrayBuilder0.release();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-24);
      byte byte0 = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 128, false);
      byteArrayBuilder0.getCurrentSegment();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("ngtKjS,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1547), (ObjectCodec) null, byteArrayBuilder0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumberField("", (-1.0));
      uTF8JsonGenerator0.writeString("8&w]]*p^z");
      uTF8JsonGenerator0._verifyValueWrite("+{");
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.getOutputTarget();
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2493, (ObjectCodec) null, mockPrintStream0, byteArray0, 2493, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal(3);
      uTF8JsonGenerator0.writeNumber((int) (byte)48);
      uTF8JsonGenerator0.writeFieldName("8&w]]*p^z");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-504), (ObjectCodec) null, mockPrintStream0, byteArray0, (-3626), true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value", "write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[6];
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext2 = new IOContext(bufferRecycler1, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator1.writeRaw('\"');
      SerializedString serializedString0 = new SerializedString("write raw value");
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 41, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2041, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      String string0 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler1, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-1923), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.writeString((String) null);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1774), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber((float) 57343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1774
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString1 = new SerializedString("}");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((-1127L));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((-4912L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName("v% 3@i:Ij?'");
      uTF8JsonGenerator0.writeNumber((short)33);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      System.setCurrentTimeMillis(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 55296, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeObjectFieldStart("write raw value");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString1 = new SerializedString("}");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((-1127L));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      System.setCurrentTimeMillis(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("LSH:?_Vfy/Zt<V");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder((BufferRecycler) null, 0);
      byteArrayBuilder1.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1235, false);
      byteArrayBuilder1.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("l)uJ?4x$ _MF];%H");
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'w';
      charArray0[3] = 'w';
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((-3204.0F));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArray0[5] = (byte) (-7);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      SerializedString serializedString0 = new SerializedString("=_zbGQl')tg%T$L^04l");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      byte[] byteArray1 = new byte[11];
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      serializedString1.asQuotedUTF8();
      byteArray1[1] = (byte) (-7);
      byteArray1[2] = (byte)35;
      byteArray1[3] = (byte)34;
      byteArray1[4] = (byte)127;
      byteArray1[5] = (byte) (-7);
      byteArray1[6] = (byte)11;
      byteArray1[7] = (byte)11;
      byteArray1[8] = (byte) (-7);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      System.setCurrentTimeMillis(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-1406));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 1741);
      byteArrayBuilder1.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1741, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 127, false);
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.getCurrentSegment();
      uTF8JsonGenerator0.writeString("\ncXCRU^g5j");
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayBuilder1, true);
      uTF8JsonGenerator0.writeStartObject((Object) "\ncXCRU^g5j");
      uTF8JsonGenerator0.writeEndObject();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1741, (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = new SerializedString("write a boolean value");
      SerializedString serializedString1 = new SerializedString("write a boolean value");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2581), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((short)110);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)96;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1216, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      String string0 = " bytes (out of ";
      try { 
        uTF8JsonGenerator0.writeRaw(" bytes (out of ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2034);
      byteArrayBuilder0.release();
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1903, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1903, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeStartObject(object0);
      try { 
        uTF8JsonGenerator0.writeNumber(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)3;
      byteArray0[1] = (byte)125;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator1.writeRaw("No FormatFeatures defined for parser of type ");
      uTF8JsonGenerator1._verifyValueWrite((String) null);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator1.writeFieldName("H^.Jm*`$*J");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      System.setCurrentTimeMillis(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-6), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, 134);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      byteArrayBuilder0.release();
      IOContext iOContext3 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 1859, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 61, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SerializedString serializedString1 = new SerializedString("v");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 192, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write raw value");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)54;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)86;
      byteArray1[1] = (byte)96;
      byteArray1[2] = (byte)86;
      byteArray1[3] = (byte)96;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("write raw value");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "Can not write a field name, expecting a value");
      byteArray1[4] = (byte)3;
      byteArray1[5] = (byte)86;
      byteArray1[6] = (byte) (-94);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2265, (ObjectCodec) null, mockPrintStream0, byteArray1, (byte) (-94), true);
      uTF8JsonGenerator0.close();
      String string0 = "No FormatFeatures defined for parser of type ";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("write raw value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-304), (ObjectCodec) null, mockPrintStream0, byteArray0, 61, true);
      BigDecimal bigDecimal0 = new BigDecimal((-623L));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, (-304), 0);
      float float0 = 1119.4835F;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2567), 0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-42);
      byteArray1[1] = (byte)1;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, bufferedInputStream0, byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "write raw value";
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)3;
      byteArray0[1] = (byte)125;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator1.writeRaw("No FormatFeatures defined for parser of type ");
      uTF8JsonGenerator1.writeFieldName("10w");
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("string value", "string value", true, 'f', (byte)96);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 12)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder((BufferRecycler) null, 0);
      byteArrayBuilder1.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1235, true);
      byteArrayBuilder1.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("l)uJ?4x$ _MF];%H");
      uTF8JsonGenerator0.writeString("Unexpected padding character ('");
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("~5[m}VknCPR6pg");
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)3;
      byteArray0[3] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator1.writeRaw("No FormatFeatures defined for parser of type ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator1.writeFieldName("write raw value");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-304), (ObjectCodec) null, mockPrintStream0, byteArray0, 61, true);
      BigDecimal bigDecimal0 = new BigDecimal((-623L));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, (-304), 0);
      uTF8JsonGenerator0.writeNumber(1119.4835F);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value");
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      StringReader stringReader0 = new StringReader("u,}q,");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.close();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 8, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-148), 2122, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2955, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1006), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1006
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value", "write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2405), (ObjectCodec) null, mockPrintStream0, byteArray0, 2305, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      uTF8JsonGenerator0.writeString(charArray0, 2, (-5516));
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 606, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName("}j>J-1sB;#9,~%wIx=");
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      uTF8JsonGenerator0._verifyPrettyValueWrite("^kx85K>mvb(%0%t", (byte)0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray1, (-1150), (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1134);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3116, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0._releaseBuffers();
      BigDecimal bigDecimal0 = new BigDecimal((double) 55296);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)40;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
      String string0 = "~!?uX9!NZ+1Ff9Z6|a]";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("~!?uX9!NZ+1Ff9Z6|a]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "write raw value";
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      uTF8JsonGenerator0._verifyValueWrite("write raw value");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 1, 1726);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      uTF8JsonGenerator0._verifyPrettyValueWrite("^kx85K>mvb(%0%t", (byte)0);
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeString((String) null);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[0] = (byte) (-48);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal(425.035);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-304), (ObjectCodec) null, mockPrintStream0, byteArray0, 61, true);
      uTF8JsonGenerator0.writeRaw('o');
      int int0 = GeneratorBase.SURR2_LAST;
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-304), (ObjectCodec) null, mockPrintStream0, byteArray0, 61, true);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, (-304), 0);
      uTF8JsonGenerator0.writeNumber(1119.4835F);
      uTF8JsonGenerator0.writeRaw('}');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 61, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-304), (ObjectCodec) null, mockPrintStream0, byteArray0, 61, true);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, (-304), 0);
      uTF8JsonGenerator0.writeNumber(1119.4835F);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 1, (-700));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 26, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 4158, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-2126L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1134);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3116, (ObjectCodec) null, byteArrayOutputStream0);
      String string0 = "";
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("Can not write a field name, expecting a value");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      boolean boolean1 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 606, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRaw('`');
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFile mockFile0 = new MockFile("8&w]]*p^z", "8&w]]*p^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2493, (ObjectCodec) null, mockPrintStream0, byteArray0, 2493, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal(0.8);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((short) (byte)53);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(0.8);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      int int0 = 2047;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 23, false);
      char char0 = '>';
      char char1 = 'Y';
      char[] charArray0 = new char[7];
      byteArrayOutputStream0.close();
      charArray0[0] = '>';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 606, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder((BufferRecycler) null, 0);
      byteArrayBuilder1.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1235, true);
      byteArrayBuilder1.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("l)uJ?4x$ _MF];%H");
      uTF8JsonGenerator0.writeString("Unexpected padding character ('");
      uTF8JsonGenerator0.writeRaw('');
      int int0 = 35;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("l)uJ?4x$ _MF];%H", "com.fasterxml.jackson.core.util.ByteArrayBuilder", true, 'w', 35);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 48)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 606, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeFieldName("}j>J-1sB;#9,~%wIx=");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArray0[0] = (byte) (-7);
      byteArray0[4] = (byte)0;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayOutputStream0.writeTo(byteArrayBuilder0);
      byteArray0[5] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)11;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      byteArray1[1] = (byte) (-7);
      byteArray1[2] = (byte)35;
      byteArray1[3] = (byte)127;
      byteArray1[4] = (byte)127;
      byteArray1[5] = (byte) (-7);
      byteArray1[6] = (byte)11;
      byteArray1[7] = (byte)11;
      byteArray1[8] = (byte) (-7);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 1, 1);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName(", expecting field name");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2034);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1903, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1903, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = '&';
      charArray0[4] = '4';
      charArray0[5] = 'l';
      charArray0[6] = 'l';
      charArray0[7] = 'l';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-2), 2045);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "write raw value";
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, mockPrintStream0, byteArray0, 35, true);
      uTF8JsonGenerator0.writeNumber(1);
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 4163, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4163
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      byteArrayBuilder0.write(35);
      byteArrayBuilder0.finishCurrentSegment();
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = 'S';
      charArray0[4] = '_';
      charArray0[5] = '_';
      byteArrayBuilder0.append(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 266, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray1 = new byte[2];
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.release();
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-84);
      byteArray2[1] = (byte) (-84);
      byteArray2[2] = (byte)32;
      byteArray2[3] = (byte) (-84);
      byteArray2[4] = (byte) (-84);
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte)32;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, byteArrayBuilder0, byteArray2, 1114111, false);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-84);
      byteArray3[1] = (byte) (-84);
      byteArray3[2] = (byte)53;
      byteArray3[3] = (byte)32;
      byteArray3[4] = (byte) (-84);
      byteArray3[5] = (byte) (-84);
      byteArray3[6] = (byte)32;
      byteArray3[7] = (byte) (-1);
      byteArray3[8] = (byte) (-1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray3, (-2880), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArray0[0] = (byte) (-48);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal(425.035);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.release();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      IOContext iOContext3 = new IOContext(bufferRecycler0, iOContext2, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext4 = new IOContext(bufferRecycler1, iOContext2, true);
      iOContext3.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext4, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder1.NO_BYTES, 1054, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext3, 3, (ObjectCodec) null, byteArrayBuilder1);
      uTF8JsonGenerator1.writeNumber(0L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "&^";
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      iOContext0.allocReadIOBuffer(97);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 240, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      int int0 = GeneratorBase.SURR1_LAST;
      byte[] byteArray1 = new byte[4];
      byteArray1[1] = (byte)43;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 110, (byte)43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = "Illegal character (";
      StringReader stringReader0 = new StringReader("Illegal character (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4113), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 1, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      filteringParserDelegate0.getTokenLocation();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.setCurrentValue((Object) null);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 128, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 3);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = 'w';
      charArray0[4] = '^';
      charArray0[5] = '>';
      charArray0[6] = 'Y';
      charArray0[7] = 'w';
      charArray0[8] = '>';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2047, 125);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "18D%T49M^uL", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext2.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 110, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeString("/q>uH");
      uTF8JsonGenerator0.writeNumber(0.0F);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("n[}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      iOContext1.allocReadIOBuffer(590);
      byteArrayBuilder0.toByteArray();
      iOContext1.allocWriteEncodingBuffer(1);
      int int0 = (-604);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1108), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-604), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -604
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2047, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = '>';
      charArray0[2] = 'Y';
      charArray0[3] = 'w';
      charArray0[4] = 'Y';
      charArray0[5] = 'w';
      charArray0[6] = 'w';
      charArray0[7] = 'Y';
      uTF8JsonGenerator0.writeString(charArray0, 224, (-1516));
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((-1.0F));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1282, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder((BufferRecycler) null, 0);
      byteArrayBuilder1.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1235, true);
      byteArrayBuilder1.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("l)uJ?4x$ _MF];%H");
      uTF8JsonGenerator0.writeString("Unexpected padding character ('");
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("~5[m}VknCPR6pg");
      uTF8JsonGenerator0.writeNumber((float) 1235);
      uTF8JsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      byteArrayOutputStream0.write(3);
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      charArray0[6] = 'Y';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 46, 97);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      mockFile0.mkdir();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-304), (ObjectCodec) null, mockPrintStream0, byteArray0, 61, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("write raw value");
      mockFile0.setExecutable(false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = '>';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 108, 11);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder((BufferRecycler) null, 0);
      byteArrayBuilder1.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1235, true);
      byteArrayBuilder1.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      String string0 = "l)uJ?4x$ _MF];%H";
      uTF8JsonGenerator0._verifyValueWrite("l)uJ?4x$ _MF];%H");
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'Y';
      charArray0[5] = 'w';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2034);
      boolean boolean0 = true;
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1903, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1903, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeStartObject(object0);
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.JsonLocation");
      uTF8JsonGenerator0.writeNumber((int) (byte)15);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 102, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1432, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 117, true);
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("f@%0");
      uTF8JsonGenerator0.writeString("f@%0");
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("f@%0");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader(") notWVALUE_STRING, can not access as binary");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('+');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocBase64Buffer();
      SerializedString serializedString0 = new SerializedString("2g`_&~%M");
      System.setCurrentTimeMillis((-1358L));
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "2g`_&~%M", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext2.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32767, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-6), false);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&^");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      iOContext1.allocReadIOBuffer(97);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 240, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("&^");
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("&^");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder((BufferRecycler) null, 0);
      byteArrayBuilder1.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1235, true);
      byteArrayBuilder1.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("l)uJ?4x$ _MF];%H");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumberField("f7Lpv#M5rao&NJ_C", (-991.8079218820741));
      uTF8JsonGenerator0._outputSurrogates(1, 57343);
      uTF8JsonGenerator0.writeString("f7Lpv#M5rao&NJ_C");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("f@%0");
      uTF8JsonGenerator0.writeString("Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      uTF8JsonGenerator0.getOutputTarget();
      try { 
        uTF8JsonGenerator0.writeFieldName("VALUE_NUMBER_FLOAT");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1432, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 117, true);
      byteArrayBuilder0.finishCurrentSegment();
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = 'S';
      charArray0[4] = '_';
      charArray0[5] = '_';
      uTF8JsonGenerator0.writeRaw(charArray0, 2, 1);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeRaw('_');
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocBase64Buffer();
      System.setCurrentTimeMillis(9223372036854775807L);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 55296, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 36, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(100);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 49, true);
      char[] charArray0 = new char[18];
      charArray0[0] = '6';
      charArray0[1] = 'I';
      charArray0[2] = 'x';
      charArray0[3] = ')';
      charArray0[4] = '_';
      charArray0[5] = '';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 7, 96);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder((BufferRecycler) null, 0);
      byteArrayBuilder1.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1318, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1206, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal(2859.92765);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('+');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)93;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)93, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte)93);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2047, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeRaw('+');
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2034);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1903, true);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.JsonLocation");
      uTF8JsonGenerator0.writeNumber(1903);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 2);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.JsonLocation");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeRaw('B');
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "18D%T49M^uL", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext2.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 110, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeString("/q>uH");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext2.allocBase64Buffer();
      uTF8JsonGenerator0._verifyValueWrite("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      uTF8JsonGenerator0.writeString("B\"d5>cPyo+\".meck;");
      uTF8JsonGenerator0.writeNumber(1106.7521673634642);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1903, true);
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("Internal error: total len assumed to be ");
      uTF8JsonGenerator0.writeString("3,");
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = '4';
      charArray0[3] = 'S';
      charArray0[4] = 'l';
      charArray0[5] = 'S';
      charArray0[6] = 'p';
      charArray0[7] = 'l';
      charArray0[8] = 'S';
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeString("");
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, mockFile0.length());
      
      uTF8JsonGenerator0.getOutputTarget();
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeNull();
      mockPrintStream0.print(0.0F);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1134);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3096, (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      uTF8JsonGenerator0.writeString((String) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 3096);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("write raw value");
      mockFile0.setReadable(true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)86;
      BigInteger bigInteger0 = BigInteger.TEN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)39, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'S';
      charArray0[2] = 'u';
      charArray0[3] = 'D';
      charArray0[4] = 'p';
      charArray0[5] = ':';
      charArray0[5] = 'l';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)86, (-941));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      iOContext1.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1570), (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2034);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('#');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      serializedString0.appendQuotedUTF8(byteArray1, 1209);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 1209, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("?");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1903, true);
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("Internal error: total len assumed to be ");
      uTF8JsonGenerator0.writeString("3,");
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("Internal error: total len assumed to be ");
      uTF8JsonGenerator0.writeStartArray();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", true, ']', 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2647, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = '&';
      charArray0[5] = 'X';
      charArray0[6] = 'X';
      charArray0[7] = ' ';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 495, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRaw('X');
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2034);
      CharsToNameCanonicalizer.createRoot();
      char char0 = 'f';
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder2 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-172), (ObjectCodec) null, byteArrayBuilder2, byteArrayBuilder1.NO_BYTES, (-1), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = iOContext1.allocReadIOBuffer(127);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 240, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeString("");
      serializedString0.appendQuotedUTF8(byteArray1, 58);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      byteArrayBuilder1.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 57, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      uTF8JsonGenerator0.writeString("S'F.LWoF(~X'/");
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1903, true);
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("Internal error: total len assumed to be ");
      uTF8JsonGenerator0.writeString("3,");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      uTF8JsonGenerator0.writeNumber(58);
      charArray0[1] = 'f';
      charArray0[2] = 'm';
      charArray0[3] = '>';
      charArray0[4] = 'Y';
      charArray0[5] = 'w';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 123, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 123
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BigInteger bigInteger0 = BigInteger.TEN;
      SerializedString serializedString0 = new SerializedString(">a/0Qv>PnGKv-a-mm");
      IOContext iOContext1 = new IOContext(bufferRecycler0, ">a/0Qv>PnGKv-a-mm", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 512, (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'S';
      charArray0[1] = 'Y';
      charArray0[2] = 'p';
      charArray0[3] = 'l';
      charArray0[4] = 'D';
      charArray0[5] = 'Y';
      charArray0[6] = 'D';
      charArray0[7] = 'S';
      charArray0[8] = 'Y';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 41, 2107);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, "", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-110);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext3 = new IOContext(bufferRecycler1, byteArrayInputStream0, false);
      IOContext iOContext4 = iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext4, 62, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0._verifyValueWrite("B\"d5>cPyo+\".meck;");
      uTF8JsonGenerator0.writeString("MFfV9z@[j0uF^*");
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(91);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)43;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, pipedOutputStream0, byteArray0, 102, false);
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      StringReader stringReader0 = new StringReader(";");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-712), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1514);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1432, (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 52, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MAX_VALUE, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber("write raw value");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("write raw value", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumberField("", (-991.8079218820741));
      uTF8JsonGenerator0._outputSurrogates(1, 57343);
      uTF8JsonGenerator0.writeString("f7Lpv#M5rao&NJ_C");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-86);
      serializedString0.appendQuotedUTF8(byteArray0, 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)17, 1142);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 164, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte) (-1), true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte) (-1));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1903, true);
      byte[] byteArray1 = byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.write(byteArray0);
      byte[] byteArray2 = byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("Internal error: total len assumed to be ");
      uTF8JsonGenerator0.writeNumber(1903);
      uTF8JsonGenerator0.writeBinary(byteArray2);
      int int0 = 1463;
      // Undeclared exception!
      try { 
        iOContext0.releaseWriteEncodingBuffer(byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-829), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator1.writeNumber(0L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray0, 56320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4000, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw("No FormatFeatures defined for parser of type ");
      uTF8JsonGenerator0.writeNumberField("{*]/X;8o", (-4500L));
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        iOContext0.releaseReadIOBuffer(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1134);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3096, (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 2622);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING, can not access as binary");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 909, 116, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-1000));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("write a raw (unencoded) value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumberField("", (-991.8079218820741));
      uTF8JsonGenerator0._outputSurrogates(1, 57343);
      uTF8JsonGenerator0.writeNumber("f7Lpv#M5rao&NJ_C");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("Can not write a field name, expecting a value", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext3 = new IOContext(bufferRecycler0, iOContext1, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext4, 1913, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeString("B\"d5>cPyo+\".meck;");
      uTF8JsonGenerator0._verifyValueWrite("B\"d5>cPyo+\".meck;");
      uTF8JsonGenerator0.writeString("A");
      uTF8JsonGenerator0.writeRaw(",FF~**.DxQkiRj$JK");
      uTF8JsonGenerator0.writeNumber((short)1000);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = iOContext1.allocReadIOBuffer(127);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 240, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      serializedString0.appendQuotedUTF8(byteArray1, 58);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)43;
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte) (-1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray2, 110, 2047);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1461);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1860, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Illegal character (code 0x", true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, (-1626), true);
      BigDecimal bigDecimal0 = new BigDecimal(1391.082602);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1626
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2485), (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2474), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1834, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("write raw value");
      mockFile0.setReadable(true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)86;
      BigInteger bigInteger0 = BigInteger.TEN;
      SerializedString serializedString0 = new SerializedString("write raw value");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)34, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'S';
      charArray0[2] = 'u';
      charArray0[3] = 'D';
      charArray0[4] = 'p';
      charArray0[5] = ':';
      charArray0[6] = 'l';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)86, (-941));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext3 = new IOContext(bufferRecycler0, iOContext1, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext4, 1913, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeString("B\"d5>cPyo+\".meck;");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext4, 93, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      System.setCurrentTimeMillis(4826L);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (-881));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      // Undeclared exception!
      uTF8JsonGenerator1.writeNumberField("'WmbAf", 0L);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_X");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("No native support for writing Type Ids");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(57343);
      byte[] byteArray1 = byteArrayBuilder0.finishCurrentSegment();
      byte[] byteArray2 = iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0._verifyValueWrite("f7Lpv#M5rao&NJ_X");
      uTF8JsonGenerator0.writeString("OrM7ye4ai&qiL(G~,/");
      uTF8JsonGenerator0.writeUTF8String(byteArray2, 1, 77);
      uTF8JsonGenerator0.writeBoolean(false);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = iOContext1.allocReadIOBuffer(127);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 231, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.toByteArray();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      serializedString0.appendQuotedUTF8(byteArray1, 58);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      char[] charArray0 = new char[6];
      byteArrayBuilder0.release();
      charArray0[0] = '5';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-645), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "f7Lpv#M5rao&NJ_C";
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      String string1 = "No native support for writing Type Ids";
      uTF8JsonGenerator0.writeNumberField("", (-982.646));
      uTF8JsonGenerator0._outputSurrogates(1, 57343);
      uTF8JsonGenerator0.writeNumber("No native support for writing Type Ids");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      byteArrayBuilder0.release();
      // Undeclared exception!
      try { 
        byteArrayBuilder0.finishCurrentSegment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(100);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      IOContext iOContext3 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext4.allocBase64Buffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, (-876));
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 48, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext3, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, (-3), false);
      SerializedString serializedString1 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-1);
      SerializedString serializedString0 = new SerializedString("start an array");
      System.setCurrentTimeMillis((byte)49);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 95, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 63, (byte)9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocBase64Buffer();
      SerializedString serializedString0 = new SerializedString("2g`_&~%M");
      System.setCurrentTimeMillis((-1344L));
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[3] = 'P';
      charArray0[4] = '3';
      uTF8JsonGenerator0.writeRaw("2g`_&~%M");
      uTF8JsonGenerator0.writeNumber((-4000));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 2, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = iOContext1.allocReadIOBuffer(127);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 240, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      serializedString0.appendQuotedUTF8(byteArray1, 58);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1211), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(13);
      byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 1799, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b|7Q!Y>=MVz0JL.+j");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 240, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[4];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("No native support for writing Type Ids");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-244));
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("V<u 6!Rx&=jvo");
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeBoolean(true);
      try { 
        uTF8JsonGenerator0._outputSurrogates(30, 97);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x1e, second 0x61
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1903, false);
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("Internal error: total len assumed to be ");
      uTF8JsonGenerator0.writeString("3,");
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("Internal error: total len assumed to be ");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2034);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1903, false);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.JsonLocation");
      uTF8JsonGenerator0.writeNumber(1903);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 604, 416);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(100);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      IOContext iOContext3 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext4.allocBase64Buffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, (-876));
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 48, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext4, 1911, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 61, false);
      uTF8JsonGenerator0.writeString("");
      System.setCurrentTimeMillis((-1970L));
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocBase64Buffer();
      String string0 = "2g`_&~%M";
      SerializedString serializedString0 = new SerializedString("2g`_&~%M");
      System.setCurrentTimeMillis((-1344L));
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'o';
      charArray0[3] = 'X';
      charArray0[4] = '3';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-142), 32768);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -142
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-+C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1730, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber("-+C");
      uTF8JsonGenerator0.writeNumberField("com.fasterxml.jackson.core.io.SerializedString", (long) 1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)5;
      // Undeclared exception!
      try { 
        iOContext0.releaseReadIOBuffer(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2034);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3847), (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 1024);
      StringReader stringReader0 = new StringReader("write a number");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 55296, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder2 = readerBasedJsonParser0._getByteArrayBuilder();
      byteArrayBuilder2.finishCurrentSegment();
      byteArrayBuilder1.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("write a number");
      uTF8JsonGenerator0.writeString("3,");
      uTF8JsonGenerator0.writeNumber(33);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1461);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1860, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Illegal character (code 0x", true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 406, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-304), (ObjectCodec) null, mockPrintStream0, byteArray0, 61, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw("Can not ");
      uTF8JsonGenerator0.writeNumber(1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (-1590));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value");
      byte[] byteArray0 = new byte[6];
      String string0 = "";
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 26, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)507);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "f7Lpv#M5rao&NJ_C";
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      String string1 = "No native support for writing Type Ids";
      uTF8JsonGenerator0._outputSurrogates(1, 57343);
      uTF8JsonGenerator0.writeNumber("No native support for writing Type Ids");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      byteArrayBuilder0.release();
      // Undeclared exception!
      try { 
        byteArrayBuilder0.finishCurrentSegment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2034);
      int int0 = 1903;
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1903, false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = '[';
      charArray0[2] = '^';
      charArray0[3] = 'o';
      charArray0[4] = '3';
      byteArrayBuilder0.reset();
      charArray0[5] = 'n';
      charArray0[6] = ' ';
      charArray0[7] = '5';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-1987), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1987
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)23;
      byteArray0[8] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2832, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      SerializedString serializedString0 = new SerializedString("<null>");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2034);
      byteArrayBuilder0.release();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3847), (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumberField("write a number", 0L);
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'P';
      charArray0[2] = '2';
      charArray0[3] = 'M';
      charArray0[4] = '-';
      uTF8JsonGenerator0.writeRaw(charArray0, (-3847), (-604));
      // Undeclared exception!
      try { 
        iOContext0.releaseReadIOBuffer(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 240, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      uTF8JsonGenerator0.writeNumberField("", bigDecimal0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = '';
      charArray0[2] = 'w';
      charArray0[3] = '_';
      uTF8JsonGenerator0._charBuffer = charArray0;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1461);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1860, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(61);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3273), (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 2, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(56319);
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(100);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      IOContext iOContext3 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext4.allocBase64Buffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, (-876));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 14, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 21, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext4, 100, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 4, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRaw("com.fasterxml.jackson.core.JsonLocation");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(100);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      IOContext iOContext3 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext4.allocBase64Buffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, (-876));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 742, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 84, false);
      uTF8JsonGenerator0.writeNumberField("", (long) 2);
      // Undeclared exception!
      try { 
        iOContext2.releaseReadIOBuffer(byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "write raw value";
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      int int0 = 61;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 19, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("write raw value");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, (-1626), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1626
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2034);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1903, false);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.JsonLocation");
      uTF8JsonGenerator0.writeNumber(1903);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 40, 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 240, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = '';
      charArray0[2] = 'w';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField("", (long) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-1);
      SerializedString serializedString0 = new SerializedString("start an array");
      System.setCurrentTimeMillis((byte)49);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 105, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(100);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      IOContext iOContext3 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext4.allocBase64Buffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, (-876));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 14, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 21, true);
      uTF8JsonGenerator0.writeNumberField("  ", 759L);
      // Undeclared exception!
      try { 
        iOContext0.releaseReadIOBuffer(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1461);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Illegal character (code 0x", true);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 4120, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("No native support for writing Type Ids");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-244));
      byteArrayBuilder0.resetAndGetFirstSegment();
      byteArrayBuilder0.finishCurrentSegment();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(1);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 806, (ObjectCodec) null, mockPrintStream0, byteArray0, 806, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("write raw value");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1461);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1860, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Illegal character (code 0x", true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeRaw("Illegal character (code 0x");
      assertEquals(26, uTF8JsonGenerator1.getOutputBuffered());
      
      BigDecimal bigDecimal0 = new BigDecimal((double) 1461);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      String string0 = "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate";
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 21, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 21, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("No native support for writing Type Ids");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-244));
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("V<u 6!Rx&=jvo");
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      iOContext1.allocReadIOBuffer(127);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 240, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-+z");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1730, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber("-+z");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 499);
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("3,");
      uTF8JsonGenerator0.writeString("-Infinity");
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("No native support for writing Type Ids");
      mockPrintStream0.flush();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      byteArrayBuilder0.setCurrentSegmentLength((-1023));
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("f7Lpv#M5rao&NJ_C");
      uTF8JsonGenerator0.writeString("OrM7ye4ai&qiL(G~,/");
      uTF8JsonGenerator0.writeRaw("No native support for writing Type Ids");
      uTF8JsonGenerator0.writeNumber((short) (byte) (-93));
      uTF8JsonGenerator0.writeRaw((char[]) null, (-1684), 0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2995, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber("");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      String string0 = "V<u 6!Rx&=jvo";
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte)9, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 55296, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      String string0 = "No native support for writing Type Ids";
      uTF8JsonGenerator0.writeNumber("No native support for writing Type Ids");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-244));
      byteArrayBuilder0.finishCurrentSegment();
      byte[] byteArray1 = byteArrayBuilder0.finishCurrentSegment();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      uTF8JsonGenerator0._verifyValueWrite("V<u 6!Rx&=jvo");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray1, 127, (-244));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      String string0 = "No native support for writing Type Ids";
      uTF8JsonGenerator0.writeNumber("No native support for writing Type Ids");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      int int0 = (-244);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-244));
      byteArrayBuilder0.finishCurrentSegment();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 2, 3097);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 22);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 21, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumberField("  ", (long) 3);
      // Undeclared exception!
      try { 
        iOContext0.releaseReadIOBuffer(byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("No native support for writing Type Ids");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("f7Lpv#M5rao&NJ_C");
      uTF8JsonGenerator0.writeString("OrM7ye4ai&qiL(G~,/");
      uTF8JsonGenerator0.writeRaw("No native support for writing Type Ids");
      uTF8JsonGenerator0.writeNumber((short) (byte) (-93));
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = '<';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 675, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      String string0 = "No native support for writing Type Ids";
      uTF8JsonGenerator0.writeNumber("No native support for writing Type Ids");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-244));
      byteArrayBuilder0.finishCurrentSegment();
      byte[] byteArray1 = byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("V<u 6!Rx&=jvo");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray1, 127, (-244));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)11;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1903, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1777, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField("", (long) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      SerializedString serializedString0 = new SerializedString("2g`_&~%M");
      System.setCurrentTimeMillis((-1344L));
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "2g`_&~%M", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext2.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32767, (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder1.NO_BYTES, (-6), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char char0 = 'w';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder0.NO_BYTES, 1128, false);
      uTF8JsonGenerator0.writeRaw("", 0, (-451));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("!RYQ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = '<';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      int int0 = 675;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 675, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      EvoSuiteFile evoSuiteFile0 = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("No native support for writing Type Ids");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-244));
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("V<u 6!Rx&=jvo");
      uTF8JsonGenerator0.writeString("was expecting comma to separate ");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-1), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      byteArrayBuilder0.finishCurrentSegment();
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._verifyValueWrite("C2<g1");
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("=LrJ `S9l");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write raw value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.getOutputTarget();
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("f7Lpv#M5rao&NJ_C");
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)57;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 240, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[4];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      charArray0[0] = '?';
      // Undeclared exception!
      try { 
        iOContext0.releaseReadIOBuffer(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      int int0 = 1903;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1903, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField("  ", (long) 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      int int0 = 3168;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3168);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2275), false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = '';
      charArray0[2] = 'w';
      charArray0[3] = '?';
      uTF8JsonGenerator0._charBuffer = charArray0;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 240, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = '';
      charArray0[2] = 'w';
      charArray0[3] = '_';
      uTF8JsonGenerator0._charBuffer = charArray0;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      assertArrayEquals(new byte[] {(byte)32, (byte)34}, byteArray0);
      assertEquals("\uFFFD\" \"", byteArrayOutputStream0.toString());
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(8);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder0.NO_BYTES, 4905, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 0, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 4905, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("Trying to release buffer not owned by the context");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("write a number", "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) iOContext1;
      objectArray0[2] = (Object) jsonEncoding0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "-7", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber(3);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = '<';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      int int0 = 675;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 675, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 1461;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1461);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1860, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      SerializedString serializedString0 = new SerializedString("AKJ\"@&Ma_ 3(");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 240, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      assertEquals(2, byteArrayOutputStream0.size());
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeRaw(", although was supposed to have one");
      assertArrayEquals(new byte[] {(byte)101, (byte)110}, byteArray0);
      assertEquals("\uFFFD\" \", although was supposed to have on", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-1);
      SerializedString serializedString0 = new SerializedString("start an array");
      System.setCurrentTimeMillis(5287L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 105, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-3844L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1461);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MIN_VALUE, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asUnquotedUTF8();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)113;
      MockPrintStream mockPrintStream0 = new MockPrintStream("f7Lpv#M5rao&NJ_C");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("f7Lpv#M5rao&NJ_C");
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)61;
      // Undeclared exception!
      try { 
        iOContext0.releaseReadIOBuffer(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)11;
      iOContext0.constructTextBuffer();
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)63, true);
      uTF8JsonGenerator0._verifyValueWrite("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "M#YUb'h}Te7bQ_-/", false);
      String string0 = "No native support for writing Type Ids";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("No native support for writing Type Ids");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 11, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)63, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 56320, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 240, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._outputSurrogates(240, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xf0, second 0x0
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = '<';
      charArray0[2] = ';';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 675, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Illegal character (code 0x");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1461);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 44, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3285), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1102, true);
      iOContext1.withEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 73, (ObjectCodec) null, (OutputStream) null, byteArray0, (-129), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -129
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 108, 97, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 240, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      int int0 = uTF8JsonGenerator0.getOutputBuffered();
      assertEquals(2, byteArrayOutputStream0.size());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)63, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 55296, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1068, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = '<';
      charArray0[2] = ';';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      int int0 = 78;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 78, (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 2, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1461);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Illegal character (code 0x");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "1bRDVnn";
      MockFile mockFile0 = new MockFile("1bRDVnn", "1bRDVnn");
      MockFile mockFile1 = new MockFile(mockFile0, "1bRDVnn");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('y');
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0, 1);
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, bufferedOutputStream0, (byte[]) null, (-460), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }
}
