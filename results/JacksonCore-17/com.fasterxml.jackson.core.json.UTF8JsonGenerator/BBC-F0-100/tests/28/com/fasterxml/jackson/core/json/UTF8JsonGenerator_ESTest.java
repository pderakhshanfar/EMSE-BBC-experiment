/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 18:32:54 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.nio.ByteBuffer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 359, false);
      SerializedString serializedString0 = new SerializedString("  ");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw('g');
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0._verifyValueWrite("  ");
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeRaw("  ", 3, (-2533));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._outputSurrogates(56320, 56320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ", false);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 0, 0);
      uTF8JsonGenerator0.writeNumber("~ ");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeString("~ ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ", false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 248, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 248, true);
      uTF8JsonGenerator0.writeStartArray();
      double[] doubleArray0 = new double[0];
      uTF8JsonGenerator0.writeArray(doubleArray0, 246, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'G';
      charArray0[2] = 'X';
      charArray0[3] = 'U';
      uTF8JsonGenerator0.writeString(charArray0, 49, 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-286), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 248, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 248, true);
      uTF8JsonGenerator0.writeNumber("  ");
      uTF8JsonGenerator0.writeStartObject();
      String string0 = "Infinity";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(" bytes (out of ", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 32768);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 335, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 890, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OJ9~{H^ ;KcOzxc{");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("OJ9~{H^ ;KcOzxc{");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockFileOutputStream0.close();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[0] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[0] = (byte)81;
      byteArray0[6] = (byte)81;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 35, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 8);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 3);
      uTF8JsonGenerator0.writeString("i;{V");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.checkError();
      StringReader stringReader0 = new StringReader("nL$$I");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("write a boolean value");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2511), 127, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1424, 8, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1573), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((long) (-2511));
      uTF8JsonGenerator0.writeNumberField("z\"u0-HC:%>b|YNA:", 1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("Too few bytes available: missing ");
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant(" ", "2y;jFk>", false, 'c', 72);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 7)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ", false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 248, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 248, true);
      uTF8JsonGenerator0.writeStartArray();
      double[] doubleArray0 = new double[0];
      uTF8JsonGenerator0.writeArray(doubleArray0, 246, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("UTF16_LE", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      SerializedString serializedString0 = new SerializedString("Can not write a field name, expecting a value");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.not();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jTbV");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jTbV");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[7] = (byte)81;
      byteArray0[6] = (byte)81;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 35, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber(0);
      File file0 = MockFile.createTempFile("jTbV", "jTbV");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 3460);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 3460 bytes (out of 3460)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.checkError();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) null;
      mockPrintStream0.format("nL$$I", objectArray0);
      Locale locale0 = Locale.FRANCE;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("XUsW>V5hf,f u_@");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 190, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-101);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 64, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 85, false);
      try { 
        uTF8JsonGenerator0.writeNumber("XUsW>V5hf,f u_@");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeNumberField(" zL?Zh{:O,{MQS", 10);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ", false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 248, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 248, true);
      uTF8JsonGenerator0.writeStartArray();
      double[] doubleArray0 = new double[0];
      uTF8JsonGenerator0.writeArray(doubleArray0, 246, 0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 248, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 248, true);
      uTF8JsonGenerator0.writeStartArray();
      double[] doubleArray0 = new double[0];
      uTF8JsonGenerator0.writeArray(doubleArray0, 246, 0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((-9.223372036854776E18));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "  ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      iOContext0.allocTokenBuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1399, false);
      uTF8JsonGenerator0._verifyValueWrite("  ");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.not();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[0];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ";duk?jN@", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 127, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("  ");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("/2$8!8_aHZ>JwY");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 3, true);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(1433L);
      String string0 = "line.separator";
      uTF8JsonGenerator0.writeNumberField("z\"u=0-HC:%>b|YNA:", 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("z\"u=0-HC:%>b|YNA:", (-1066));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      iOContext0.allocTokenBuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.setEncoding(jsonEncoding0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W=@eg/3x50$");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 514, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)6, false);
      uTF8JsonGenerator0._verifyPrettyValueWrite("Lk", 0);
      uTF8JsonGenerator0.writeString((String) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 200, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeNumberField("line.separator", (-1214));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      String string0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jTbV");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)81;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)81, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = '~';
      charArray0[2] = ';';
      charArray0[3] = 'H';
      SerializedString serializedString0 = new SerializedString("jTbV");
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2476);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      charArray0[4] = ';';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, (int) (byte)81);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.checkError();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) null;
      Locale locale0 = Locale.FRANCE;
      mockPrintStream0.format(locale0, "Ou<6^thQ}'yr28\u0000:", objectArray0);
      byte[] byteArray0 = new byte[3];
      MathContext mathContext0 = MathContext.DECIMAL32;
      mockFileOutputStream0.getChannel();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 47, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 47, false);
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K[@kbIO=lB`");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.checkError();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) null;
      Locale locale0 = Locale.FRANCE;
      mockPrintStream0.format(locale0, "Ou<6^thQ}'yr28\u0000:", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 942, (ObjectCodec) null, mockPrintStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, false, false);
      uTF8JsonGenerator0.writeNumberField("nL$$I", 6);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("D  ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = new SerializedString("D  ");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("jgB?RgW*~,EL$D");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[13];
      byte byte0 = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      char char0 = '}';
      uTF8JsonGenerator0.writeRaw(' ');
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBinaryField("2*qjn\"q(zy$h8", byteArray0);
      uTF8JsonGenerator0.writeNumber((short) (byte)49);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "  ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 359, false);
      SerializedString serializedString0 = new SerializedString("  ");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw('g');
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0._verifyValueWrite("  ");
      uTF8JsonGenerator0._verifyValueWrite("  ");
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeRaw("  ", 8, (-2533));
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1._outputSurrogates(48, 56320);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "Illegal white space character (code 0x", 112);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      uTF8JsonGenerator0.writeNumber((-3677L));
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.not();
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      mockFileOutputStream0.release();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNullField("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 55296);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = new SerializedString("&-o'Kh$IQr!E'p");
      char char0 = '&';
      uTF8JsonGenerator0.writeRaw('9');
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeBinaryField("2*qjn\"q(zy$h8", byteArray0);
      uTF8JsonGenerator0.writeNumber((short)65);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("&-o'Kh$IQr!E'p");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 672, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, true);
      uTF8JsonGenerator0.writeNumberField(" zL?DZh{:O,,;{MQS", 10);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, true);
      uTF8JsonGenerator0.writeNumberField(" zL?DZh{:O,,;{MQS", 10);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(" zL?DZh{:O,,;{MQS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.checkError();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) null;
      mockPrintStream0.format("nL$$I", objectArray0);
      Locale locale0 = Locale.FRANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeStartArray();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1837;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 57343;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      uTF8JsonGenerator0.writeArray(doubleArray0, 2169, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 47, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55296, false);
      uTF8JsonGenerator0.writeNumber(0L);
      SerializedString serializedString0 = new SerializedString("  ");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeNumber("");
      uTF8JsonGenerator1.writeStartObject();
      jsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 359, false);
      SerializedString serializedString0 = new SerializedString("  ");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw('g');
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0._verifyValueWrite("  ");
      uTF8JsonGenerator0._verifyValueWrite("  ");
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeRaw("  ", 8, (-2533));
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("  ");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "  ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 359, false);
      SerializedString serializedString0 = new SerializedString("  ");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-90);
      byteArray1[1] = (byte) (-90);
      byteArray1[2] = (byte) (-90);
      byteArray1[3] = (byte) (-90);
      byteArray1[4] = (byte) (-90);
      byteArray1[5] = (byte) (-90);
      byteArray1[6] = (byte) (-90);
      byteArray1[7] = (byte) (-90);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 47, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55296, false);
      uTF8JsonGenerator0.writeNumber(0L);
      SerializedString serializedString0 = new SerializedString("  ");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
      uTF8JsonGenerator1.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber((long) 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      uTF8JsonGenerator0.writeRaw(' ');
      uTF8JsonGenerator0._verifyValueWrite("  ");
      uTF8JsonGenerator0._releaseBuffers();
      mockFileOutputStream0.write(1564);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("1rM)GH[*<)!>[-G/It6", 1564, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0);
      MockFileOutputStream mockFileOutputStream1 = (MockFileOutputStream)uTF8JsonGenerator0.getOutputTarget();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)84;
      mockFileOutputStream1.write(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileOutputStream1, false);
      iOContext0.allocTokenBuffer(9);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, true);
      uTF8JsonGenerator0.writeNumberField("'&>Q", 91);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55296, false);
      uTF8JsonGenerator0.writeNumber(0L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumberField("  ", 10);
      SerializedString serializedString0 = new SerializedString("  ");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 56320;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 56319;
      doubleArray0[5] = (double) 2;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 47, 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 10, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 53, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jTbV");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jTbV");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.print(17.090590833);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)81;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 35, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)81, false);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((float) (byte)34);
      uTF8JsonGenerator0.writeString("jTbV");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byte[] byteArray0 = new byte[6];
      double[] doubleArray0 = new double[9];
      SerializedString serializedString0 = new SerializedString("Can not write a field name, expecting a value");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.not();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      uTF8JsonGenerator0.writeNumber("com.fasterxml.jackson.core.type.TypeReference");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, true);
      uTF8JsonGenerator0.writeNumberField("'&>Q", 91);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      BigDecimal bigDecimal0 = new BigDecimal((-1336));
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeString((char[]) null, 3, 0);
      uTF8JsonGenerator0.writeString((char[]) null, 1, 0);
      uTF8JsonGenerator0.writeNumber((short)98);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "  ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 381, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = new SerializedString("");
      char char0 = '}';
      uTF8JsonGenerator0.writeRaw('}');
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.equals((Object) null);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBinaryField("  ", byteArray0);
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 6, true);
      uTF8JsonGenerator0.writeStartArray();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 57343;
      doubleArray0[2] = (double) 3;
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      ByteArrayOutputStream byteArrayOutputStream1 = (ByteArrayOutputStream)uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, true);
      filteringGeneratorDelegate0.getCodec();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 340, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      BigDecimal bigDecimal0 = new BigDecimal((-1336));
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      ByteArrayOutputStream byteArrayOutputStream1 = (ByteArrayOutputStream)uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeString((char[]) null, 3, 0);
      uTF8JsonGenerator0.writeString((char[]) null, 1, 0);
      uTF8JsonGenerator0.writeNumber((short)98);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 49, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " $k@#%8B#Pg?L2Qu");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      readerBasedJsonParser0.getTextCharacters();
      IOContext iOContext1 = new IOContext(bufferRecycler0, readerBasedJsonParser0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-7), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "jTbV";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jTbV");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jTbV");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.print(17.090590833);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[7] = (byte)81;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)81;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 35, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)81, false);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 3);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jTbV");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jTbV");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.print(17.090590833);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[7] = (byte)81;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)81;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 35, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)81, false);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 3);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, (byte)97);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1892, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator1.writeNumber((long) 2);
      uTF8JsonGenerator0.writeNumberField(" zL?DZh{:O,,;{MQS", 10);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 47, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55296, false);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeNumberField("  ", 10);
      SerializedString serializedString0 = new SerializedString("  ");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      String string0 = "1rM)GH[*<)!>[-G/It6";
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      SerializedString serializedString1 = new SerializedString("  ");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write raw value");
      byte byte0 = (byte) (-90);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte) (-90);
      byteArray0[8] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-90), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1019, false);
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0._verifyValueWrite("  ");
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._verifyValueWrite("D");
      uTF8JsonGenerator0.writeRaw('N');
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", false, 'N', (byte) (-90));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jTbV");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jTbV");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.print(17.090590833);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)81;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 35, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)81, false);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((float) (byte)34);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jTbV");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jTbV");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.print(17.090590833);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)81;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 35, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)81, false);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 3);
      uTF8JsonGenerator0.writeRaw('w');
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unexpected character (");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)103;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 4, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('!');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      SerializedString serializedString0 = new SerializedString("WRITE_BIGDECIMAL_AS_PLAIN");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.not();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0._verifyValueWrite("WRITE_BIGDECIMAL_AS_PLAIN");
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      readerBasedJsonParser0.getTextCharacters();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._releaseBuffers();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator1.writeRawUTF8String(byteArray0, 2, 0);
      uTF8JsonGenerator1.writeBinaryField("Can not write a field name, expecting a value", byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator1.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2085), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("  ", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
      uTF8JsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.not();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.checkError();
      String string0 = "nL\\$$I";
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) null;
      mockPrintStream0.format("nL$$I", objectArray0);
      Locale locale0 = Locale.FRANCE;
      mockPrintStream0.format(locale0, "Ou<6^thQ}'yr28\u0000:", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      byteArray0[0] = (byte) (-40);
      int int0 = 2395;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1600, true);
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte) (-40));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 32767, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 497);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 57343, false);
      char char0 = '!';
      try { 
        uTF8JsonGenerator1.writeRaw('!');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unexpected close marker '");
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, true);
      filteringGeneratorDelegate0.getCodec();
      iOContext1.allocTokenBuffer((-2574));
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1892, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator1.writeNumber((long) 47);
      // Undeclared exception!
      uTF8JsonGenerator1.writeNumber(929.8659F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-19);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2056, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-19), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(23L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -19
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      readerBasedJsonParser0.getTextCharacters();
      IOContext iOContext1 = new IOContext(bufferRecycler0, readerBasedJsonParser0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.not();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 34, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      SerializedString serializedString2 = new SerializedString("  ");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1892, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator1.writeNumber((long) 47);
      uTF8JsonGenerator0.writeNumberField(" zL?DZh{:O,,;{MQS", 10);
      SerializedString serializedString0 = new SerializedString(" zL?DZh{:O,,;{MQS");
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "  ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      mockFileOutputStream0.close();
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      iOContext0.allocReadIOBuffer(1);
      SerializedString serializedString0 = new SerializedString("WRITE_BIGDECIMAL_AS_PLAIN");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.not();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0._verifyValueWrite("WRITE_BIGDECIMAL_AS_PLAIN");
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0._releaseBuffers();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      SerializedString serializedString0 = new SerializedString("WRITE_BIGDECIMAL_AS_PLAIN");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.not();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0._verifyValueWrite("WRITE_BIGDECIMAL_AS_PLAIN");
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)1017);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1399, false);
      uTF8JsonGenerator0.writeStartArray();
      MathContext mathContext0 = MathContext.DECIMAL32;
      uTF8JsonGenerator0.writeString((char[]) null, 1399, (-1603));
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("", byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement((byte)0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter2, false, false);
      filteringParserDelegate0.getCodec();
      char char0 = ' ';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 158, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw('s');
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBinaryField("2*qjn\"q(zy$h8", byteArray0);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "GY%P>#g>eami", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)87;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 432, false);
      try { 
        uTF8JsonGenerator0.writeNumber((-2209L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 703, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber((-23L));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      String string0 = "Can not write a field name, expecting a value";
      SerializedString serializedString0 = new SerializedString("Can not write a field name, expecting a value");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.checkError();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.format("nL$$I", objectArray0);
      Locale locale0 = Locale.FRANCE;
      mockPrintStream0.format(locale0, "Ou<6^thQ}'yr28\u0000:", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      byteArray0[0] = (byte) (-40);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((float) 2);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = (-3962);
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      MockPrintStream mockPrintStream0 = new MockPrintStream("  ");
      mockPrintStream0.print(530.8455550723307);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      mockFileOutputStream0.getChannel();
      mockPrintStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 1024, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 2);
      uTF8JsonGenerator0.writeNumber(2);
      SerializedString serializedString0 = new SerializedString("  ");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 6, true);
      uTF8JsonGenerator0.writeStartArray();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 57343;
      doubleArray0[2] = (double) 3;
      uTF8JsonGenerator0.writeArray(doubleArray0, 3, 0);
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 47, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55296, false);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeNumberField("  ", 10);
      SerializedString serializedString0 = new SerializedString("  ");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U.)=__N)U?/[-Q6\"r?`");
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U.)=__N)U?/[-Q6\"r?`", true);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1832), (ObjectCodec) null, (OutputStream) null, byteArray0, 496, false);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(117, (-1197));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 210, false);
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("Current context not an ARRAY but ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      SerializedString serializedString0 = new SerializedString("K2wN'B[}r]KGOBt");
      char char0 = '}';
      int int0 = 18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 18, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('w');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byte[] byteArray1 = new byte[6];
      byte byte0 = (byte)0;
      byteArray1[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 703, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 1, true);
      uTF8JsonGenerator0.writeNumber(0L);
      String string0 = "C";
      SerializedString serializedString0 = new SerializedString("C");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[13];
      byte byte0 = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      char char0 = '}';
      uTF8JsonGenerator0.writeRaw(' ');
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBinaryField("2*qjn\"q(zy$h8", byteArray0);
      uTF8JsonGenerator0.writeNumber((short) (byte)54);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jTbV");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jTbV");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.print(17.090590833);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      mockFileOutputStream0.getChannel();
      mockPrintStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 101, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 536870910);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8000
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._verifyValueWrite("R|,");
      uTF8JsonGenerator0._verifyValueWrite("R|,");
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      short short0 = (short)97;
      uTF8JsonGenerator0.writeNumber((short)97);
      char char0 = '}';
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      uTF8JsonGenerator0.writeNumber((short)58);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._verifyValueWrite("R|,");
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0._verifyValueWrite("R|,");
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) 2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 6, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._verifyValueWrite("~$-}c(2=XR-3q}8 &FP");
      uTF8JsonGenerator0._verifyValueWrite("R|,");
      uTF8JsonGenerator0.writeNumber(822.8461516);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 6, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, 2096);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1000, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)80;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)51, false);
      try { 
        uTF8JsonGenerator0.writeNumber((-1.0F));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      BigDecimal bigDecimal0 = new BigDecimal((-1336));
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream("#944e&N");
      mockPrintStream0.print((double) (byte) (-38));
      uTF8JsonGenerator0.writeString((char[]) null, 3, 0);
      uTF8JsonGenerator0.writeString((char[]) null, 1, 0);
      uTF8JsonGenerator0.writeNumber((short)98);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("#944e&N");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("#944e&N");
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, dataInputStream0, byteArray0, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) null;
      mockPrintStream0.format("nL$$I", objectArray0);
      Locale locale0 = Locale.FRANCE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Ou<6^thQ}'yr28\u0000:", objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, printStream0, byteArray0, 45, false);
      uTF8JsonGenerator0.writeBinaryField("Ou<6^thQ}'yr28\u0000:", byteArray0);
      uTF8JsonGenerator0.writeNumber((short)471);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      File file0 = MockFile.createTempFile("rb8O", "rb8O", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("Current context not an ARRAY but ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      try { 
        uTF8JsonGenerator0._writePPFieldName("&]{H/Xo_ ,o:Ba4");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) null;
      mockPrintStream0.format("nL$$I", objectArray0);
      Locale locale0 = Locale.FRANCE;
      String string0 = "Ou<6^thQ}'yr28\\0:";
      mockPrintStream0.format(locale0, "Ou<6^thQ}'yr28\u0000:", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[0] = (byte) (-40);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2395, true);
      try { 
        uTF8JsonGenerator0.writeFieldName("6qGo+");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      char char0 = 'i';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[9];
      charArray0[2] = 'U';
      charArray0[3] = '}';
      charArray0[5] = 'i';
      mockPrintStream0.print((double) 0);
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      uTF8JsonGenerator0.writeString(charArray0, 2, 0);
      uTF8JsonGenerator0.writeNumber((short)98);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("%}n]Or[i[0:");
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", true, 'U', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) fileDescriptor0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      uTF8JsonGenerator0.writeRaw(", although was supposed to have one", 1000, (-1692));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      String string0 = "R|,";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyValueWrite("R|,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      tokenFilter1.includeElement((byte)0);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      byte[] byteArray1 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 33, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) null;
      mockPrintStream0.format("nL$$I", objectArray0);
      Locale locale0 = Locale.FRANCE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Ou<6^thQ}'yr28\u0000:", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      printStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)126, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1045, true);
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, (byte)126);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "  ";
      byte[] byteArray0 = new byte[2];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&kefo");
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&kefo", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer();
      mockPrintStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 33, (ObjectCodec) null, mockPrintStream0, byteArray0, 33, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-2799), (-1045));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte) (-38);
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-38), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber((long) (byte) (-38));
      uTF8JsonGenerator0.writeNumber((short) (byte)32);
      char char0 = '\u0080';
      uTF8JsonGenerator0.writeRaw('\u0080');
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBinaryField("com.fasterxml.jackson.core.TreeCodec", byteArray0);
      uTF8JsonGenerator0.writeNumber((short) (byte)105);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 185, (ObjectCodec) null, (OutputStream) null, byteArray0, (-1877), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1877
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      char char0 = 'i';
      char char1 = '8';
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2395, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, (-480), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('i');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -480
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) null;
      mockPrintStream0.format("nL$$I", objectArray0);
      Locale locale0 = Locale.FRANCE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Ou<6^thQ}'yr28\u0000:", objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-40);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1837, (ObjectCodec) null, printStream0, byteArray0, 2395, false);
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      uTF8JsonGenerator0.writeNumber((short)471);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      String string0 = "nL\\$$I";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "; illegal combination");
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.format("nL$$I", objectArray0);
      Locale locale0 = Locale.FRANCE;
      PrintStream printStream1 = mockPrintStream0.format(locale0, "Ou<6^thQ}'yr28\u0000:", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0, byteArray0, 16, true);
      uTF8JsonGenerator0.writeNumber(35);
      uTF8JsonGenerator0.writeStartObject((Object) printStream1);
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      SerializedString serializedString1 = new SerializedString("  ");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.not();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      try { 
        uTF8JsonGenerator0.writeFieldName("Current context not an object but ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jTbV");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jTbV");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte) (-56);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)75;
      byteArray1[6] = (byte)75;
      byteArray1[7] = (byte)29;
      mockPrintStream0.write(byteArray1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 91);
      uTF8JsonGenerator0.writeNumber((-135L));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      uTF8JsonGenerator0.writeStartObject((Object) pipedInputStream0);
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "jTbV";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jTbV");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jTbV");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      iOContext0.allocWriteEncodingBuffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)29;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)75, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-621), (ObjectCodec) null, mockPrintStream0, byteArray0, 6, true);
      uTF8JsonGenerator0.writeStartArray();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 57343;
      doubleArray0[2] = (double) (-621);
      doubleArray0[2] = (double) 46;
      uTF8JsonGenerator0.writeArray(doubleArray0, 3, 0);
      BigDecimal bigDecimal0 = new BigDecimal(46);
      MathContext mathContext0 = new MathContext((byte)91);
      FileSystemHandling.shouldAllThrowIOExceptions();
      bigDecimal0.round(mathContext0);
      bigDecimal0.movePointRight(0);
      String string0 = "L |zy?3";
      uTF8JsonGenerator0.writeRaw("L |zy?3", (int) (byte)102, (-1382));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-60);
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-756), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeObjectFieldStart("B&*c6]z~Q?lfNN LG");
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      int int0 = 54;
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 159, (-3032));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 725, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(0L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)108;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = new SerializedString("Can not write a field name, expecting a value");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, serializedString0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2508, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("hak?.E{F^I6$}qp\"");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jTbV");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jTbV");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte) (-56);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)75;
      byteArray1[6] = (byte)75;
      byteArray1[7] = (byte)29;
      mockPrintStream0.write(byteArray1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 3141, true);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 91);
      uTF8JsonGenerator0.writeNumber((-135L));
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement((byte)0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter2, false, false);
      MockFile mockFile0 = new MockFile("): ", "fVgR?");
      MockFile mockFile1 = new MockFile(mockFile0, "fVgR?");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      mockPrintStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 25, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 63, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement((byte)0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter2, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      byte[] byteArray1 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 1, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 718, (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 725, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(0L);
      char char0 = 'j';
      char char1 = 'Q';
      char[] charArray0 = new char[8];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-38);
      byteArray1[1] = (byte) (-38);
      byteArray1[2] = (byte) (-38);
      byteArray1[3] = (byte) (-38);
      byteArray1[4] = (byte) (-38);
      byteArray1[5] = (byte) (-38);
      byteArray1[6] = (byte) (-38);
      byteArray1[7] = (byte) (-38);
      byteArray1[8] = (byte) (-38);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray1, (int) (byte) (-38), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -38
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-621), (ObjectCodec) null, mockPrintStream0, byteArray1, 6, false);
      uTF8JsonGenerator0.writeStartArray();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 57343;
      doubleArray0[2] = (double) (-621);
      doubleArray0[2] = (double) 46;
      uTF8JsonGenerator0.writeArray(doubleArray0, 3, 0);
      BigDecimal bigDecimal0 = new BigDecimal(46);
      MathContext mathContext0 = new MathContext((byte)91);
      FileSystemHandling.shouldAllThrowIOExceptions();
      bigDecimal0.round(mathContext0);
      bigDecimal0.movePointRight(0);
      SerializedString serializedString0 = new SerializedString("rb8O");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 703, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeRaw('');
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      String string0 = "zKhYSRu'MpX<`w4 5h";
      // Undeclared exception!
      uTF8JsonGenerator0.writeBinaryField("zKhYSRu'MpX<`w4 5h", byteArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 703, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 703;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0.writeRaw('~');
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = new BigDecimal((int) (byte)126);
      bigDecimal0.divide(bigDecimal1, (int) (byte)0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", (int) (byte)126, 62);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 33, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 4000, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      BigDecimal bigDecimal0 = new BigDecimal((double) (-621));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-129), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte byte0 = (byte) (-38);
      int int0 = (-2395);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-38);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2395), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-2568), true);
      int int1 = (-1336);
      BigDecimal bigDecimal0 = new BigDecimal(1573);
      bigDecimal0.longValue();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2568
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      SerializedString serializedString0 = new SerializedString("expected padding character '");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, ":vn#vV5-29O^0f", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 399, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((-5311));
      uTF8JsonGenerator0.writeBoolean(true);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 24, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MathContext mathContext0 = MathContext.DECIMAL32;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      byteArrayOutputStream0.writeTo(byteArrayOutputStream1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(114);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2593, (-1209), true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(uTF8StreamJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 101, (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 484, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) fileDescriptor0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'i';
      charArray0[3] = '8';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 483);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) null;
      mockPrintStream0.format("nL$$I", objectArray0);
      Locale locale0 = Locale.FRANCE;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55296, false);
      try { 
        uTF8JsonGenerator1.writeNumber(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "Current context not an object but ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3261), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, true);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.util.VersionUtil");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      tokenFilter0.includeElement(3);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, (byte)0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 890, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      readerBasedJsonParser0.overrideStdFeatures((byte)0, 44);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 997, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 985, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) null;
      mockPrintStream0.format("w3#E<,nYq?b'Sz", objectArray0);
      Locale locale0 = Locale.FRANCE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Ou<6^thQ}'yr28\u0000:", objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)126;
      byteArray1[1] = (byte)81;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 40, (ObjectCodec) null, printStream0, byteArray1, 2, false);
      uTF8JsonGenerator0.writeNumber(0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      SerializedString serializedString1 = new SerializedString("  ");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement((byte)0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter2, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0._verifyPrettyValueWrite("Can not write a field name, expecting a value", (byte)0);
      System.setCurrentTimeMillis((byte)0);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-621), (ObjectCodec) null, mockPrintStream0, byteArray0, 6, false);
      uTF8JsonGenerator0.writeStartArray();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 57343;
      doubleArray0[1] = (double) (-621);
      doubleArray0[2] = (double) 46;
      uTF8JsonGenerator0.writeArray(doubleArray0, 3, 0);
      BigDecimal bigDecimal0 = new BigDecimal(46);
      MathContext mathContext0 = new MathContext((byte)91);
      mathContext0.equals("write a string");
      bigDecimal0.round(mathContext0);
      bigDecimal0.movePointRight(0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeRaw("L |zy?3", (int) (byte)102, (-1382));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._verifyValueWrite("R|,");
      uTF8JsonGenerator0._verifyValueWrite("L |zy?3");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._verifyValueWrite("R|,");
      uTF8JsonGenerator0._verifyValueWrite("R|,");
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) 2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 5, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures((-957), 0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("%ss:8uI1dtyJioIQ(,?");
      tokenFilter1.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement(1);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter2, true, true);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter1, true, true);
      filteringParserDelegate1.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1, byteArray0, 5, true);
      System.setCurrentTimeMillis(57343);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("%ss:8uI1dtyJioIQ(,?");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      SerializedString serializedString0 = new SerializedString("expected padding character '");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 399, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, ":vn#vV5-29O^0f", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      SerializedString serializedString2 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString2);
      uTF8JsonGenerator1.writeString("N/A");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-3);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5132, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) byteArrayOutputStream0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 536870908, 3235);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-621), (ObjectCodec) null, mockPrintStream0, byteArray0, 6, false);
      uTF8JsonGenerator0.writeStartArray();
      BigDecimal bigDecimal0 = new BigDecimal(46);
      MathContext mathContext0 = MathContext.DECIMAL32;
      bigDecimal0.round(mathContext0);
      bigDecimal0.movePointRight(0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeRaw("L |zy?3", (int) (byte)102, (-1382));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._verifyValueWrite("R|,");
      uTF8JsonGenerator0._verifyValueWrite("L |zy?3");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte) (-38);
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-38), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber((long) (byte) (-38));
      uTF8JsonGenerator0.writeNumber((short) (byte)32);
      char char0 = '}';
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBinaryField("com.fasterxml.jackson.core.TreeCodec", byteArray0);
      uTF8JsonGenerator0.writeNumber((short) (byte)99);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jTbV");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.constructTextBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-56);
      iOContext0.allocWriteEncodingBuffer();
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      mockPrintStream0.write(byteArray0);
      byteArray0[4] = (byte)8;
      byte byte1 = (byte)71;
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 93, 897);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 93
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jTbV");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.constructTextBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-29);
      iOContext0.allocWriteEncodingBuffer();
      byteArray0[3] = (byte)0;
      mockPrintStream0.write(byteArray0);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)71;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)71, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 93, 897);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-621), (ObjectCodec) null, mockPrintStream0, byteArray0, 6, false);
      uTF8JsonGenerator0.writeStartArray();
      BigDecimal bigDecimal0 = new BigDecimal(46);
      MathContext mathContext0 = MathContext.DECIMAL32;
      bigDecimal0.round(mathContext0);
      bigDecimal0.movePointRight(0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("rb8O");
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("(KxLLA?ygn^<XK{h");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.overrideStdFeatures((-2582), 5);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5694), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-4559), true);
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      SerializedString serializedString1 = new SerializedString("]gda\bYmDI7Nvl]I!");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(3500.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4559
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      BigDecimal bigDecimal0 = new BigDecimal((-1336));
      bigDecimal0.longValue();
      MockPrintStream mockPrintStream0 = new MockPrintStream("#944e&N");
      mockPrintStream0.flush();
      mockPrintStream0.print((double) (byte) (-38));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("#944e&N");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigDecimal0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 408, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1302, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-1), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[6];
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      SerializedString serializedString0 = new SerializedString(" bytes (out of ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber(3500.0F);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      BigInteger bigInteger0 = BigInteger.TEN;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator1.writeNumber(bigInteger0);
      uTF8JsonGenerator1.getOutputTarget();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRaw("IKZ3j5K1b7", 344, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 9, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.overrideStdFeatures(9, 2);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 93, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 9, false);
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      SerializedString serializedString1 = new SerializedString("x8");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 703;
      BigDecimal bigDecimal0 = new BigDecimal(2710);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      bigDecimal0.round(mathContext0);
      bigDecimal0.movePointRight(5);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 88, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 703, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 703;
      doubleArray0[2] = (-385.50595);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 0, 2716);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      SerializedString serializedString1 = new SerializedString("Current context not an ARRAY but ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeNumber(3500.0F);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      String string0 = "1rM)GH[*<)!>[-G/It6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("  ");
      mockPrintStream0.print((-792.3));
      char[] charArray0 = new char[4];
      charArray0[0] = 'r';
      charArray0[1] = 'O';
      charArray0[2] = 'Z';
      charArray0[3] = 'q';
      uTF8JsonGenerator0.writeString(charArray0, 0, (-110));
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 3, 3);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      Locale locale0 = Locale.FRANCE;
      StringReader stringReader0 = new StringReader("7X\bSgo");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      stringReader0.mark(0);
      readerBasedJsonParser0.overrideStdFeatures(33, 2043);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = new SerializedString("X[A1]!y5Y>W3-YsRGr");
      SerializedString serializedString1 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      int int0 = 725;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 725, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 725;
      uTF8JsonGenerator0.writeNumber(291);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0._releaseBuffers();
      String string0 = "8z,C#K@c;f";
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("8z,C#K@c;f");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 703, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 703;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0.writeRaw('~');
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 703, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 703;
      doubleArray0[2] = (-385.50595);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeStartObject((Object) jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(2);
      byteArrayOutputStream0.writeTo(byteArrayOutputStream1);
      String string0 = "(KxLLA?ygn^<XK{h";
      try { 
        uTF8JsonGenerator0.writeNumber("(KxLLA?ygn^<XK{h");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 703, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 703;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0.writeRaw('~');
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      SerializedString serializedString0 = new SerializedString("expected padding character '");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 399, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, ":vn#vV5-29O^0f", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      BigInteger bigInteger0 = BigInteger.TEN;
      System.setCurrentTimeMillis(57343);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 703, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-17);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 5, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      charArray0[5] = 'W';
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(86);
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("(KxLLA?ygn^<XK{h");
      uTF8JsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-475), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.getOutputTarget();
      int int0 = 479;
      BigDecimal bigDecimal0 = new BigDecimal(479);
      bigDecimal0.longValue();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      float float0 = (-1313.6877F);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("rb8O");
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      Locale locale0 = Locale.FRANCE;
      MockFile mockFile0 = new MockFile("nJ sI[4");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale0, ", although was supposed to have one", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-30));
      uTF8JsonGenerator0.writeRaw('%');
      uTF8JsonGenerator0.writeNumber((short)101);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte) (-38);
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-38), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber((long) (byte) (-38));
      uTF8JsonGenerator0.writeNumber((short) (byte)32);
      char char0 = '}';
      uTF8JsonGenerator0.writeRaw('}');
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBinaryField("com.fasterxml.jackson.core.TreeCodec", byteArray0);
      uTF8JsonGenerator0.writeNumber((short) (byte)101);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-618), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0._releaseBuffers();
      BigInteger bigInteger0 = BigInteger.TEN;
      System.setCurrentTimeMillis(1L);
      uTF8JsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte) (-38);
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-38), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber((long) (byte) (-38));
      uTF8JsonGenerator0.writeNumber((short) (byte)32);
      uTF8JsonGenerator0.writeRaw('}');
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("com.fasterxml.jackson.core.TreeCodec", "com.fasterxml.jackson.core.TreeCodec", false, '}', 159);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 36)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 703, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 703;
      doubleArray0[2] = (-385.50595);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(2);
      byteArrayOutputStream0.writeTo(byteArrayOutputStream1);
      uTF8JsonGenerator0.writeNumber("(KxLLA?ygn^<XK{h");
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("(KxLLA?ygn^<XK{h");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("sz[J#&<@}s|*9;?^W", "sz[J#&<@}s|*9;?^W", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2395);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte) (-88);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1023);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1023, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 3241, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[8];
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 57343, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.overrideStdFeatures((-1108), 0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 478, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-1700), false);
      System.setCurrentTimeMillis(56319);
      String string0 = "X}(\"";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("X}(\"");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1700
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, (-2429), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) (-2429));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2429
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      String string0 = "expected padding character '";
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) (byte)116;
      objectArray1[2] = (Object) mockPrintStream0;
      mockPrintStream0.format("expected padding character '", objectArray1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 128, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("expected padding character '", byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      SerializedString serializedString0 = new SerializedString("expected padding character '");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 399, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, ":vn#vV5-29O^0f", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      SerializedString serializedString2 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString2);
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-36);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 725, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(0L);
      char char0 = 'd';
      char char1 = 'Q';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte byte0 = (byte) (-90);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 395, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      String string0 = "file";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) null;
      mockPrintStream0.format("w3#E<,nYq?b'Sz", objectArray0);
      Locale locale0 = Locale.FRANCE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Ou<6^thQ}'yr28\u0000:", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-30);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1837, (ObjectCodec) null, printStream0, byteArray0, 2395, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("", byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte) (-35);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)30, false);
      try { 
        uTF8JsonGenerator0.writeRaw("?Z#%e9mv#|Ba73V .i");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte byte0 = (byte)116;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "6O~U:(E?");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) fileDescriptor0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 65, true);
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = 'W';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte) (-17), (-4271));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      SerializedString serializedString0 = new SerializedString("6");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 319, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 255);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator1._releaseBuffers();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeUTF8String(byteArray0, 0, (byte) (-38));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement((byte)0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter2, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      Object object1 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object1, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte byte0 = (byte)116;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-1356), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 284, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      iOContext0.allocNameCopyBuffer(0);
      uTF8JsonGenerator0.writeNumber((short)105);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      SerializedString serializedString1 = new SerializedString("  ");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-475), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(4478L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 725, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      BigDecimal bigDecimal0 = new BigDecimal((-1336));
      bigDecimal0.longValue();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream("#944e&N");
      mockPrintStream0.print((double) (byte) (-38));
      uTF8JsonGenerator0.writeString((char[]) null, 479, 0);
      uTF8JsonGenerator0.writeString((char[]) null, 1848, 0);
      uTF8JsonGenerator0.writeNumber((short)98);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("#944e&N");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)93;
      int int0 = 48;
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, pipedOutputStream0, byteArray0, 718, false);
      char[] charArray0 = null;
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, (int) (byte)93, (-1587));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "  ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      int int0 = 119;
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 119, 2874);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-38);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-38), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 947, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 63, (int) (byte) (-38));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 725, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(0L);
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = 'd';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = 'd';
      charArray0[5] = 'H';
      charArray0[6] = 'Q';
      uTF8JsonGenerator0.writeNumber((short) (-665));
      uTF8JsonGenerator0.writeRaw('d');
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(0L);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-621), (ObjectCodec) null, mockPrintStream0, byteArray0, 6, true);
      uTF8JsonGenerator0.writeStartArray();
      BigDecimal bigDecimal0 = new BigDecimal(46);
      MathContext mathContext0 = MathContext.DECIMAL128;
      bigDecimal0.round(mathContext0);
      bigDecimal0.movePointRight(0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeRaw("L |zy?3", (int) (byte)102, (-1382));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement((byte)0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter2, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Too few bytes available: missing ", 37, 37);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonParser0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(291);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("8z,C#K@c;f");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'D';
      charArray0[2] = '8';
      charArray0[3] = 'e';
      uTF8JsonGenerator0.writeString(charArray0, (-3704), (-3704));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      SerializedString serializedString0 = new SerializedString("expected padding character '");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 399, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, ":vn#vV5-29O^0f", true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1._releaseBuffers();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, tokenFilter0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2545, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) null;
      mockPrintStream0.format("", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, mockPrintStream0, byteArray0, 255, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 8, 1110);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) fileDescriptor0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-17);
      byteArray0[0] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 65, true);
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = 'W';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      String string0 = "z1p@JY[K\\vHtc";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) fileDescriptor0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      mockPrintStream0.format("z1p@JY[KvHtc", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 224);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 128, (ObjectCodec) null, mockPrintStream0, byteArray0, 2938, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      MockFile mockFile0 = new MockFile("MFU1w[pE!\"I", "MFU1w[pE!\"I");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2470, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 725;
      doubleArray0[2] = (-385.50595);
      doubleArray0[4] = 192.902950809117;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) 0L;
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 19, 5103);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-43);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1406, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1406, true);
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      SerializedString serializedString1 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      String string0 = "z1p@JY[K\\vHtc";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-116);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2981), (ObjectCodec) null, mockPrintStream0, byteArray0, (-1), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement((byte)0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter2, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 1, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
      uTF8JsonGenerator0.writeNumber(3);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) fileDescriptor0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      mockPrintStream0.format("z1p@JY[KvHtc", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-866), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw('w');
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber((short)81);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)97;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 75, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      SerializedString serializedString1 = new SerializedString("  ");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-621), (ObjectCodec) null, mockPrintStream0, byteArray0, 6, false);
      uTF8JsonGenerator0.writeStartArray();
      BigDecimal bigDecimal0 = new BigDecimal(46);
      MathContext mathContext0 = MathContext.DECIMAL128;
      bigDecimal0.round(mathContext0);
      bigDecimal0.movePointRight(0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      mockPrintStream0.print(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("rb8O");
      FileSystemHandling.createFolder(evoSuiteFile0);
      uTF8JsonGenerator0.writeRaw("L |zy?3", (int) (byte)102, (-1382));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._verifyValueWrite("R|,");
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._outputSurrogates(255, 255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xff, second 0xff
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) fileDescriptor0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 65, true);
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = 'W';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte) (-17), (-4271));
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte) (-17), (-1339));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement((byte)0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter2, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 1, false);
      byteArrayOutputStream0.flush();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 718, (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte) (-35);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)30, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) fileDescriptor0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format("z1p@JY[KvHtc", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, printStream0, byteArray0, (-3479), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("V", byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3479
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[7];
      charArray0[1] = ' ';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "g^l&Vmt}\"GF", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1064), (ObjectCodec) null, mockPrintStream0, byteArray0, 242, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format("Internal error: this code path should never get executed", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 125, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('5');
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[9];
      charArray0[6] = 'i';
      charArray0[2] = 'U';
      charArray0[3] = '}';
      charArray0[5] = 'i';
      charArray0[6] = 'K';
      charArray0[7] = 'i';
      uTF8JsonGenerator0.writeRaw(charArray0, 1, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("`m,8", 1, 4406);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter2, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0._verifyPrettyValueWrite("Can not write a field name, expecting a value", (byte)0);
      System.setCurrentTimeMillis((byte)0);
      uTF8JsonGenerator0.writeNumber("oDD6j=iRd)zeONUAO");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 50, (ObjectCodec) null, mockPrintStream0, byteArray0, 381, true);
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("<{");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-2);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1024, false);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.writeRaw("");
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'b';
      int int0 = 1715;
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, 1715);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-621), (ObjectCodec) null, mockPrintStream0, byteArray0, 6, false);
      uTF8JsonGenerator0.writeStartArray();
      BigDecimal bigDecimal0 = new BigDecimal(46);
      MathContext mathContext0 = MathContext.DECIMAL128;
      bigDecimal0.round(mathContext0);
      bigDecimal0.movePointRight(0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeRaw("L |zy?3", (int) (byte)102, (-1382));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._verifyValueWrite("R|,");
      uTF8JsonGenerator0.flush();
      try { 
        uTF8JsonGenerator0._outputSurrogates(255, 255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xff, second 0xff
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      charArray0[6] = 'b';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 319);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      BigDecimal bigDecimal0 = new BigDecimal((long) 2);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext((byte)0, roundingMode0);
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      BigDecimal bigDecimal2 = bigDecimal1.movePointRight(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 317, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber(bigDecimal2);
      String string0 = "";
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, mockPrintStream0, byteArray0, 8000, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) fileDescriptor0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      mockPrintStream0.format("z1p@JY[KvHtc", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-866), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw('w');
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber((short)81);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)102;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)102);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement((byte)0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter2, true, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, byteArrayOutputStream0, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2233, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator1.writeNumber((short)2);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)38;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 3, true);
      uTF8JsonGenerator0.writeRaw("");
      char[] charArray0 = new char[2];
      charArray0[1] = 'b';
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 93, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.writeQuotedUTF8(byteArrayOutputStream0);
      int int0 = GeneratorBase.SURR1_LAST;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("mP6$QdD1%2NF:\u0007C5v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", although was supposed to have one");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("K-?dgHs\u0004");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2249), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 127, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 3, 34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object1 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3486, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) fileDescriptor0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      mockPrintStream0.format("z1p@JY[KvHtc", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-866), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber((short)81);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2582, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 8, true);
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-38);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.longValue();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.close();
      char[] charArray0 = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)102;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures((byte)0, (byte)102);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement((byte)0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter2, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0._verifyPrettyValueWrite("Can not write a field name, expecting a value", (byte)0);
      System.setCurrentTimeMillis((byte)0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 381, false);
      SerializedString serializedString0 = new SerializedString("1rM)GH[*<)!>[-G/It6");
      SerializedString serializedString1 = new SerializedString("  ");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0._releaseBuffers();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      int int0 = 725;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-475), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeArrayFieldStart("g^l&Vmt}\"GF");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 725, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(0L);
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = 'd';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = 'e';
      charArray0[5] = 'H';
      charArray0[6] = 'Q';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)100, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)102;
      BigDecimal bigDecimal0 = new BigDecimal(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6000, (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = '\"';
      charArray0[2] = 'm';
      charArray0[3] = 'e';
      charArray0[4] = 'y';
      charArray0[5] = '[';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, (-866));
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-475), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.getOutputTarget();
      int int0 = 479;
      BigDecimal bigDecimal0 = new BigDecimal(479);
      bigDecimal0.longValue();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3427, true);
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = 'b';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = 'b';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 725, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 725;
      doubleArray0[2] = (-385.50595);
      doubleArray0[3] = (double) 57343;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-73);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeStartArray();
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte) (-38));
      BigDecimal bigDecimal1 = bigDecimal0.movePointRight(725);
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("=/sAEn&%&ixyW7c{A", (int) (byte) (-73), 1703);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = 'e';
      charArray0[2] = 'U';
      charArray0[3] = '}';
      charArray0[4] = 'e';
      charArray0[5] = 'i';
      charArray0[6] = 'K';
      charArray0[7] = 'i';
      charArray0[8] = 'e';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 1701);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-73);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 2, 1054);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-38);
      byteArray0[0] = (byte) (-38);
      int int0 = 13;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      BigDecimal bigDecimal0 = new BigDecimal(57343);
      bigDecimal0.longValue();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.close();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, (-625), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "V+2l3De]5.<q@Hr^+!:", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1306), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._releaseBuffers();
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("  ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1024, false);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.writeRaw("");
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'b';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1715, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1715
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2802), (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'i';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 1701);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.constructTextBuffer();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2470, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 229;
      doubleArray0[1] = (double) 57343;
      doubleArray0[2] = (double) 57343;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 56319;
      doubleArray0[6] = (double) 57343;
      doubleArray0[7] = (double) 57343;
      doubleArray0[8] = (double) (byte)33;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeArray(doubleArray0, 56319, 262144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56319
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)102;
      BigDecimal bigDecimal0 = new BigDecimal(3);
      int int0 = 18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 725, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)102, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      MockFile mockFile0 = new MockFile("MFU1w[pE!\"I");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2470, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 725;
      doubleArray0[2] = (-385.50595);
      doubleArray0[4] = 192.902950809117;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) 0L;
      uTF8JsonGenerator0.writeNull();
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-475), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = ' ';
      charArray0[2] = 'e';
      charArray0[3] = 'd';
      charArray0[4] = 'Q';
      char char0 = 'e';
      charArray0[5] = 'e';
      charArray0[6] = 'i';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, (int) (byte)100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("T");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = 'P';
      charArray0[2] = 'X';
      charArray0[3] = '>';
      charArray0[4] = '3';
      charArray0[5] = 'X';
      charArray0[6] = '!';
      charArray0[7] = 'o';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3432, 18, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("T", 482);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      int int0 = 725;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      MockFile mockFile0 = new MockFile("MFU1w[pE!\"I");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 725, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      long long0 = 0L;
      uTF8JsonGenerator0.writeNumber(0L);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2470, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      int int0 = 725;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)102;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 102, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-475), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = ' ';
      charArray0[2] = 'e';
      charArray0[3] = 'd';
      charArray0[4] = 'Q';
      charArray0[5] = 'e';
      charArray0[6] = 'i';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "7j/;?}y+YTvbgr`#OJ";
      StringReader stringReader0 = new StringReader("7j/;?}y+YTvbgr`#OJ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 208, true);
      uTF8JsonGenerator0._verifyValueWrite("7j/;?}y+YTvbgr`#OJ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)89;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 48, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte) (-32), true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1199, (ObjectCodec) null, pipedOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rb8O");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-475), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = ' ';
      charArray0[2] = 'e';
      charArray0[3] = 'd';
      charArray0[4] = 'Q';
      charArray0[5] = 'e';
      charArray0[6] = 'i';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, (int) (byte)100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, (byte[]) null, 115, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 997, (ObjectCodec) null, stringWriter0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, (TokenFilter) null, false, true);
      filteringGeneratorDelegate0.getCodec();
      StringReader stringReader0 = new StringReader("OiI|)Qqw3ajN?sb%<");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = 'B';
      charArray0[2] = '_';
      charArray0[3] = 'g';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 0, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-3104), true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 725, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = new SerializedString("Q4F<?Fm`$E");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      OutputStream outputStream0 = null;
      iOContext0.releaseWriteEncodingBuffer((byte[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 270, (ObjectCodec) null, (OutputStream) null);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      int int0 = 3300;
      // Undeclared exception!
      try { 
        iOContext0.allocWriteEncodingBuffer(3300);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "write a binary value";
      MockFile mockFile0 = new MockFile("write a binary value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 0, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }
}
