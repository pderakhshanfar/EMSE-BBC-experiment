/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:31:21 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw('\u008F');
      uTF8JsonGenerator0.writeString("was expecting a colon to separate field name and value");
      byte[] byteArray0 = new byte[5];
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeFieldName("73t\"d0%5c");
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1000000000, (-1310));
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '';
      byteArrayBuilder0.reset();
      charArray0[2] = '&';
      uTF8JsonGenerator0.writeRaw(charArray0, 1, (-17));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("VaSS=\"RmeYrf^&");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, dataOutputStream0, byteArray0, 3, false);
      try { 
        uTF8JsonGenerator0.writeNumber((long) 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(2037);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "[-_./;:]", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 57343, true);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber(0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) iOContext1;
      MockPrintStream mockPrintStream1 = new MockPrintStream("0}]u");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      iOContext0.releaseNameCopyBuffer((char[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream2);
      char[] charArray0 = new char[6];
      uTF8JsonGenerator0.writeStartObject((Object) "[0");
      charArray0[0] = 'P';
      charArray0[1] = '\u0085';
      charArray0[2] = '\u0085';
      charArray0[4] = '\u0085';
      charArray0[5] = '\u0085';
      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "c8dH<LgT", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("c8dH<LgT");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)106;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1564, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)53, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber((long) 2);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("c8dH<LgT");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ALLO_NON_NUMERIC_NMBERS");
      iOContext0.allocTokenBuffer(6);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream0.println((long) 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1348), (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeFieldName("%,1O[k#0}H<\u0004|");
      uTF8JsonGenerator0.close();
      bufferedOutputStream0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-1319));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("VALUE_NULL", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byte byte0 = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)12;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0, byteArray0, (byte)12, true);
      SerializedString serializedString0 = new SerializedString("VALUE_NULL");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeString("Can not write a field name, expecting a value");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("?4W");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 211, (ObjectCodec) null, pipedOutputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "Current context not an object but ", false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, true, false);
      filteringGeneratorDelegate0.getCodec();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeString("K0I>Y%\"J(y");
      uTF8JsonGenerator1.writeString("?4W");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator1.writeNumber(1566.7264F);
      uTF8JsonGenerator0.writeEndObject();
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "}u";
      MockPrintStream mockPrintStream1 = new MockPrintStream("}u");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)110, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber((long) (byte)110);
      uTF8JsonGenerator0.writeFieldName("73t\"d0%5c");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 12000, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.TokenFilterContext");
      Object[] objectArray0 = new Object[13];
      PrintStream printStream0 = mockPrintStream0.format("com.fasterxml.jackson.core.filter.TokenFilterContext", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 199, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      printStream0.write(57343);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeNumber(31);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      StringWriter stringWriter0 = new StringWriter(115);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 199, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("?4W");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 127, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      mockPrintStream0.write((int) (byte)114);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeNumber(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeFieldName("BIG_INTEGER");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      MockPrintStream mockPrintStream1 = new MockPrintStream("}u");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}u", false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("VALUE_NULL", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1147), (ObjectCodec) null, mockPrintStream0);
      printStream0.println(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale locale0 = Locale.ITALIAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      mockPrintStream0.append((CharSequence) "ch:;#Y#n{J{2uqCQ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)83;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 51, (ObjectCodec) null, mockPrintStream0, byteArray0, 23, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw('\u008F');
      uTF8JsonGenerator0.writeString("was expecting a colon to separate field name and value");
      byte[] byteArray0 = new byte[5];
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber((-982L));
      uTF8JsonGenerator0.writeFieldName("73t\"d0%5c");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      mockPrintStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[12];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1564, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      mockPrintStream0.write(873);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeNumber((-2993));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator1.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      bufferRecycler0.allocCharBuffer(2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      Random.setNextRandom(48);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      mockPrintStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[12];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1564, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeBinary(byteArray0);
      jsonGenerator0.writeNumber((long) 55296);
      uTF8JsonGenerator0.writeFieldName("73t\"d0%5c");
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        jsonGenerator0.writeNumber((float) 57343);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("?4W");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("?4W");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-57);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "?4W";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, objectArray0[0], false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString("K0I>Y%\"J(y");
      uTF8JsonGenerator0.writeString(">e_KXubTny");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator1.writeNumber((float) 3);
      uTF8JsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      mockPrintStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[12];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1564, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeBinary(byteArray0);
      jsonGenerator0.writeNumber(39);
      jsonGenerator0.writeNumber((long) 55296);
      uTF8JsonGenerator0.writeFieldName("was expecting double-quote to start field name");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      mockPrintStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[12];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1564, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeBinary(byteArray0);
      jsonGenerator0.writeNumber((long) 55296);
      uTF8JsonGenerator0.writeFieldName("73t\"d0%5c");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.TokenFilterContext");
      Object[] objectArray0 = new Object[13];
      PrintStream printStream0 = mockPrintStream0.format("com.fasterxml.jackson.core.filter.TokenFilterContext", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[2];
      printStream0.write((-4903));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1, byteArray0, 1, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.io.JsonStringEncoder");
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale locale0 = Locale.PRC;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1372, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('\u008F');
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.io.JsonStringEncoder");
      uTF8JsonGenerator0.writeFieldName("ch:;#Y#n{J{2uqCQ");
      uTF8JsonGenerator0.writeString("ch:;#Y#n{J{2uqCQ");
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeStartObject((Object) jsonEncoding0);
      System.setCurrentTimeMillis(0L);
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a null, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      char[] charArray0 = WriterBasedJsonGenerator.HEX_CHARS;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      String string0 = "qRtQ\";b+2-<,";
      uTF8JsonGenerator0.writeFieldName("qRtQ\";b+2-<,");
      try { 
        uTF8JsonGenerator0.writeFieldName("qRtQ\";b+2-<,");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(1);
      SerializedString serializedString0 = new SerializedString("K0I>Y%\"J(y");
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator1._outputSurrogates(55296, 57343);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "GyS$?pkC[");
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.TokenFilterContext");
      Object[] objectArray0 = new Object[13];
      PrintStream printStream0 = mockPrintStream0.format("com.fasterxml.jackson.core.filter.TokenFilterContext", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[2];
      printStream0.write(byteArray0);
      MockPrintStream mockPrintStream2 = new MockPrintStream("p5{KVMo& >RhV");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("?4W");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "?4W";
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte)21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 51, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, (byte[]) null, 3, (byte)7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("u");
      Object[] objectArray0 = new Object[13];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}u");
      FileSystemHandling.createFolder(evoSuiteFile0);
      objectArray0[1] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.format("u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0, byteArray0, (byte)56, true);
      uTF8JsonGenerator0.writeString("b`@9$vz.W7AE+M");
      uTF8JsonGenerator0.writeString("K0I>Y%\"J(y");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("4:|/<Q");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-518), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = null;
      String string0 = "0}]8";
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]8");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(184);
      mockPrintStream0.format("0}]8", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 8000, (ObjectCodec) null, mockPrintStream1, byteArray0, (-3105), false);
      mockPrintStream1.print((float) (byte)12);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2601, (ObjectCodec) null, mockPrintStream0, byteArray0, 2983, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      mockPrintStream0.close();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.write(byteArray0, 16, 26);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1564, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("' (code ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.io.JsonStringEncoder");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale locale0 = Locale.FRENCH;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      SerializedString serializedString0 = new SerializedString("");
      locale0.getDisplayName();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2969, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)3, false);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "' (code ";
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      mockPrintStream0.close();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1564, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        jsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale locale0 = Locale.PRC;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 1372;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1866, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw('\u0087');
      uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeFieldName("G,1[[k#H<\u0004|");
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "' (code ";
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      mockPrintStream0.close();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1564, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._verifyPrettyValueWrite("' (code ", 1);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        jsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString(charArray0, 2, (-2887));
      SerializedString serializedString1 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      serializedString1.asQuotedChars();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[1] = (Object) null;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      char[] charArray0 = WriterBasedJsonGenerator.HEX_CHARS;
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)63;
      char char0 = 'H';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArray0, (byte)0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 1, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[1] = (Object) null;
      objectArray0[5] = (Object) bufferRecycler0;
      char[] charArray0 = WriterBasedJsonGenerator.HEX_CHARS;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString(charArray0, 2, 1);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      serializedString0.asQuotedChars();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)9;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 6, (byte)9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.io.JsonStringEncoder");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale locale0 = Locale.PRC;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.io.JsonStringEncoder");
      locale0.getDisplayName();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1000, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)94;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " bytes (out of ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 5608, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 80, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw('a');
      uTF8JsonGenerator0.getOutputTarget();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      byte[] byteArray0 = new byte[10];
      objectArray0[8] = (Object) (byte) (-24);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("e[", "e[");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-19), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 12, true);
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2757, (-19));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("G,1[[k#H<\u0004|");
      iOContext0.allocTokenBuffer(0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream0.println((-479L));
      SerializedString serializedString0 = new SerializedString("");
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeFieldName("p");
      uTF8JsonGenerator0.flush();
      SerializedString serializedString1 = new SerializedString("G,1[[k#H<\u0004|");
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("By%#4s");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 103, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0);
      int int0 = 1363;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-518);
      MockPrintStream mockPrintStream0 = new MockPrintStream("4:|/<Q");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-518), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.close();
      char char0 = '8';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('8');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) mockPrintStream0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(1);
      String string0 = "K0I>Y%\"J(y";
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("K0I>Y%\"J(y");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "}u";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[4] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      printStream0.printf(locale0, "EeX", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-28);
      byteArray0[7] = (byte) (-28);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte) (-28);
      byteArray0[8] = (byte) (-28);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-28), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeNumber((short)43);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("G,1[[k#H<\u0004|");
      char[] charArray0 = iOContext0.allocTokenBuffer(0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)0;
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2648, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeRaw(charArray0, 91, 0);
      uTF8JsonGenerator0.writeFieldName("VaSS=\"RmeYrf^&");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 2);
      uTF8JsonGenerator0.writeString(charArray0, 1, 3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      byte byte0 = (byte)50;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)50;
      byteArray0[7] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 117, (ObjectCodec) null, mockPrintStream0, byteArray0, 79, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString(charArray0, 2, (-2887));
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("4:|/<Q");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-518), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      bufferRecycler0.allocCharBuffer(3, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale locale0 = Locale.PRC;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1372, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeFieldName("ch:;#Y#n{J{2uqCQ");
      String string0 = "start an object";
      uTF8JsonGenerator0.writeString("start an object");
      String string1 = ": ";
      try { 
        uTF8JsonGenerator0.writeFieldName(": ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "0}]u";
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[1] = (Object) null;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      char[] charArray0 = WriterBasedJsonGenerator.HEX_CHARS;
      mockPrintStream0.format("0}]u", objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-302), (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[13];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}u");
      FileSystemHandling.createFolder(evoSuiteFile0);
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
      IOContext iOContext2 = new IOContext(bufferRecycler1, pipedInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-360), (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator1.writeString("K0I>Y%\"J(y");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      pipedOutputStream0.write(byteArray0);
      uTF8JsonGenerator0.writeFieldName("}u");
      uTF8JsonGenerator1.writeString("|\"z-6&)C");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, (-2407), (-1128));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("VALUE_NULL", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 316, (ObjectCodec) null, printStream0, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "?4W";
      MockPrintStream mockPrintStream0 = new MockPrintStream("?4W");
      String string1 = ">e_KXubTny";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "?4W";
      PrintStream printStream0 = mockPrintStream0.format(">e_KXubTny", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 339, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeString("K0I>Y%\"J(y");
      uTF8JsonGenerator1.writeFieldName("~F");
      uTF8JsonGenerator1._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      String string0 = "VALUE_NULL";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("VALUE_NULL", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-84);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1470, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('b');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[13];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}u");
      FileSystemHandling.createFolder(evoSuiteFile0);
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
      IOContext iOContext2 = new IOContext(bufferRecycler1, pipedInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-360), (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator1.writeString("K0I>Y%\"J(y");
      uTF8JsonGenerator0.writeFieldName("}u");
      uTF8JsonGenerator1.writeString("|\"z-6&)C");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, (-2407), (-1128));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[13];
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1950), (ObjectCodec) null, printStream0, byteArray0, 1659, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._verifyPrettyValueWrite("write a binary value", 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "com.fasterxml.jackson.core.io.JsonStringEncoder";
      PrintStream printStream0 = mockPrintStream0.format("VALUE_NULL", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0, byteArray0, 0, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "}u";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-28);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}u");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "com.fasterxml.jackson.core.JsonParser");
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte) (-28);
      byteArray0[8] = (byte) (-28);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-28), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber((short)90);
      uTF8JsonGenerator0.writeNumber((int) (short)90);
      uTF8JsonGenerator0.writeNumber(1.0F);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", (-736));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 108, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("start an array");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oj=UA");
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      char[] charArray0 = iOContext1.allocTokenBuffer(1);
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format(">e_KXubTny", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      iOContext1.releaseTokenBuffer(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1);
      mockPrintStream1.flush();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 23);
      uTF8JsonGenerator0.writeObjectFieldStart("r=o';-F('I\"7v`C");
      mockPrintStream1.println(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a binary value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream("VALUE_NULL");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) bufferRecycler0;
      objectArray0[1] = (Object) mockPrintStream1;
      objectArray0[2] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream1.format("VALUE_NULL", objectArray0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1255), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1917, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2253, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeStartObject((Object) "0}]u");
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      charArray0[5] = 'P';
      uTF8JsonGenerator0.writeRaw(charArray0, 56319, (-2010));
      Random.setNextRandom(49);
      try { 
        uTF8JsonGenerator0.writeNumber((-6529));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.io.JsonStringEncoder");
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale locale0 = Locale.PRC;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1372, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('\u008F');
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.io.JsonStringEncoder");
      uTF8JsonGenerator0.writeFieldName("ch:;#Y#n{J{2uqCQ");
      uTF8JsonGenerator0.writeString("start an object");
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeStartObject((Object) jsonEncoding0);
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("' (code ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 124, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom(1423L);
      BigInteger.probablePrime(99, mockRandom0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      Random.setNextRandom(3933);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.append('C');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler2, bufferRecycler1, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2331, 2053);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4000
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "com.fasterxml.jackson.core.io.JsonStringEncoder";
      PrintStream printStream0 = mockPrintStream0.format("VALUE_NULL", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0, byteArray0, 0, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      serializedString0.asUnquotedUTF8();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      String string0 = "o-#P6u$y^";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyValueWrite("o-#P6u$y^");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2183), (ObjectCodec) null, mockPrintStream0, byteArray0, 2048, false);
      uTF8JsonGenerator0.writeNumber(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) (byte)26);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 34, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1564, (ObjectCodec) null, mockPrintStream0, byteArray0, 1881, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("' (code ");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 610, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0._releaseBuffers();
      String string0 = "\"";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "}u";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte) (-28);
      byteArray0[8] = (byte) (-28);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-28), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)23);
      uTF8JsonGenerator0.writeNumber((int) (short)23);
      uTF8JsonGenerator0.writeNumber(1.0F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString(charArray0, 2, (-2887));
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "}u";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte) (-28);
      byteArray0[8] = (byte) (-28);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-28), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)23);
      uTF8JsonGenerator0.writeNumber((int) (short)23);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oj=UA");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) ">e_KXubTny";
      objectArray0[4] = (Object) "oj=UA";
      PrintStream printStream0 = mockPrintStream0.format(">e_KXubTny", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeString("~F");
      uTF8JsonGenerator0.writeFieldName(">e_KXubTny");
      uTF8JsonGenerator0.writeString(", although was supposed to have one");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 52, 117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.io.JsonStringEncoder");
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale locale0 = Locale.PRC;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1372, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char char0 = '\u008F';
      uTF8JsonGenerator0.writeRaw('\u008F');
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeFieldName("ch:;#Y#n{J{2uqCQ");
      uTF8JsonGenerator0.writeString("start an object");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      uTF8JsonGenerator0.flush();
      SerializedString serializedString1 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2969, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)3, true);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString1);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("start an object", "", false, 'U', 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "0}]u";
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      mockPrintStream0.println((float) 3);
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(184);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      int int0 = 1882;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-192), (ObjectCodec) null, printStream0, byteArray0, 184, true);
      char char0 = '';
      iOContext1.allocReadIOBuffer((-4149));
      uTF8JsonGenerator0.writeRaw('');
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("0}]u");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("K!P\nUKYP'km");
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintStream0.println((long) 2);
      SerializedString serializedString0 = new SerializedString("Vy8i\"qcA1RG#R,'>>");
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-480), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("Vy8i\"qcA1RG#R,'>>");
      uTF8JsonGenerator0.flush();
      SerializedString serializedString1 = new SerializedString("K!P\nUKYP'km");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "com.fasterxml.jackson.core.io.JsonStringEncoder";
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.io.JsonStringEncoder");
      char[] charArray0 = iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale locale0 = Locale.PRC;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 208, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char char0 = 'J';
      uTF8JsonGenerator0.writeString(charArray0, 208, 2053);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(2440.0F);
      uTF8JsonGenerator0.writeNumber(0.0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = ']';
      charArray0[2] = 'J';
      charArray0[3] = 'O';
      charArray0[4] = 'F';
      charArray0[5] = 'D';
      charArray0[6] = '6';
      charArray0[7] = 'H';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (-2), 2780);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("w}],");
      iOContext2.allocWriteEncodingBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("RD+ocGXRNeAkDu");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 1, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        uTF8JsonGenerator0.writeNumber(291);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.io.JsonStringEncoder");
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale locale0 = Locale.PRC;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1372, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('|');
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeFieldName("ch:;#Y#n{J{2uqCQ");
      uTF8JsonGenerator0.writeString("start an object");
      uTF8JsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber((float) 1372);
      uTF8JsonGenerator0.writeNumber(425.994F);
      uTF8JsonGenerator0.writeNumber(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.io.JsonStringEncoder");
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale locale0 = Locale.PRC;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1372, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('\u008F');
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeFieldName("ch:;#Y#n{J{2uqCQ");
      uTF8JsonGenerator0.writeString("start an object");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)74;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) iOContext0;
      mockPrintStream0.format("", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 5013, true);
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.appendQuoted(charArray0, (byte)11);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[13];
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, printStream0, byteArray0, (byte) (-9), true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("' (code ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 256, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeFieldName("' (code ");
      uTF8JsonGenerator0.writeString("J|CaLtO?E2ge;)\"V");
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "", 194);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.io.JsonStringEncoder");
      char[] charArray0 = bufferRecycler0.allocCharBuffer(3, 1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale locale0 = Locale.PRC;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-1061), (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
      char char0 = 'J';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeString(charArray0, 1, 1117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 200
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "com.fasterxml.jackson.core.io.JsonStringEncoder";
      PrintStream printStream0 = mockPrintStream0.format("VALUE_NULL", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0, byteArray0, 0, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("' (code ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber(2);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.getOutputBuffered();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte) (-89);
      byteArray0[8] = (byte)6;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 2601);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("' (code ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 124, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) (byte)48);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.io.JsonStringEncoder");
      char[] charArray0 = iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale locale0 = Locale.PRC;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1372, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char char0 = 'J';
      uTF8JsonGenerator0.writeString(charArray0, 1946, 615);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      Object[] objectArray0 = new Object[5];
      mockPrintStream0.format("' (code ", objectArray0);
      mockPrintStream0.append('C');
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrintStream printStream0 = mockPrintStream0.format("' (code ", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeFieldName("' (code ");
      uTF8JsonGenerator0.writeString("' (code ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 7, (-113));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.format("[0", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      char char0 = '\u0085';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream1);
      char[] charArray0 = new char[6];
      uTF8JsonGenerator0.writeStartObject((Object) "[0");
      charArray0[0] = 'P';
      charArray0[1] = '\u0085';
      charArray0[2] = '\u0085';
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0}]u");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 914);
      byteArrayInputStream0.read();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 285, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = "0}]8";
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]8");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(184);
      mockPrintStream0.format("0}]8", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 8000, (ObjectCodec) null, mockPrintStream1, byteArray0, (-3105), false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      byte byte0 = (byte)28;
      byte byte1 = (byte)26;
      byte byte2 = (byte)54;
      byte byte3 = (byte) (-9);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "0}]u", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)26;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 184, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1526, true);
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("%%f'V(Kjp_YQLdV");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57, (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%%f'V(Kjp_YQLdV");
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 372, (-1754));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "%%f'V(Kjp_YQLdV";
      MockPrintStream mockPrintStream0 = new MockPrintStream("%%f'V(Kjp_YQLdV");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte byte0 = (byte)55;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1754), (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)55, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%%f'V(Kjp_YQLdV");
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[2] = '3';
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 56319);
      byteArrayInputStream0.read();
      int int0 = 1896;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, 1896);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "oj=UA";
      MockPrintStream mockPrintStream0 = new MockPrintStream("oj=UA");
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      char[] charArray0 = iOContext1.allocTokenBuffer(1);
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format(">e_KXubTny", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      iOContext1.releaseTokenBuffer(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 23);
      mockPrintStream1.println(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, 2446);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-9);
      byteArray0[2] = (byte) (-110);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0, byteArray0, (byte)55, true);
      uTF8JsonGenerator0.writeNumber(2038);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.io.JsonStringEncoder");
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)127;
      byteArrayOutputStream0.write(byteArray0);
      Locale locale0 = Locale.PRC;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1372, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeString("start an object");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)12;
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 0, 2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("' (code ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 124, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("");
      char[] charArray0 = new char[9];
      charArray0[0] = 'W';
      charArray0[1] = '+';
      charArray0[2] = '{';
      charArray0[3] = '%';
      charArray0[4] = 'G';
      charArray0[5] = 'U';
      charArray0[6] = 'h';
      charArray0[7] = '1';
      charArray0[8] = '%';
      serializedString1.appendQuoted(charArray0, 58);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      mockPrintStream0.close();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1564, (ObjectCodec) null, mockPrintStream0, byteArray0, 1882, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._verifyPrettyValueWrite("' (code ", 1);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 123, 633);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) null;
      objectArray0[1] = (Object) iOContext0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      char[] charArray0 = WriterBasedJsonGenerator.HEX_CHARS;
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("#s}5bssaJz");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.io.JsonStringEncoder");
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale locale0 = Locale.PRC;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1372, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('|');
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeFieldName("ch:;#Y#n{J{2uqCQ");
      uTF8JsonGenerator0.writeString("start an object");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)74;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "G,1[\\[k#H<\\4|";
      MockPrintStream mockPrintStream0 = new MockPrintStream("G,1[[k#H<\u0004|");
      iOContext0.allocTokenBuffer(0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0);
      int int0 = 3509;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3509, (ObjectCodec) null, mockPrintStream2, byteArray0, 2, true);
      char char0 = '{';
      uTF8JsonGenerator0.writeRaw('{');
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)48, (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "com.fasterxml.jackson.core.io.JsonStringEncoder";
      PrintStream printStream0 = mockPrintStream0.format("VALUE_NULL", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0, byteArray0, 0, true);
      String string0 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]8");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(184);
      mockPrintStream0.format("0}]8", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1134, (ObjectCodec) null, mockPrintStream0, byteArray0, 184, true);
      String string0 = "Illegal character '";
      uTF8JsonGenerator0.writeNumber("0}]8");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      int int0 = (-2352);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 512, (-1095));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, (-210));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("%%f'V(jp_YQLdV");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1754), (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)55, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%%f'V(jp_YQLdV");
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = 'Y';
      charArray0[2] = '3';
      charArray0[3] = 'J';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (-1955), 1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1564, (ObjectCodec) null, mockPrintStream0, byteArray0, 1882, false);
      uTF8JsonGenerator0.writeRaw('q');
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("' (code ");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(184);
      mockPrintStream0.format("0}]u", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1134, (ObjectCodec) null, mockPrintStream0, byteArray0, 184, true);
      String string0 = "Illegal character '";
      uTF8JsonGenerator0.writeNumber("0}]u");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      // Undeclared exception!
      try { 
        byteArrayBuilder0.completeAndCoalesce((-2352));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext1;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "}u";
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-110), (ObjectCodec) null, printStream0, byteArray0, 43, false);
      uTF8JsonGenerator0.writeNumber(34);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      Object[] objectArray0 = new Object[5];
      mockPrintStream0.format("' (code ", objectArray0);
      mockPrintStream0.append('C');
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("' (code ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 256, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-59);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oj=UA");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[2] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('p');
      uTF8JsonGenerator0.writeFieldName("oj=UA");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(184);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      mockPrintStream0.println((-880L));
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2706, (ObjectCodec) null, mockPrintStream0, byteArray0, 1364, true);
      uTF8JsonGenerator0.writeNumber(2);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.getOutputBuffered();
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 2, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) iOContext0;
      mockPrintStream0.format("", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 5013, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocTokenBuffer(2);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintStream0.println((long) 0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 56320, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((int) (byte)48);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[13];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}u");
      FileSystemHandling.createFolder(evoSuiteFile0);
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "}u";
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-9);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, printStream0, byteArray0, (byte)55, true);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(344);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      objectArray0[4] = (Object) 'H';
      charArray0[2] = 'e';
      charArray0[3] = 'y';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
      uTF8JsonGenerator0.writeNumber((short) (byte)7);
      mockPrintStream1.append((CharSequence) "0}]u");
      uTF8JsonGenerator0.writeString(charArray0, (-2721), 0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1564, (ObjectCodec) null, mockPrintStream0, byteArray0, 1882, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartArray();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      uTF8JsonGenerator1.configure(jsonGenerator_Feature0, false);
      uTF8JsonGenerator0.writeStartArray(56319);
      uTF8JsonGenerator0._verifyPrettyValueWrite("' (code ", 1);
      uTF8JsonGenerator1._verifyPrettyValueWrite("' (code ", 0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) "}u";
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[4] = (Object) iOContext0;
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-9);
      byteArray0[4] = (byte) (-9);
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte) (-9);
      byteArray0[8] = (byte) (-9);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-9), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      SerializedString serializedString0 = new SerializedString("bnp");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)23);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeNumber((double) 2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "com.fasterxml.jackson.core.io.JsonStringEncoder";
      PrintStream printStream0 = mockPrintStream0.format("VALUE_NULL", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3179, (ObjectCodec) null, mockPrintStream0, byteArray0, 1629, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1629);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[13];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}u");
      FileSystemHandling.createFolder(evoSuiteFile0);
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "}u";
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      char[] charArray0 = iOContext0.allocTokenBuffer(3);
      printStream0.format("", objectArray0);
      MockPrintStream mockPrintStream2 = new MockPrintStream("}u");
      mockPrintStream1.println("");
      FileSystemHandling.createFolder(evoSuiteFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeRaw(charArray0, 3, (int) (byte) (-9));
      uTF8JsonGenerator0.writeNumber(165.0F);
      BigDecimal bigDecimal0 = new BigDecimal((-731));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) null;
      objectArray0[1] = (Object) iOContext0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      char[] charArray0 = WriterBasedJsonGenerator.HEX_CHARS;
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, mockPrintStream1, byteArray0, 19, false);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(2146.585F);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("c|`QA7CyBs");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      iOContext0.allocWriteEncodingBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 119, false);
      String string0 = "write a number";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("write a number");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1564, (ObjectCodec) null, mockPrintStream0, byteArray0, 1882, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._verifyPrettyValueWrite("' (code ", 1);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oj=UA");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) ">e_KXubTny";
      objectArray0[4] = (Object) "oj=UA";
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '\'';
      charArray0[2] = ' ';
      charArray0[3] = 'i';
      charArray0[4] = 'T';
      charArray0[5] = 'K';
      charArray0[6] = 'I';
      uTF8JsonGenerator0.writeString(charArray0, 3, 0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('p');
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("com./asterxml.jackso=.core.io.JsonStringEncoder");
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintStream1;
      objectArray0[2] = (Object) mockPrintStream1;
      objectArray0[3] = (Object) "com./asterxml.jackso=.core.io.JsonStringEncoder";
      PrintStream printStream0 = mockPrintStream1.format("VALUE_NULL", objectArray0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(printStream0);
      byte byte0 = (byte) (-9);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0, byteArray0, 0, true);
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 13);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 115, false);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((float) 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oj=UA");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) ">e_KXubTny";
      objectArray0[4] = (Object) "oj=UA";
      PrintStream printStream0 = mockPrintStream0.format(">e_KXubTny", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 299, (ObjectCodec) null, printStream0, byteArray0, (byte)55, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (byte)55);
      uTF8JsonGenerator0.writeString((String) null);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(1.0F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintStream0.println(2469L);
      byte[] byteArray0 = new byte[3];
      SerializedString serializedString0 = new SerializedString("0}]u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 63, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("0}]u");
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byte byte0 = (byte)63;
      byteArray0[1] = (byte)63;
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      char[] charArray0 = new char[4];
      objectArray0[4] = (Object) 'H';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (int) (byte)63, (-2554));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("oj=UA");
      mockPrintStream0.println();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) ">e_KXubTny";
      objectArray0[4] = (Object) "oj=UA";
      PrintStream printStream0 = mockPrintStream0.format(">e_KXubTny", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 299, (ObjectCodec) null, printStream0, byteArray0, (byte)55, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      int int0 = 0;
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-446), (ObjectCodec) null, printStream0, byteArray0, 2247, false);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber((float) 2247);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.io.JsonStringEncoder");
      iOContext0.allocTokenBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintStream1;
      objectArray0[2] = (Object) mockPrintStream1;
      objectArray0[3] = (Object) "com.fasterxml.jackson.core.io.JsonStringEncoder";
      PrintStream printStream0 = mockPrintStream1.format("VALUE_NULL", objectArray0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(printStream0);
      byte byte0 = (byte) (-9);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0, byteArray0, 0, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-392));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext1;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "}u";
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[2] = (byte) (-110);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, printStream0, byteArray0, (byte)55, true);
      uTF8JsonGenerator0.writeNumber(2038);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('b');
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((short)13);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) "}u";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[4] = (Object) iOContext0;
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte) (-9);
      byteArray0[8] = (byte) (-9);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-9), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      SerializedString serializedString0 = new SerializedString("bnp");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)23);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 13);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = '\u0085';
      charArray0[4] = 'P';
      charArray0[5] = '\u0085';
      charArray0[6] = 'P';
      charArray0[7] = '\u0085';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3495), (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeRaw(charArray0, 2047, (-554));
      System.setCurrentTimeMillis(1000L);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(184);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 48, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-3297));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 288, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 135, true);
      uTF8JsonGenerator0.writeNumber((long) 0);
      String string0 = "Illegal character '";
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale locale0 = Locale.TAIWAN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 53, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1026), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("q?D\"xQcfj_OG|>l@6s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf("0}]u", objectArray0);
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      printStream0.print((-1.0));
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream1 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream1);
      byte[] byteArray0 = new byte[5];
      iOContext0.constructTextBuffer();
      byteArray0[1] = (byte)50;
      objectArray0[1] = (Object) (byte) (-110);
      byteArray0[3] = (byte)84;
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)50, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeString("0}]u");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArray0, (byte)7, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      objectArray0[4] = (Object) 'H';
      charArray0[2] = 'e';
      charArray0[3] = 'y';
      uTF8JsonGenerator0._maximumNonEscapedChar = 174;
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
      uTF8JsonGenerator0.writeNumber((short) (byte)7);
      uTF8JsonGenerator0.writeRaw("0}]u");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)55;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "0}]u", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)84, (ObjectCodec) null, printStream0, byteArray0, Integer.MAX_VALUE, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      MockPrintStream mockPrintStream1 = new MockPrintStream("[0");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      iOContext0.releaseNameCopyBuffer((char[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream2);
      char[] charArray0 = new char[6];
      uTF8JsonGenerator0.writeStartObject((Object) "[0");
      charArray0[0] = 'Y';
      charArray0[1] = '\u0085';
      charArray0[2] = '\u0085';
      charArray0[3] = '\u0085';
      String string0 = "";
      try { 
        uTF8JsonGenerator0.writeNumber("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      String string0 = "Z92<5CVM j/Qo";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jsonEncoding0;
      objectArray0[1] = (Object) iOContext0;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) "Z92<5CVM j/Qo";
      objectArray0[4] = (Object) jsonEncoding0;
      objectArray0[5] = (Object) jsonEncoding0;
      PrintStream printStream0 = mockPrintStream0.format("Z92<5CVM j/Qo", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      int int0 = (-310);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2500), (ObjectCodec) null, pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeObjectField("0}]u", pipedOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed java.io.PipedOutputStream)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[13];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}u");
      FileSystemHandling.createFolder(evoSuiteFile0);
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "}u";
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-9);
      byteArray0[2] = (byte) (-110);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, printStream0, byteArray0, (byte)55, true);
      uTF8JsonGenerator0.writeNumber(2038);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw('b');
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 3);
      uTF8JsonGenerator0.writeString("}u");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      mockPrintStream1.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-110), (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)50, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)50);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-508), (-1954));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      char[] charArray0 = new char[4];
      objectArray0[4] = (Object) 'H';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)63, 3);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 13);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 115, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-1808), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRaw("Z{4zy{3F|/#)}#");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1808
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oj=UA");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) ">e_KXubTny";
      objectArray0[4] = (Object) "oj=UA";
      PrintStream printStream0 = mockPrintStream0.format(">e_KXubTny", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('p');
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      iOContext0.allocWriteEncodingBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 13);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 288, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      objectArray0[4] = (Object) 'H';
      charArray0[2] = 'e';
      charArray0[3] = 'y';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
      uTF8JsonGenerator0.writeNumber((short) (byte)7);
      uTF8JsonGenerator0.writeRaw('o');
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf("0}]u", objectArray0);
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream1 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream1);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)50;
      objectArray0[1] = (Object) (byte) (-110);
      byteArray0[3] = (byte)84;
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1564, (ObjectCodec) null, printStream1, byteArray0, 679, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, (byte) (-110), (byte)32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "0}]u";
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      char[] charArray0 = iOContext0.allocTokenBuffer(810);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeNumber(128);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("write a boolean value");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue(charArray0, 3, 2);
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      char[] charArray0 = iOContext0.allocTokenBuffer((-1766));
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      iOContext0.releaseTokenBuffer(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 344, (ObjectCodec) null, mockPrintStream1);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 15);
      uTF8JsonGenerator0._verifyPrettyValueWrite("7", 3);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' (code ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) ">e_KXubTny";
      objectArray0[4] = (Object) "' (code ";
      PrintStream printStream0 = mockPrintStream0.format(">e_KXubTny", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-310), (ObjectCodec) null, printStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      printStream0.print((double) 56319);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((short)1427);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber((long) (-310));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oj=UA");
      String string0 = ">e_KXubTny";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) ">e_KXubTny";
      objectArray0[4] = (Object) "oj=UA";
      PrintStream printStream0 = mockPrintStream0.format(">e_KXubTny", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 264, (ObjectCodec) null, printStream0, byteArray0, (byte)55, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(184);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)7, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 88);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      char[] charArray0 = WriterBasedJsonGenerator.HEX_CHARS;
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      char[] charArray1 = iOContext1.allocNameCopyBuffer(2);
      mockPrintStream1.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream2 = new MockPrintStream("0}]u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeRaw(charArray1, (-2267), 0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      BigDecimal bigDecimal0 = new BigDecimal(34);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      mockPrintStream0.printf("0}]u", objectArray0);
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      printStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)50;
      objectArray0[1] = (Object) (byte) (-110);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-30));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      serializedString0.asQuotedChars();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-2267), (-54));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "}u";
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-9);
      byteArray0[2] = (byte) (-110);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, printStream0, byteArray0, (byte)55, true);
      uTF8JsonGenerator0.writeNumber(2038);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw('b');
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 3);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("G,1[[k#H<\u0004|");
      iOContext0.allocTokenBuffer(0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)7, false);
      uTF8JsonGenerator0.writeRaw(") as character #", (int) (byte)7, 2);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((short)76);
      uTF8JsonGenerator0.writeBoolean(false);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)102, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)102, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.format("[0", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      iOContext0.releaseNameCopyBuffer((char[]) null);
      byte byte0 = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream1);
      char[] charArray0 = new char[6];
      uTF8JsonGenerator0.writeStartObject((Object) "[0");
      charArray0[0] = 'Y';
      charArray0[1] = '\u0085';
      charArray0[2] = '\u0085';
      charArray0[3] = '\u0085';
      charArray0[4] = '\u0085';
      charArray0[5] = '\u0085';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 3, 1392);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[0] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeRaw(") as character #", 0, (int) (byte)7);
      mockPrintStream1.print((-787.8));
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((short) (byte)7);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(9223372036854775807L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oj=UA");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.format("hrWT", objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)55;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)55, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)50, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("): ", (BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("0Q}]u");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0Q}]u");
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0Q}]u";
      char[] charArray0 = iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0Q}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("0Q}]u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 175, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeRaw(charArray0, 114, 62);
      uTF8JsonGenerator0.writeNumber((float) 2);
      BigDecimal bigDecimal0 = new BigDecimal(2);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      mockPrintStream0.println((long) (byte)7);
      MockPrintStream mockPrintStream2 = new MockPrintStream("0}]u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 23, (ObjectCodec) null, mockPrintStream2, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber(23);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("write a number");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.format("[0", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte byte0 = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream1);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 3, 1392);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      iOContext0.allocWriteEncodingBuffer();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.setEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 13);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 288, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(':');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      iOContext1.allocBase64Buffer();
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 192);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 192, false);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      char[] charArray0 = WriterBasedJsonGenerator.HEX_CHARS;
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      char[] charArray1 = new char[4];
      charArray1[0] = 'y';
      objectArray0[4] = (Object) 'H';
      uTF8JsonGenerator0.writeNumber((short)985);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeFieldName("");
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      char[] charArray0 = new char[4];
      objectArray0[4] = (Object) 'H';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0Q}]u");
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0Q}]u";
      char[] charArray0 = iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0Q}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      iOContext0.releaseTokenBuffer(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 3);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)50;
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte) (-86);
      uTF8JsonGenerator0._verifyPrettyValueWrite("7", 0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)50, (int) (byte)50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      char[] charArray0 = iOContext0.allocTokenBuffer((-1766));
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      iOContext0.releaseTokenBuffer(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 344, (ObjectCodec) null, mockPrintStream1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 15);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("7", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0Q}]u");
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0Q}]u";
      char[] charArray0 = iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0Q}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      iOContext0.releaseTokenBuffer(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 3);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)50;
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte) (-86);
      uTF8JsonGenerator0._verifyPrettyValueWrite("7", 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(219);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      iOContext2.allocWriteEncodingBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2931));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 45, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 13, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-2102), (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0Q}]u");
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0Q}]u";
      char[] charArray0 = iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0Q}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("0Q}]u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 175, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeRaw(charArray0, 114, 62);
      uTF8JsonGenerator0.writeNumber((float) 2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      MockPrintStream mockPrintStream1 = new MockPrintStream("Z,qoxXgp5ay");
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-6740));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream1, byteArray0, 1, false);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_LE;
      iOContext1.setEncoding(jsonEncoding2);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      iOContext1.allocTokenBuffer(21);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "n0mjF\">CIpqh|Y@NU+", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 1011, 925);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oj=UA");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) ">e_KXubTny";
      objectArray0[4] = (Object) "oj=UA";
      PrintStream printStream0 = mockPrintStream0.format(">e_KXubTny", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-299), (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = 'Y';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("7", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "}u";
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[2] = (byte) (-110);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, printStream0, byteArray0, (byte)55, true);
      uTF8JsonGenerator0.writeNumber(2038);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('b');
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 3);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, 173, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)49);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('%');
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      BufferRecycler bufferRecycler3 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler3, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-4224), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4224
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[4] = (Object) iOContext1;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)14;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(344);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte)50;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-107);
      byteArray2[1] = (byte)14;
      byteArray2[2] = (byte)50;
      byteArray2[3] = (byte)14;
      byteArray2[4] = (byte)14;
      byteArray2[5] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)55, (ObjectCodec) null, byteArrayBuilder0, byteArray2, (-201), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte) (-107));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -201
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      iOContext1.allocWriteEncodingBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 13);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      mockPrintStream1.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)50;
      mockPrintStream1.println((long) 2);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-110), (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)50, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)50);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("0}]u");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2240), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2240), true);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.JsonToken");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      char[] charArray0 = iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      int int0 = (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3), (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber(344);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      String string0 = "F+BCDOVe$H$uh{g2";
      SerializedString serializedString1 = new SerializedString("F+BCDOVe$H$uh{g2");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue(charArray0, 1, 91);
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      objectArray0[4] = (Object) 'H';
      charArray0[2] = 'e';
      charArray0[3] = 'y';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(0);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeRaw(") as character #", 0, (int) (byte)7);
      mockPrintStream1.print((-787.8));
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((short) (byte)7);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName(") as character #");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "}u";
      PrintStream printStream0 = mockPrintStream0.format("}u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[2] = (byte) (-110);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, printStream0, byteArray0, (byte)55, true);
      uTF8JsonGenerator0.writeNumber(2038);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('b');
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      objectArray0[4] = (Object) 'H';
      charArray0[3] = 'e';
      uTF8JsonGenerator0.writeNumber((int) (byte)7);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.setEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      char[] charArray0 = iOContext1.allocTokenBuffer(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2469, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw(charArray0, (-2372), 0);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      iOContext0.allocTokenBuffer(0);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeRaw(") as character #", 0, (int) (byte)7);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((short) (byte)7);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      objectArray0[1] = (Object) (byte) (-110);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-30));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      serializedString0.writeUnquotedUTF8(mockPrintStream0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("0}]u", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, true);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      objectArray0[4] = (Object) 'H';
      charArray0[2] = 'e';
      charArray0[3] = 'y';
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      iOContext0.allocTokenBuffer();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)44);
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jsonEncoding0;
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) jsonEncoding0;
      objectArray0[3] = (Object) iOContext1;
      mockPrintStream0.format("Jd", objectArray0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) iOContext1;
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) iOContext0;
      objectArray1[3] = (Object) mockPrintStream0;
      objectArray1[4] = (Object) iOContext1;
      Locale locale0 = new Locale(")", "0}]u");
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "Q)FT]4/e8&Sn|sA", objectArray1);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2416), (ObjectCodec) null, printStream0, byteArray0, 1, false);
      iOContext0.allocTokenBuffer(1);
      int int0 = 512;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oj=UA");
      String string0 = ">e_KXubTny";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) ">e_KXubTny";
      objectArray0[4] = (Object) "oj=UA";
      PrintStream printStream0 = mockPrintStream0.format(">e_KXubTny", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1440, (ObjectCodec) null, mockPrintStream1, byteArray0, 264, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 57343);
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("oj=UA");
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 272, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      iOContext0.allocTokenBuffer(56320);
      charArray0[4] = '.';
      int int0 = 512;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oj=UA");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) ">e_KXubTny";
      objectArray0[4] = (Object) "oj=UA";
      PrintStream printStream0 = mockPrintStream0.format(">e_KXubTny", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-50);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 549, (ObjectCodec) null, mockPrintStream0, byteArray0, 6, true);
      uTF8JsonGenerator0.writeNumber(6);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("Can not ");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = ']';
      charArray0[2] = 'l';
      charArray0[3] = 'K';
      charArray0[4] = 'U';
      charArray0[5] = 'm';
      charArray0[6] = '`';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue(charArray0, 3, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      objectArray0[4] = (Object) 'H';
      charArray0[2] = 'e';
      charArray0[3] = 'y';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("Fy]WC");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oj=UA");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) ">e_KXubTny";
      objectArray0[4] = (Object) "oj=UA";
      PrintStream printStream0 = mockPrintStream0.format(">e_KXubTny", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1440, (ObjectCodec) null, mockPrintStream1, byteArray0, 264, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 57343);
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, true);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      objectArray0[4] = (Object) 'H';
      charArray0[2] = 'e';
      charArray0[3] = 'y';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
      uTF8JsonGenerator0.writeEndArray();
      assertArrayEquals(new byte[] {(byte)93, (byte)0, (byte)0, (byte)34}, byteArray0);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(63);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-939), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (-1514), false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(uTF8StreamJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
      System.setCurrentTimeMillis(1);
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = 'i';
      charArray0[2] = 't';
      charArray0[3] = '(';
      charArray0[4] = 'g';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2423, 114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2423
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 102, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("0}]u", 0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("0Q}]u");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "9tZO[Q^fE9rV/");
      MockPrintStream mockPrintStream0 = new MockPrintStream("0Q}]u");
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0Q}]u";
      char[] charArray0 = iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0Q}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      iOContext0.releaseTokenBuffer(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 3);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)50;
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte) (-86);
      uTF8JsonGenerator0._verifyPrettyValueWrite("7", 0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals(49, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, true);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      objectArray0[4] = (Object) 'H';
      charArray0[2] = 'e';
      charArray0[3] = 'y';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
      uTF8JsonGenerator0.writeNumber((short)110);
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "0}]u";
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-652), (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 3, (-1533));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0Q}]u");
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      mockPrintStream0.append((CharSequence) "0Q}]u");
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)14;
      mockPrintStream0.write(byteArray0);
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0Q}]u";
      iOContext0.allocTokenBuffer(344);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream1, byteArray1, (byte)90, false);
      uTF8JsonGenerator0.writeNumber(512);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("0Q}]u", (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[22];
      charArray0[0] = '';
      charArray0[1] = '$';
      charArray0[2] = '';
      int int0 = (-752);
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 398, (ObjectCodec) null, (OutputStream) null, byteArray0, (-4053), false);
      uTF8JsonGenerator0._verifyValueWrite("==*O;s3@R8'D{qr5N");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator((IOContext) null, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 48, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 870, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, true);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      objectArray0[4] = (Object) 'H';
      charArray0[2] = 'e';
      charArray0[3] = 'y';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("0}]u", (-1909));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      objectArray0[1] = (Object) (byte) (-110);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)55;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)84, true);
      uTF8JsonGenerator0.writeNumber(1926);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 837, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeProperty("mJRnKc>HsR9k/q");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate2 = new FilteringGeneratorDelegate(filteringGeneratorDelegate1, tokenFilter0, false, false);
      filteringGeneratorDelegate2.getCodec();
      uTF8JsonGenerator0.writeRaw(charArray0, (-2), 0);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) mockPrintStream0;
      objectArray1[1] = (Object) printStream0;
      objectArray1[3] = (Object) jsonEncoding0;
      printStream0.format("0}]u", objectArray1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3019, (ObjectCodec) null, printStream0, byteArray1, 1439, false);
      uTF8JsonGenerator0.writeRawValue("0}]u");
      uTF8JsonGenerator0.writeStartArray();
      Object object0 = null;
      uTF8JsonGenerator0.writeNumber(1);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 56320, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      int int0 = 1614;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1614);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3035, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 2048, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("({dKv7c^FG");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-110), (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      assertArrayEquals(new byte[] {(byte)102, (byte)97, (byte)108, (byte)115, (byte)101, (byte)32, (byte)0}, byteArray0);
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      mockPrintStream0.print((Object) "0}]u");
      objectArray0[1] = (Object) (byte) (-110);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-30));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(127);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("0}]u", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-110);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-110), (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      objectArray0[4] = (Object) 'H';
      charArray0[2] = 'e';
      charArray0[3] = 'y';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("(@SE6fi)8;itx=3A<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) mockPrintStream0;
      objectArray1[1] = (Object) printStream0;
      objectArray1[3] = (Object) jsonEncoding0;
      printStream0.format("0}]u", objectArray1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3019, (ObjectCodec) null, printStream0, byteArray0, 1439, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._entityBuffer = byteArray0;
      int int0 = (-796);
      try { 
        uTF8JsonGenerator0._outputSurrogates(3, 1439);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x3, second 0x59f
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) jsonEncoding0;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) iOContext1;
      objectArray0[7] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, (-2937), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2937
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(4842);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8000, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 8000, true);
      char char0 = '$';
      char char1 = '';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      objectArray0[4] = (Object) 'H';
      charArray0[2] = 'e';
      charArray0[3] = 'y';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("(@SE6fi)8;itx=3A<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) mockPrintStream0;
      objectArray1[1] = (Object) printStream0;
      objectArray1[3] = (Object) jsonEncoding0;
      printStream0.format("0}]u", objectArray1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3019, (ObjectCodec) null, printStream0, byteArray0, 1439, false);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-796), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      char[] charArray0 = iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      iOContext0.releaseTokenBuffer(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 3);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)50;
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte) (-86);
      uTF8JsonGenerator0._verifyPrettyValueWrite("7", 0);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2452.1F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.setEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0.writeRaw("Z", 123, (-824));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 58);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2048, 4096, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 12, (ObjectCodec) null, pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("brS e>F(KE:@", 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[22];
      charArray0[0] = '';
      charArray0[1] = '$';
      charArray0[2] = '';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-922), (ObjectCodec) null, mockPrintStream1, byteArray0, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cYyO<");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(58);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(58);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1114111, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 2048, false);
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '';
      charArray0[6] = '';
      charArray0[7] = '';
      uTF8JsonGenerator0.writeRaw(charArray0, 33, (-1397));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, (-1966), (-1966));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.setEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      char char0 = '$';
      char char1 = '';
      char[] charArray0 = new char[22];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2452.1F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, filterOutputStream0, false);
      iOContext1.releaseReadIOBuffer((byte[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-60), false);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      objectArray0[4] = (Object) 'H';
      charArray0[2] = 'e';
      charArray0[3] = 'y';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, filterOutputStream0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-60);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1283), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-60), false);
      assertEquals((-60), uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.close();
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = "0}]u";
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      byte[] byteArray0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MIN_VALUE, (ObjectCodec) null, mockPrintStream0, (byte[]) null, 3, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1361), (ObjectCodec) null, printStream0, byteArray0, 4, false);
      uTF8JsonGenerator0.writeNumber(44);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawValue("0}]u", 2, 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 192, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1614);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3035, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 2048, true);
      char[] charArray0 = new char[4];
      charArray0[2] = '';
      charArray0[3] = '';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 1614);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 610, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-60);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1~\"ojW+iJtB");
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)49;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, (OutputStream) null, byteArray0, 8000, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      boolean boolean0 = true;
      int int0 = (-271);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 261, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, (-271), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 3, (-82));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -271
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      char[] charArray0 = iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      iOContext0.releaseTokenBuffer(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 3);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)50;
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte) (-86);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pushbackInputStream0, byteArray1, (-3401));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      objectArray0[1] = (Object) (byte) (-110);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-30));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("0}]u", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      boolean boolean1 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      SerializedString serializedString0 = new SerializedString("write a string");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      iOContext0.allocTokenBuffer(344);
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)7, false);
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = 'H';
      charArray0[2] = 'e';
      charArray0[3] = 'y';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 183);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext0.allocTokenBuffer();
      short short0 = (short) (-4044);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors", 123, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      char[] charArray0 = new char[22];
      charArray0[0] = '';
      charArray0[1] = '$';
      charArray0[2] = '';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)49, (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)49, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      iOContext1.allocWriteEncodingBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 13);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 288, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 2, false);
      String string0 = "Illegal character '";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("Illegal character '");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte)111;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2233), (ObjectCodec) null, byteArrayBuilder0, byteArray0, 8, true);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, (-2233), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)49;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 610, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors", 2, 264);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      int int0 = 125;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1690);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      int int1 = 32;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 32, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 11, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-365), (ObjectCodec) null, mockPrintStream1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("f7;G=fr%nn5", (-1002), 53);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0._releaseBuffers();
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 185, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1495);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oj=UA");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) ">e_KXubTny";
      objectArray0[4] = (Object) ">e_KXubTny";
      PrintStream printStream0 = mockPrintStream0.format(">e_KXubTny", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-50);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1224), (ObjectCodec) null, mockPrintStream1, byteArray0, 50, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2385);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 261, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 261
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors", 123, 0);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 272, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '.';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)44;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 2;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, (-1701), 1275);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1701
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeRaw(charArray0, 145, 145);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-75);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, (OutputStream) null, byteArray0, 719, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(719);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0}]u");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) "0}]u";
      PrintStream printStream0 = mockPrintStream0.format("0}]u", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber(0);
      assertArrayEquals(new byte[] {(byte)48, (byte)50, (byte) (-110), (byte)84, (byte)55}, byteArray0);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      assertArrayEquals(new byte[] {(byte)48, (byte)32, (byte)34, (byte)32, (byte)34}, byteArray0);
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      boolean boolean1 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 3, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)81;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, filterOutputStream0, byteArray0, (byte) (-60), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 13, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 93, (ObjectCodec) null, stringWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocWriteEncodingBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2515), (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'y';
      charArray0[2] = '.';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      iOContext0.allocTokenBuffer();
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 125, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }
}
