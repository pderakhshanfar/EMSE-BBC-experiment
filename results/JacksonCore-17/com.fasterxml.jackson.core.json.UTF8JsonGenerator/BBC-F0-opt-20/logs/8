* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-20
* Going to generate test cases for class: com.fasterxml.jackson.core.json.UTF8JsonGenerator
* Starting Client-0
* Connecting to master process on port 4813
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonCore-17/target/classes
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.core.json.UTF8JsonGenerator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2877
* Using seed 2418473412
* Starting evolution
bbc usage percentage is: 20%
* Initial Number of Goals in DynaMOSA = 783 / 2877
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 602s and 120 generations, 106211 statements, best individual has fitness: 1085.0
* Minimizing test suite
[MASTER] 07:47:49.363 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 71%
* Total number of goals: 979
* Number of covered goals: 696
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 68%
* Total number of goals: 539
* Number of covered goals: 365
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 107
* Number of covered goals: 107
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 52%
* Total number of goals: 716
* Number of covered goals: 374
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 36%
* Total number of goals: 14
* Number of covered goals: 5
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 96%
* Total number of goals: 45
* Number of covered goals: 43
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 84%
* Total number of goals: 45
* Number of covered goals: 38
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 68%
* Total number of goals: 539
* Number of covered goals: 364
* Generated 281 tests with total length 5156
* Resulting test suite's coverage: 66% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 07:48:58.722 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7942833333333333% of time used, but only 24/281 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 3%
[MASTER] 07:49:12.658 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 07:49:21.932 [logback-1] WARN  JUnitAnalyzer - Failed to create tmp dir
[MASTER] 07:49:21.931 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_44_1633679361931
[MASTER] 07:49:23.173 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:49:23.732 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:49:24.383 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:49:24.780 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:49:25.382 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:49:26.226 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:50:00.997 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_128_tmp__ESTest.test0(UTF8JsonGenerator_128_tmp__ESTest.java:121)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 07:50:00.999 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);

StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
assertNotNull(stringReader0);

CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(0, charsToNameCanonicalizer0.size());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertNotNull(charsToNameCanonicalizer0);

ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(0, charsToNameCanonicalizer0.size());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertNull(readerBasedJsonParser0.getCurrentName());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertEquals(3, readerBasedJsonParser0.getFeatureMask());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertFalse(readerBasedJsonParser0.isClosed());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertNull(readerBasedJsonParser0.getCurrentToken());
assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertFalse(readerBasedJsonParser0.hasCurrentToken());
assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertNotNull(readerBasedJsonParser0);

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertNotNull(tokenFilter0);

byte[] byteArray0 = new byte[7];
byteArray0[0] = (byte) (-61);
byteArray0[5] = (byte) (-61);
FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 6, false);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertFalse(fileDescriptor0.valid());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertEquals(33, uTF8JsonGenerator0.getFeatureMask());
assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertFalse(uTF8JsonGenerator0.isClosed());
assertArrayEquals(new byte[] {(byte) (-61), (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-61), (byte)0}, byteArray0);
assertEquals(7, byteArray0.length);
assertNotNull(uTF8JsonGenerator0);

BigInteger bigInteger0 = new BigInteger(byteArray0);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short) (-15616), bigInteger0.shortValue());
assertArrayEquals(new byte[] {(byte) (-61), (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-61), (byte)0}, byteArray0);
assertEquals(7, byteArray0.length);
assertNotNull(bigInteger0);

uTF8JsonGenerator0.writeNumber(bigInteger0);

[MASTER] 07:50:11.469 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'UTF8JsonGenerator_ESTest' to results/JacksonCore-17/com.fasterxml.jackson.core.json.UTF8JsonGenerator/BBC-F0-opt-20/tests/8
* Done!

* Computation finished
