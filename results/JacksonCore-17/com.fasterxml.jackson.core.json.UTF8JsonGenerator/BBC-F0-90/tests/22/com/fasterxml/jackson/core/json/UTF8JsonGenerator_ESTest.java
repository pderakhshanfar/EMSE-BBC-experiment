/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:13:28 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 34, 2975);
      uTF8JsonGenerator0.writeRaw('Q');
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 57, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      uTF8JsonGenerator0.writeStartArray(48);
      byteArray1[0] = (byte) (-1);
      byteArray0[1] = (byte) (-41);
      mockPrintStream0.println("UTF-32LE");
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)91;
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeString("");
      System.setCurrentTimeMillis((byte)101);
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile(") does not override copy(); it has to", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print((long) (byte)5);
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 39, (ObjectCodec) null, mockPrintStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(") does not override copy(); it has to");
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0, (-306));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte byte0 = (byte)3;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 934, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      byte[] byteArray0 = new byte[2];
      System.setCurrentTimeMillis(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("$A(5s\"C(_");
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-41);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2196, false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      System.setCurrentTimeMillis(996L);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = ':';
      charArray0[2] = 'P';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 0, 108);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-41);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Current cont`xt not an ARRAY bdt ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Malformed numeric value '");
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-41);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2196, false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      System.setCurrentTimeMillis(996L);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeUnquotedUTF8(mockPrintStream0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("Current cont`xt not an ARRAY bdt ", 0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockFile mockFile0 = new MockFile(": was expecting 4losing quote for a string value", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-16);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1522, (ObjectCodec) null, mockPrintStream0, byteArray0, 2196, false);
      BigDecimal bigDecimal0 = new BigDecimal((long) 3);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)34, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1292), false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[16];
      charArray0[1] = 'a';
      charArray0[0] = '9';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-WM32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, '9', (ObjectCodec) null, mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "UTF-WM32LE", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 73, (ObjectCodec) null, mockPrintStream0, byteArray0, 106, false);
      iOContext2.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator1.writeNumber("q=(HqjF*)eB.XLlRH");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Current context not an object but ");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNL$yr~[?0");
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4297), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      pipedOutputStream0.flush();
      uTF8JsonGenerator0.writeNumber((short)15);
      uTF8JsonGenerator0.getOutputTarget();
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      System.setCurrentTimeMillis((-9223372036854775808L));
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, mockFileOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-128), true);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      ObjectCodec objectCodec0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2056, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      iOContext1.allocWriteEncodingBuffer();
      String string0 = "'#v\"NL(/Cozq^zCi UE";
      try { 
        uTF8JsonGenerator0.writeFieldName("'#v\"NL(/Cozq^zCi UE");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      file0.setWritable(true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2260), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      uTF8JsonGenerator0.writeBinaryField(")", byteArray0);
      try { 
        uTF8JsonGenerator0.writeFieldName("write a raw (unencoded) value");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character)", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      byte[] byteArray0 = new byte[9];
      boolean boolean1 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1047, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeObjectFieldStart("");
      String string0 = "q^:NVt`kU?m75b";
      uTF8JsonGenerator0.writeFieldName("q^:NVt`kU?m75b");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      System.setCurrentTimeMillis(55296);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2196, (ObjectCodec) null, mockPrintStream0, byteArray0, 17, false);
      uTF8JsonGenerator0._verifyValueWrite(": was expecting 4losing quote for a string value");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      System.setCurrentTimeMillis(0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer.createRoot();
      byte byte0 = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 536870910, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeFieldName("O-MsY*\"9OI>Gw");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-41);
      byteArray0[0] = (byte)117;
      byteArray0[3] = (byte) (-41);
      iOContext0.allocReadIOBuffer((int) (byte) (-41));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1522, (ObjectCodec) null, mockPrintStream0, byteArray0, 2196, true);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      System.setCurrentTimeMillis(996L);
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = 'n';
      charArray0[2] = ' ';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1522, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = null;
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character)", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      boolean boolean1 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber(0L);
      BigDecimal bigDecimal0 = new BigDecimal((long) (byte) (-16));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 101, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 934, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray1 = iOContext2.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(55296);
      BigInteger.probablePrime(1272, mockRandom0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (byte)3, 0);
      uTF8JsonGenerator0.writeRaw('Q');
      System.setCurrentTimeMillis((-564L));
      char[] charArray0 = new char[4];
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      uTF8JsonGenerator0.writeString(charArray0, 1504, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(23);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 927, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter2, true, true);
      filteringGeneratorDelegate0.getCodec();
      JsonGenerator jsonGenerator1 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeBinaryField("Current context not an ARRAY but ", byteArrayBuilder0.NO_BYTES);
      jsonGenerator1.version();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      System.setCurrentTimeMillis(927);
      jsonGenerator1.writeStartObject();
      jsonGenerator0.close();
      // Undeclared exception!
      try { 
        jsonGenerator1.writeRaw('Q');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockFile mockFile0 = new MockFile(": was expecting 4losing quote for a string value", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 13, false);
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      try { 
        uTF8JsonGenerator0.writeFieldName("line.separator");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockFile mockFile0 = new MockFile(": was expecting 4losing quote for a string value", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-16);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      int int0 = 13;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 13, false);
      uTF8JsonGenerator0.writeBinaryField("", byteArray1);
      try { 
        uTF8JsonGenerator0.writeFieldName("line.separator");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IGNORE_UNKNOWN");
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile("O0t~", "O0t~", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-41);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "O0t~", false);
      file0.delete();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 113, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0._verifyValueWrite("IGNORE_UNKNOWN");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      System.setCurrentTimeMillis(486L);
      uTF8JsonGenerator0.close();
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNL$yr~[?0");
      byte[] byteArray0 = new byte[9];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-3), 1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-1555), false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("DNL$yr~[?0");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeBinary((InputStream) pipedInputStream0, 8000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1555
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character)", "Split surrogate on writeRaw() input (last character)", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1047, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[1] = 'f';
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character)", true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 17, true);
      uTF8JsonGenerator1.writeRaw("u-,C]<:|JY");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)0;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNumber((short)538);
      BigDecimal bigDecimal0 = new BigDecimal((long) 56319);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character)", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2048, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("'#v\"NL(/Cozq^zCi UE");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      System.setCurrentTimeMillis(55296);
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNL$yr~[?0");
      byte[] byteArray0 = new byte[9];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-3), 1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("DNL$yr~[?0");
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.writeNumber("FxbWO");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[16];
      charArray0[1] = 'a';
      charArray0[0] = '9';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      String string0 = "UTF-WM32LE";
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-WM32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, '9', (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U`q(k?rdKz");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream1, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray1, 1, false);
      uTF8JsonGenerator1.writeNumber((short) (-1250));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Sdk/px<!H)KR");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 934, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray1 = iOContext2.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(55296);
      BigInteger.probablePrime(1272, mockRandom0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (byte)3, 0);
      uTF8JsonGenerator0.writeRaw('Q');
      System.setCurrentTimeMillis((-564L));
      char[] charArray0 = new char[4];
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      uTF8JsonGenerator0.writeString(charArray0, 1504, 0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("g>{K)e`l6CQ4");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      file0.setWritable(true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((long) 0);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2272), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      uTF8JsonGenerator0.writeNumber(0.0);
      file0.setWritable(true);
      uTF8JsonGenerator0.writeString("");
      System.setCurrentTimeMillis(0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      try { 
        uTF8JsonGenerator0._writePPFieldName("Split surrogate on writeRaw() input (last character)");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character)", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1047, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      iOContext0.allocWriteEncodingBuffer();
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      charArray0[8] = 'f';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 1375);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[16];
      charArray0[1] = 'a';
      charArray0[0] = '9';
      charArray0[3] = 'P';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-WM32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, '9', (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.flush();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-2167), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator1.writeBinaryField("", byteArray1);
      uTF8JsonGenerator0.writeFieldName("");
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(3, mockRandom0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator1.writeNumber(bigInteger0);
      try { 
        uTF8JsonGenerator1.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(23);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 927, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter2, true, true);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeBinaryField("Current context not an ARRAY but ", byteArrayBuilder0.NO_BYTES);
      try { 
        uTF8JsonGenerator0.writeFieldName("O]IJ1");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MIN_VALUE, (ObjectCodec) null, objectOutputStream0, byteArray0, 0, true);
      iOContext0.allocWriteEncodingBuffer();
      char char0 = 'j';
      uTF8JsonGenerator0.writeRaw('j');
      objectOutputStream0.writeUnshared((Object) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = '%';
      charArray0[3] = '%';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNL$yr~[?0");
      byte[] byteArray0 = new byte[9];
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      mockPrintStream0.print((long) 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1998, false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = '%';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = '_';
      charArray0[8] = 'f';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[16];
      charArray0[1] = 'a';
      charArray0[0] = '9';
      charArray0[3] = 'P';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-WM32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, '9', (ObjectCodec) null, mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      System.setCurrentTimeMillis(1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      file0.setWritable(true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2273), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      uTF8JsonGenerator0.writeNumber((-1567.9));
      file0.setWritable(true);
      uTF8JsonGenerator0.writeString("");
      System.setCurrentTimeMillis(0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      try { 
        uTF8JsonGenerator0._writePPFieldName("Split surrogate on writeRaw() input (last character)");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      file0.setWritable(true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      byte[] byteArray0 = new byte[9];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57, (ObjectCodec) null, mockPrintStream0, byteArray0, 57, true);
      uTF8JsonGenerator0.writeNumber(Double.NaN);
      file0.setWritable(true);
      uTF8JsonGenerator0.writeString("");
      System.setCurrentTimeMillis((-1313L));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName("Split surrogate on writeRaw() input (last character)");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-41);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1522, (ObjectCodec) null, mockPrintStream0, byteArray0, 2196, false);
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      uTF8JsonGenerator0.writeString(charArray0, 110, (-2));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "p!w}hwtA_", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-26);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteArray0[1] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3276), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 124, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.getCodec();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(2, mockRandom0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 56319);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", "Split surrogate on writeRaw() input (last character)", (File) mockFile0);
      file0.setWritable(true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[11];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2272), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      uTF8JsonGenerator0.writeNumber((-1567.9));
      file0.setWritable(true);
      uTF8JsonGenerator0.writeString("K");
      System.setCurrentTimeMillis(0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      try { 
        uTF8JsonGenerator0._writePPFieldName("Split surrogate on writeRaw() input (last character)");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-41);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1522, (ObjectCodec) null, mockPrintStream0, byteArray0, 2196, false);
      MockRandom mockRandom0 = new MockRandom(56319);
      BigInteger.probablePrime(440, mockRandom0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2196, (byte) (-41));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNL$yr~[?0");
      byte[] byteArray0 = new byte[9];
      int int0 = (-4297);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4297), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber((short)15);
      uTF8JsonGenerator0.getOutputTarget();
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      String string0 = "p uqwaj%dJ";
      try { 
        uTF8JsonGenerator0.writeString("p uqwaj%dJ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-41);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeBinaryField("Current cont`xt not an ARRAY bdt ", byteArray1);
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      String string0 = "";
      MockFile mockFile0 = new MockFile(": was expecting 4losing quote for a string value", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-16);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1522, (ObjectCodec) null, mockPrintStream0, byteArray0, 2196, false);
      uTF8JsonGenerator0.writeNumber((long) 3);
      BigDecimal bigDecimal0 = new BigDecimal((long) 3);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("rg5^W'NoS2I(");
      File file0 = MockFile.createTempFile("UW-3_o", "UW-3_o", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 1);
      mockFile0.setWritable(false);
      uTF8JsonGenerator0.writeString((String) null);
      System.setCurrentTimeMillis((-842L));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 934, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray1 = iOContext2.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(55296);
      BigInteger.probablePrime(1272, mockRandom0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (byte)3, 0);
      uTF8JsonGenerator0.writeRaw('Q');
      System.setCurrentTimeMillis((-564L));
      char[] charArray0 = new char[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1504, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-41);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1522, (ObjectCodec) null, mockPrintStream0, byteArray0, 2196, false);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "BKY&oYYtuDW{tH6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("BKY&oYYtuDW{tH6");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 98, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      int[] intArray0 = new int[0];
      uTF8JsonGenerator0.writeArray(intArray0, 3, 0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(1688.0F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, bufferedOutputStream0);
      char[] charArray0 = new char[1];
      char char0 = '&';
      charArray0[0] = '&';
      uTF8JsonGenerator0.writeString(charArray0, 0, (-988));
      String string0 = "";
      boolean boolean0 = true;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", true, '&', 65551);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MIN_VALUE, (ObjectCodec) null, objectOutputStream0, byteArray0, 0, true);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "g>{K)eN`l6CQ4";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)eN`l6CQ4", true);
      byte byte0 = (byte)3;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      mockFileOutputStream0.write(byteArray0, 2, 12);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "p!w}hwA_", false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3276), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 124, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.getCodec();
      jsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.flush();
      // Undeclared exception!
      try { 
        jsonGenerator0.writeBinaryField("", byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      String string0 = "Split surrogate on writeRaw() input (last character)";
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      file0.setWritable(true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2272), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      uTF8JsonGenerator0.writeNumber((-1567.9));
      file0.setWritable(true);
      uTF8JsonGenerator0.writeString("");
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("Split surrogate on writeRaw() input (last character)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      file0.setWritable(true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2272), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = ' ';
      charArray0[3] = ' ';
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      String string0 = "";
      MockFile mockFile0 = new MockFile(": was expecting 4losing quote for a string value", "");
      MockFile.createTempFile(": was expecting 4losing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-16);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-16), false);
      String string1 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      file0.setWritable(true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2272), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      String string0 = "";
      MockFile mockFile0 = new MockFile(": was expecting 4losing quote for a string value", "");
      MockFile.createTempFile(": was expecting 4losing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-16);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1522, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-16), false);
      String string1 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      int int0 = Integer.MIN_VALUE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MIN_VALUE, (ObjectCodec) null, objectOutputStream0, byteArray0, 0, true);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeRaw('j');
      objectOutputStream0.writeUnshared((Object) null);
      System.setCurrentTimeMillis((-37L));
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = '%';
      charArray0[3] = '%';
      charArray0[4] = 'j';
      charArray0[5] = '%';
      charArray0[6] = 'j';
      charArray0[7] = 'j';
      int int1 = (-2272);
      SerializedString serializedString0 = new SerializedString("w*K/<)@$VX'F");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("BKY&oYYtuDW{tH6");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      int[] intArray0 = new int[0];
      uTF8JsonGenerator0.writeArray(intArray0, 3, 0);
      uTF8JsonGenerator0.writeNumber((short)21);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      file0.setWritable(true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1047, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("q^:NVt`kU?m75b");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      System.setCurrentTimeMillis(55296);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeString("write a raw (unencoded) value");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, bufferedOutputStream0);
      char[] charArray0 = new char[1];
      char char0 = '&';
      charArray0[0] = '&';
      uTF8JsonGenerator0.writeString(charArray0, 0, (-988));
      String string0 = "";
      boolean boolean0 = true;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", true, '&', 65535);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "koc+g_");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-470), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 10, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, (-2288));
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray1 = iOContext2.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(55296);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      iOContext3.withEncoding(jsonEncoding2);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 3, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)48);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Current context not an object but ");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNL$yr~[?0");
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4297), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short)15);
      uTF8JsonGenerator0.getOutputTarget();
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      System.setCurrentTimeMillis((-9223372036854775808L));
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext2.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = new SerializedString("g>{K)e`l6CQ4");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)eN`l6CQ4", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      mockFileOutputStream0.write(byteArray0, 2, 12);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "p!w}hwA_", false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3276), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 124, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeStartObject((Object) iOContext1);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 98, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, (-304), false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec1 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2335), (ObjectCodec) null, pipedOutputStream0, byteArray0, 113, false);
      try { 
        uTF8JsonGenerator0.writeNumber(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      mockFile0.getAbsoluteFile();
      file0.setWritable(true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2272), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      uTF8JsonGenerator0.writeNumber((-1567.9));
      file0.setWritable(true);
      uTF8JsonGenerator0.writeString("");
      System.setCurrentTimeMillis(0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      try { 
        uTF8JsonGenerator0._writePPFieldName("Split surrogate on writeRaw() input (last character)");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      uTF8JsonGenerator0.writeStartArray(48);
      byteArray1[0] = (byte) (-1);
      byteArray0[1] = (byte) (-41);
      mockPrintStream0.println("UTF-32LE");
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)91;
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeString("");
      System.setCurrentTimeMillis((byte)101);
      try { 
        uTF8JsonGenerator0._writePPFieldName("UTF-32LE");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNL$yr~[?0");
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4297), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short)15);
      uTF8JsonGenerator0.getOutputTarget();
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 34, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 57, false);
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2182, (ObjectCodec) null, pipedOutputStream0, byteArray0, 58, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 279, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator1.writeFieldName("V2NtyF^[JRk");
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "koc+g_");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-470), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 3, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 69, 0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 498, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, true);
      SerializedString serializedString0 = new SerializedString("En\"dEW");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MIN_VALUE, (ObjectCodec) null, objectOutputStream0, byteArray0, 0, true);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeRaw('j');
      System.setCurrentTimeMillis((-37L));
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = '%';
      charArray0[2] = 'j';
      charArray0[3] = '%';
      charArray0[4] = 'j';
      charArray0[5] = '%';
      charArray0[6] = 'j';
      charArray0[7] = 'j';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-2272), Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2272
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[4];
      charArray0[1] = 'a';
      charArray0[2] = '9';
      charArray0[3] = '^';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, '\u0000', (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeQuotedUTF8(mockPrintStream0);
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray1, (byte)5, 1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byte byte0 = (byte)28;
      int int0 = 999973;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MIN_VALUE, (ObjectCodec) null, objectOutputStream0, byteArray0, 0, true);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      long long0 = (-3171L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<Yy)O`");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1376, (ObjectCodec) null, mockPrintStream0);
      mockPrintStream0.println((String) null);
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeQuotedUTF8(mockPrintStream0);
      byte[] byteArray0 = serializedString0.asQuotedUTF8();
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext((BufferRecycler) null, object0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      IOContext iOContext3 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext3, 56320, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1541), true);
      SerializedString serializedString1 = new SerializedString("<Yy)O`");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a binary value");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      mockPrintStream0.println("write a binary value");
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)5;
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.writeQuotedUTF8(mockPrintStream0);
      serializedString1.asQuotedUTF8();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, mockPrintStream0, byteArray1, 56319, true);
      SerializedString serializedString2 = new SerializedString("");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "koc+g_");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-470), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 10, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      mockFileOutputStream0.write(byteArray0, 2, 12);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1), true);
      uTF8JsonGenerator0.writeFieldName("");
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": was expecting closing quote for a string value");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-66);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-232), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw((String) null, 47, (-2168));
      SerializedString serializedString0 = new SerializedString("|9,u`DZ+)bo{");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName(": was expecting closing quote for a string value");
      uTF8JsonGenerator0.writeRaw('*');
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-41);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1522, (ObjectCodec) null, mockPrintStream1, byteArray0, 2196, false);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeStartObject();
      System.setCurrentTimeMillis(0L);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      file0.setWritable(true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1047, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("q^:NVt`kU?m75b");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      System.setCurrentTimeMillis(55296);
      uTF8JsonGenerator0.writeNumber((-1L));
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("g>{K)e`l6CQ4");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "7(i+2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)0;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("g>{K)e`l6CQ4");
      TokenFilter tokenFilter2 = tokenFilter1.includeElement(97);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter2, false, false);
      filteringGeneratorDelegate0.writeNumberField("Kz=6$.FEcMH(57", 538);
      filteringGeneratorDelegate0.getCodec();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      System.setCurrentTimeMillis((-1929L));
      uTF8JsonGenerator0.writeNull();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      jsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      jsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintStream0.print((-1L));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": was expecting closing quote for a string value");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte) (-58);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 124, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber((float) 12);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print((-28L));
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-41);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)35, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw("xGHM4se[r", (int) (byte)35, (-3489));
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeRaw('v');
      BigDecimal bigDecimal0 = new BigDecimal(282);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((short)2033);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "IGNORE_UNKNOWN");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", ": was expecting closing quote for a string value", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-41);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1522, (ObjectCodec) null, mockPrintStream1, byteArray0, 2196, false);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      System.setCurrentTimeMillis(996L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("Current cont`xt not an ARRAY bdt ", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[4];
      charArray0[1] = 'a';
      charArray0[2] = '9';
      charArray0[3] = '^';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, '\u0000', (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream1, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray1, 1, false);
      uTF8JsonGenerator1.writeNumber((short) (-1250));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("nF.:hq'MBt0,Yr$", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockFile mockFile0 = new MockFile(": was expecting 4losing quote for a string value", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte)117;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1047, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      iOContext0.allocWriteEncodingBuffer();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.probablePrime(53, mockRandom0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[4];
      charArray0[1] = 'a';
      charArray0[2] = '9';
      charArray0[3] = '^';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, '\u0000', (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream1, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray1, 1, false);
      uTF8JsonGenerator1.writeNumber((short) (-1250));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print((-28L));
      mockPrintStream0.checkError();
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)12, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw("xGHM4se[r", (int) (byte)12, (-3489));
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeRaw('v');
      uTF8JsonGenerator0.writeString("<#iK_htoz.");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", ": was expecting closing quote for a string value", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      MockFile.createTempFile(": was expecting closing quote for a string value", "line.separator", (File) mockFile0);
      byteArray0[0] = (byte)12;
      mockFile0.getAbsoluteFile();
      byteArray0[1] = (byte) (-41);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ": was expecting closing quote for a string value", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(1);
      System.setCurrentTimeMillis((-2144L));
      uTF8JsonGenerator0.writeNull();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("g>{K)e`l6CQ4");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "7(i+2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)0;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("g>{K)e`l6CQ4");
      TokenFilter tokenFilter2 = tokenFilter1.includeElement(97);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter2, false, false);
      filteringGeneratorDelegate0.getCodec();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      System.setCurrentTimeMillis((-1929L));
      uTF8JsonGenerator0.writeNull();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      jsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": was expecting closing quote for a string value");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(124, mockRandom0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 124, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('.');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      int int0 = 200;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 200, true);
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNL$yr~[?0");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)119;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, (byte)119);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, pipedOutputStream0, byteArray0, 10, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": was expecting closing quote for a string value");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte) (-58);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 124, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber((float) 12);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[4];
      charArray0[1] = 'a';
      charArray0[2] = '9';
      charArray0[3] = '^';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, '\u0000', (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream1, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray1, 1, false);
      uTF8JsonGenerator1.writeNumber((short) (-1250));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNL$yr~[?0");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)119;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, (byte)119);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4684), (ObjectCodec) null, bufferedOutputStream0, byteArray0, (byte)119, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) (byte)119);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, (byte)65);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)65, false);
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 312, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3400, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('v');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", ": was expecting closing quote for a string value", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      ObjectCodec objectCodec0 = null;
      int int0 = (-3010);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3010), (ObjectCodec) null, mockPrintStream0, byteArray0, (-595), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-595));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -595
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("g>{K)e`l6CQ4");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "7(i+2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)0;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("g>{K)e`l6CQ4");
      int int0 = 97;
      TokenFilter tokenFilter2 = tokenFilter1.includeElement(97);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter2, false, false);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRaw("7(i+2");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator((IOContext) null, 0, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)3;
      mockFileOutputStream0.write(byteArray0, 2, 12);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "p!w}hwA_", false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-26);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6:4P[B|cxL~nd");
      byteArray1[1] = (byte)3;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)3, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 125, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("p!w}hwA_");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": was expecting closing quote for a string value");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeFieldName(": was expecting closing quote for a string value");
      try { 
        uTF8JsonGenerator0.writeFieldName("UTF-16LE");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile(": was expecting closing quote for a string value", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", ": was expecting closing quote for a string value", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ": was expecting closing quote for a string value", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(1);
      System.setCurrentTimeMillis((-2144L));
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(1384.447948389);
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(": was expecting closing quote for a string value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("BKY&oYYtuDW{tH6");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 98, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      int[] intArray0 = new int[0];
      uTF8JsonGenerator0.writeArray(intArray0, 3, 0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      uTF8JsonGenerator0.writeStartArray(48);
      byteArray1[0] = (byte) (-1);
      byteArray0[1] = (byte) (-64);
      mockPrintStream0.println("UTF-32LE");
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)28;
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      uTF8JsonGenerator0.writeNumber((double) 2);
      BigDecimal bigDecimal0 = new BigDecimal(charArray0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeString("");
      Random.setNextRandom(123);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile((String) null, "Split surrogate on writeRaw() input (last character)");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((-1L));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": was expecting closing quote for a string value");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRaw(": was expecting closing quote for a string value");
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      uTF8JsonGenerator0._writePPFieldName("u-,C]<:|JY");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNL$yr~[?0");
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)119;
      byteArray0[2] = (byte)119;
      byteArray0[7] = (byte)119;
      byteArray0[8] = (byte)119;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("'z/_*G");
      uTF8JsonGenerator0.writeNumber((-65.480978426));
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 103, 1);
      try { 
        uTF8JsonGenerator0.writeFieldName("eG)`!uZHVc");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = "IGNORE_UNKNOWN";
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 126, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)50, false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = '?';
      charArray0[2] = '3';
      charArray0[3] = 'J';
      charArray0[4] = '\\';
      charArray0[5] = 'T';
      charArray0[6] = '*';
      charArray0[7] = '\"';
      charArray0[8] = 'l';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1504, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1504
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNL$yr~[?0");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)119;
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4304), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short)13);
      uTF8JsonGenerator0.writeFieldName("DNL$yr~[?0");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)119, (ObjectCodec) null, dataOutputStream0, byteArray0, 56320, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      uTF8JsonGenerator0.writeStartArray(48);
      byteArray1[0] = (byte) (-1);
      byteArray0[1] = (byte) (-64);
      mockPrintStream0.println("UTF-32LE");
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)28;
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      System.setCurrentTimeMillis((byte) (-64));
      uTF8JsonGenerator0.writeNumber((double) 2);
      BigDecimal bigDecimal0 = new BigDecimal(charArray0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("g>{K)e`l6CQ4");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "7(i+2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)65;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, "7(i+2", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 621, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 58, false);
      uTF8JsonGenerator0.writeNumber(58);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 3, (int) (byte)53);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)98;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 500, (ObjectCodec) null, pipedOutputStream0, byteArray0, 48, false);
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = 'e';
      charArray0[2] = 'Q';
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 19);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("g>{K)e`l6CQ4");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "7(i+2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)65;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000000, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)65, false);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(1000L);
      BigInteger bigInteger0 = BigInteger.probablePrime(2, mockRandom0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 2633, 1);
      uTF8JsonGenerator0.writeRaw('Q');
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expectinU cWosing q{ote for a strin galue", ": was expectinU cWosing q{ote for a strin galue", (File) mockFile0);
      mockFile0.setReadable(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)12;
      byteArray0[1] = (byte) (-41);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ": was expectinU cWosing q{ote for a strin galue", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 113, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(1);
      System.setCurrentTimeMillis((-2144L));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'Z';
      charArray0[2] = '9';
      charArray0[3] = '^';
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, Integer.MIN_VALUE, (ObjectCodec) null, objectOutputStream0, byteArray0, 0, true);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, 0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)3;
      mockFileOutputStream0.write(byteArray0, 2, 12);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "p!w}hwA_", false);
      int int0 = (-3276);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-26);
      byteArray1[1] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3276), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 124, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.getCodec();
      String string0 = "u-,\\C]<:|JY";
      jsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      uTF8JsonGenerator0.writeObjectField("g>{K)e`l6CQ4", (Object) null);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis((-9223372036854775808L));
      Random.setNextRandom(761);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("0O<pTLpP");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'v';
      charArray0[2] = 'A';
      charArray0[3] = '7';
      charArray0[4] = '-';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 512, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-113), 3, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      MockFile mockFile0 = new MockFile("", ", expecting field name");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)108;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)63, false);
      try { 
        uTF8JsonGenerator0._outputSurrogates(0, (byte) (-110));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x0, second 0xffffff92
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)5;
      byteArray0[0] = (byte)5;
      boolean boolean0 = true;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      boolean boolean1 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3788), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      iOContext0.allocWriteEncodingBuffer();
      String string0 = "";
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNL$yr~[?0");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)119;
      byteArray0[2] = (byte)119;
      byteArray0[7] = (byte)119;
      byteArray0[8] = (byte)119;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("'z/_*G");
      uTF8JsonGenerator0.writeNumber((-65.480978426));
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 103, 1);
      try { 
        uTF8JsonGenerator0.writeFieldName("eG)`!uZHVc");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("dLLw`d");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "dLLw`d", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 46, 40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      mockPrintStream0.println("UTF-32LE");
      char[] charArray0 = new char[4];
      charArray0[0] = '_';
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) uTF8JsonGenerator0;
      objectArray0[2] = (Object) tokenFilter0;
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = uTF8JsonGenerator0.getOutputTarget();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) iOContext0;
      objectArray0[7] = (Object) iOContext0;
      objectArray0[8] = (Object) null;
      mockPrintStream0.format((Locale) null, "UTF-32LE", objectArray0);
      charArray0[1] = 'H';
      charArray0[2] = 'C';
      charArray0[3] = '_';
      mockPrintStream0.print(charArray0);
      uTF8JsonGenerator0.writeFieldName("jGD+~A=e98#[gP$>^2");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(1);
      uTF8JsonGenerator0.writeNumber(0.0);
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 13, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray1 = iOContext2.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(55296);
      BigInteger.probablePrime(1272, mockRandom0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (byte)3, 0);
      uTF8JsonGenerator0.writeRaw('Q');
      System.setCurrentTimeMillis((-564L));
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      uTF8JsonGenerator0.writeString(charArray0, 1504, 0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", ": was expecting closing quote for a string value", (File) mockFile0);
      mockFile0.setReadable(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ": was expecting closing quote for a string value", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 113, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = ' ';
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 113, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeNumber((short) (-2107));
      uTF8JsonGenerator1.writeNumber((BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.getOutputTarget();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 91);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'a';
      charArray0[2] = '9';
      charArray0[3] = '^';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream1 = (MockPrintStream)uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream1, true);
      mockPrintStream1.println("");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray1, 1, true);
      uTF8JsonGenerator1.writeNumber((short) (-1250));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._writeBinary((Base64Variant) null, byteArray0, 55296, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W wI,U'^uS#9A~!I");
      byteArray0[0] = (byte)119;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000000, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      iOContext2.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("H|Q8>");
      try { 
        uTF8JsonGenerator0.writeNumber((double) 1000000);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)98;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)98, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-1034), true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1034
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-41);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 3);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 3264, false);
      try { 
        uTF8JsonGenerator0.writeNumber(3116L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'Z';
      charArray0[2] = '9';
      charArray0[3] = '^';
      int int0 = 1000000;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, Integer.MIN_VALUE, (ObjectCodec) null, objectOutputStream0, byteArray0, 0, true);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom((-3171L));
      BigInteger bigInteger0 = BigInteger.probablePrime((byte)28, mockRandom0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      MockFile.createTempFile(": was expecting 4losing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-16);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1522, (ObjectCodec) null, mockPrintStream0, byteArray0, 2196, false);
      uTF8JsonGenerator0.writeNumber((long) 3);
      BigDecimal bigDecimal0 = new BigDecimal((long) 3);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but OBJECT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", ": was expecting closing quote for a string value", (File) mockFile0);
      mockFile0.setReadable(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ": was expecting closing quote for a string value", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 113, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(1);
      long long0 = (-2144L);
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = ' ';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (-1066), 1391);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber((short) (byte)46);
      String string0 = "Too few bytes available: missing ";
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("Too few bytes available: missing ");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      mockFileOutputStream0.write(byteArray0, 2, 12);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "p!w}hwA_", false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-26);
      byteArray1[1] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3276), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 124, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-2198), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 2171, true);
      uTF8JsonGenerator1.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRaw("u-,C]<:|JY");
      // Undeclared exception!
      uTF8JsonGenerator1.writeNumber(0.8);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-64);
      mockPrintStream0.println("UTF-32LE");
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)28;
      mockPrintStream0.print(charArray0);
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeNumber(0.0);
      BigDecimal bigDecimal0 = new BigDecimal(charArray0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 13, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray1 = iOContext2.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(55296);
      BigInteger.probablePrime(1272, mockRandom0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (byte)3, 0);
      uTF8JsonGenerator0.writeRaw('Q');
      System.setCurrentTimeMillis((-564L));
      BigDecimal bigDecimal0 = new BigDecimal((-564L));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._verifyValueWrite("g>{K)e`l6CQ4");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but OBJECT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "c");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      Object object1 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 61, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.close();
      MockRandom mockRandom0 = new MockRandom(3);
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((byte)0, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("BKY&oYYtuDW{tH6");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler2, "com.fasterxml.jackson.core.json.JsonReadContext", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 876, false);
      uTF8JsonGenerator0.writeNumber(0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W wI,U'^uS#9A~!I");
      byteArray0[0] = (byte)122;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000000, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, true);
      byte[] byteArray1 = iOContext2.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("H|Q8>");
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 2, 3230);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      InputStream inputStream0 = null;
      Object object1 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 61, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("C]OWQNUU", 101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", ": was expecting closing quote for a string value", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ": was expecting closing quote for a string value", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 113, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(1);
      System.setCurrentTimeMillis((-2144L));
      uTF8JsonGenerator0.writeNull();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.doubles();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockRandom0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-743), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 513, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)98;
      int int0 = 224;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext2.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 149, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.flush();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 1076, (ObjectCodec) null, pipedOutputStream0, byteArray1, (-4075), false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'a';
      charArray0[2] = '9';
      charArray0[3] = '^';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray1, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, (-392), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)65;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000000, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)65, false);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(1000L);
      BigInteger bigInteger0 = BigInteger.probablePrime(2, mockRandom0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 2633, 1);
      uTF8JsonGenerator0.writeRaw('Q');
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)12, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw("xGHM4se[r", (int) (byte)12, (-3489));
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeRaw('v');
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      byteArray1[1] = (byte) (-64);
      mockPrintStream0.println("UTF-32LE");
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)28;
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeRaw('\'');
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "p!w}hwA_", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3276), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 124, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-2198), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2171, true);
      uTF8JsonGenerator0.writeRaw("u-,C]<:|JY");
      // Undeclared exception!
      uTF8JsonGenerator1.writeNumber(0.8);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 420, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("U|,Rg-=K3", false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 23, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)3, true);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000000, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, true);
      iOContext2.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("H|Q8>");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger0 = BigInteger.probablePrime(455, mockRandom0);
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("NS:`%7FNTG", 116, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("start an array", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-106);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 3195, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("CX+9F[5hj!zW.BE}s@0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", ": was expecting closing quote for a string value", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ": was expecting closing quote for a string value", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 113, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(1);
      System.setCurrentTimeMillis((-2144L));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-470), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(44);
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = 'C';
      charArray0[2] = '>';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 948, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 948
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      InputStream inputStream0 = null;
      Object object1 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 61, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw("Split surrogate on writeRaw() input (last character)", 0, (-2509));
      // Undeclared exception!
      try { 
        iOContext1.releaseWriteEncodingBuffer(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      uTF8JsonGenerator0.writeStartArray(48);
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-64);
      mockPrintStream0.println("UTF-32LE");
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)28;
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, (byte)34, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)98;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)98;
      byteArray1[3] = (byte)98;
      byteArray1[6] = (byte)65;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray1, 3, false);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'a';
      charArray0[2] = '9';
      charArray0[3] = '^';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      doReturn(false).when(iOContext0).isResourceManaged();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      mockPrintStream0.println(2605.0F);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray1, 1, true);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator1.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      String string0 = "DNL$yr~[?0";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNL$yr~[?0");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 98;
      intArray0[2] = (int) (byte)64;
      intArray0[3] = 56319;
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 0;
      intArray0[7] = 2;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(intArray0, 1, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      MockPrintStream mockPrintStream0 = new MockPrintStream("VALUE_TRUE");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "VALUE_TRUE", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)5, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeStartArray(8);
      mockPrintStream0.println("7eiA:<1)|pB");
      uTF8JsonGenerator0.writeFieldName("UTF-32LE");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 8, (byte)19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)5;
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      uTF8JsonGenerator0.writeStartArray(48);
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-64);
      mockPrintStream0.println("UTF-32LE");
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)28;
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, (byte)34, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, pipedOutputStream0, byteArray0, 4609, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 13, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray1 = iOContext2.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(55296);
      BigInteger bigInteger0 = BigInteger.probablePrime(1272, mockRandom0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (byte)3, 0);
      uTF8JsonGenerator0.writeRaw('Q');
      System.setCurrentTimeMillis((-564L));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      Object object1 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 61, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      MockFile mockFile1 = new MockFile(": was expecting closing quote for a string value", "IGNORE_UNKNOWN");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 156, (ObjectCodec) null, mockPrintStream1, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ": was expecting closing quote for a string value", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)124;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)127, (ObjectCodec) null, mockPrintStream0, byteArray0, (-610), false);
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte)50);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -610
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 312, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3400, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(")");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 38, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3254, (ObjectCodec) null, printStream0, byteArray0, (byte) (-104), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 110, (ObjectCodec) null, mockPrintStream1, byteArray0, 1, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile(") does not override copy(); it has to", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print((long) (byte)5);
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 39, (ObjectCodec) null, mockPrintStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(") does not override copy(); it has to");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)5;
      jsonGenerator0.writeStartArray();
      intArray0[1] = 57343;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 68;
      intArray0[5] = 2;
      uTF8JsonGenerator0._outputEscapes = intArray0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0, (-306));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)65;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000000, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)65, false);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeStartArray((-470));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(56320);
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((-724), mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)0;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 621, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 58, false);
      uTF8JsonGenerator0.writeNumber(58);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 23, (ObjectCodec) null, pipedOutputStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 3714, 1576);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)5;
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-64);
      mockPrintStream0.println("UTF-32LE");
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)28;
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, (byte)91, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)98;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = "";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2799), (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-897L));
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 31, (byte)98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 31
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-26);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-3), (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-26), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-1582), (-1914));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -26
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-1034), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1034
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "koc+g_");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-470), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 10, false);
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 18, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator2.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'a';
      charArray0[2] = '9';
      charArray0[3] = '^';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      String string0 = "UTF-32LE";
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray1, 1, true);
      uTF8JsonGenerator1.writeNumber((short) (-1250));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNL$yr~[?0");
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("'z/_*G");
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      uTF8JsonGenerator0.close();
      BigInteger.probablePrime(1023, mockRandom0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)98;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2197, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeFieldName(";|lqUO");
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.doubles();
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-470), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-108), (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte) (-106), false);
      uTF8JsonGenerator0.writeRaw("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -106
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-64);
      mockPrintStream0.println("UTF-32LE");
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)28;
      mockPrintStream0.print(charArray0);
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-64);
      mockPrintStream0.println("UTF-32LE");
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)28;
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (-2441), 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-16);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1522, (ObjectCodec) null, mockPrintStream1, byteArray0, 2196, false);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      System.setCurrentTimeMillis(996L);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (byte) (-16), 56320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)98;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext0 = new IOContext(bufferRecycler0, tokenFilter0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-4066), (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, true);
      try { 
        uTF8JsonGenerator0.writeNumber((float) 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expectinU cWosing q{ote for a strin galue", ": was expectinU cWosing q{ote for a strin galue", (File) mockFile0);
      mockFile0.setReadable(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)12;
      byteArray0[1] = (byte) (-41);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ": was expectinU cWosing q{ote for a strin galue", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 113, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(1);
      System.setCurrentTimeMillis((-2144L));
      uTF8JsonGenerator0.writeNull();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.shiftLeft(57343);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, (int) (byte)34, 57343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'a';
      charArray0[2] = '9';
      charArray0[3] = '^';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      String string0 = "UTF-32LE";
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      System.setCurrentTimeMillis(57343);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 126, (ObjectCodec) null, mockPrintStream0, byteArray0, (-963), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 4, 512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 126, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)50, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("IGNORE_UNKNOWN");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting 4losing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-16);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1522, (ObjectCodec) null, mockPrintStream1, byteArray0, 2196, false);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      System.setCurrentTimeMillis(996L);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "XI!", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-16);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1522, (ObjectCodec) null, mockPrintStream1, byteArray0, 2196, false);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      System.setCurrentTimeMillis(996L);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.getOutputTarget();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, (Writer) null);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("=e\",x");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, (OutputStream) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream("^Jp*iI3");
      mockPrintStream1.println("UTF-32LE");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("40dzHgMa;*5zM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("=e\",x");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, (OutputStream) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream("^Jp*iI3");
      mockPrintStream1.println("UTF-32LE");
      uTF8JsonGenerator0.writeFieldName("40dzHgMa;*5zM");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      System.setCurrentTimeMillis(3);
      uTF8JsonGenerator0.writeRaw("UTF-32LE", 1, 2);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("=e\",x");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, (OutputStream) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream("^Jp*iI3");
      mockPrintStream1.println("UTF-32LE");
      uTF8JsonGenerator0.writeFieldName("40dzHgMa;*5zM");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)93;
      serializedString0.appendQuotedUTF8(byteArray0, 55296);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      System.setCurrentTimeMillis(3);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)98;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)98;
      byteArray1[3] = (byte)110;
      byteArray1[5] = (byte)65;
      byteArray1[6] = (byte)65;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)110;
      byteArray2[1] = (byte)65;
      byteArray2[2] = (byte)110;
      byteArray2[3] = (byte)65;
      byteArray2[4] = (byte)65;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray2, (-855), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(5461);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -855
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byte byte0 = (byte)98;
      byteArray0[1] = (byte)98;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 8, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1148, 224, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext2 = new IOContext(bufferRecycler0, filteringParserDelegate0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MAX_VALUE, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString1 = new SerializedString("w<\".2");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      mockPrintStream0.println("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeRaw("line.separator");
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '8';
      charArray0[2] = 'm';
      charArray0[3] = 'M';
      charArray0[4] = '[';
      charArray0[5] = 'e';
      charArray0[6] = 'Q';
      charArray0[7] = 'n';
      charArray0[8] = '(';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 19, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, pipedOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-442), (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeFieldName("Current cont`xt not an ARRAY bdt ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString2);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)98;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 8, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1148, 224, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 10, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0._verifyValueWrite("Dx.[uR");
      uTF8JsonGenerator0.writeStartObject();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)65;
      byteArray1[2] = (byte)65;
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 78, 1391);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      mockPrintStream0.println("");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 108, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-4326), true);
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'n';
      charArray0[4] = 'M';
      charArray0[5] = '(';
      charArray0[6] = 'Q';
      uTF8JsonGenerator0.writeRaw(charArray0, (-2558), (-4326));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-64);
      mockPrintStream0.println("UTF-32LE");
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)28;
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeRaw(charArray0, 4863, (-1056));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'a';
      charArray0[2] = '9';
      charArray0[3] = '^';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.getOutputTarget();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      System.setCurrentTimeMillis(66L);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-16);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1522, (ObjectCodec) null, mockPrintStream1, byteArray0, 2196, false);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      System.setCurrentTimeMillis(996L);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (byte) (-16), 194);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 93, (ObjectCodec) null, pipedOutputStream0, byteArray0, 255, false);
      uTF8JsonGenerator0._verifyValueWrite("Dx.[uR");
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)98;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 8, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1148, 224, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)98;
      byteArray1[2] = (byte)98;
      byteArray1[3] = (byte)110;
      byteArray1[4] = (byte)65;
      byteArray1[5] = (byte)65;
      byteArray1[6] = (byte)65;
      byteArray1[7] = (byte)65;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 91, false);
      pipedOutputStream0.close();
      iOContext0.allocWriteEncodingBuffer();
      try { 
        uTF8JsonGenerator0.writeFieldName(";!*`B/=)");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-64);
      mockPrintStream0.println("UTF-32LE");
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)28;
      byteArray1[5] = (byte)0;
      uTF8JsonGenerator0.writeFieldName("");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "UTF-32LE", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (byte) (-64), (ObjectCodec) null, mockPrintStream0, byteArray0, 2466, false);
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-470), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeFieldName("");
      try { 
        uTF8JsonGenerator0.writeFieldName("EGjDNSb");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)98;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 8, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1148, 224, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("V_MLGI");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)98;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 123, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)98, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-69);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 44, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, (byte)98, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2393, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-4500), false);
      uTF8JsonGenerator0._verifyValueWrite("start an object");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("BKY&oYYDuDW{tH6");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)110;
      byteArray0[3] = (byte)79;
      uTF8JsonGenerator0._verifyValueWrite(" 5'B#P8g=nG;cLK{v");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[5];
      charArray0[1] = 'x';
      charArray0[2] = 'o';
      charArray0[3] = 'u';
      charArray0[4] = 'y';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-4005), (ObjectCodec) null, mockPrintStream0, byteArray0, (-2468), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2468
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader(")");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = 'j';
      charArray0[2] = 'Q';
      charArray0[3] = 'y';
      charArray0[4] = 'K';
      charArray0[5] = ':';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1693), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 240, 2, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Spill-over slots in symbol table with ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)32;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1693), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      BigDecimal bigDecimal0 = new BigDecimal((double) 56320);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)65;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000000, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)65, false);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      System.setCurrentTimeMillis((byte)34);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", ": was expecting closing quote for a string value", (File) mockFile0);
      mockFile0.setReadable(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IGNORE_UNKNOWN");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current cont`xt not an ARRAY bdt ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-41);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ": was expecting closing quote for a string value", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 113, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(1);
      System.setCurrentTimeMillis((-2144L));
      uTF8JsonGenerator0.writeNull();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.shiftLeft(57343);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeNumber((short)44);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.getOutputTarget();
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)28;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 98, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'a';
      charArray0[2] = '9';
      charArray0[3] = '^';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray1, 1, true);
      uTF8JsonGenerator1.writeNumber((short) (-1250));
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-470), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("BKY&oYYDuDW{tH6");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1522, (ObjectCodec) null, mockPrintStream0);
      mockPrintStream0.println("UTF-32LE");
      uTF8JsonGenerator0.writeRaw("UTF-32LE");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-470), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 19, 19, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2433), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1713, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("xT6G\"DOq9");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-26);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-3), (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-26), true);
      uTF8JsonGenerator0.writeRaw("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -26
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)65;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000000, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)65, false);
      uTF8JsonGenerator0.writeRaw("A*2LcYt");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-64);
      mockPrintStream0.println("UTF-32LE");
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)28;
      byteArray1[5] = (byte)0;
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-470), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-4170), (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString1 = new SerializedString("w<\".2");
      uTF8JsonGenerator1.writeString((SerializableString) serializedString1);
      System.setCurrentTimeMillis(1);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'Z';
      charArray0[2] = '9';
      charArray0[3] = '^';
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, Integer.MIN_VALUE, (ObjectCodec) null, objectOutputStream0, byteArray0, 0, true);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom((-3171L));
      BigInteger bigInteger0 = BigInteger.probablePrime((byte)28, mockRandom0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 2633, 1000000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      iOContext0.allocNameCopyBuffer((-1636));
      mockPrintStream0.println("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeRaw("{!4/.");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-2262));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-3);
      MockPrintStream mockPrintStream0 = new MockPrintStream("g>{K)e`l6CQ4");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 32767, (ObjectCodec) null, mockPrintStream0, byteArray0, 57343, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-3));
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'x';
      charArray0[2] = 'o';
      charArray0[3] = 'u';
      charArray0[4] = 'y';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-32LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-4005), (ObjectCodec) null, mockPrintStream0, byteArray0, (-2468), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber((short) (byte)28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2468
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-312));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+gk_3',");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, Integer.MAX_VALUE, 4179, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 116, (ObjectCodec) null, (OutputStream) null);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-2112), (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = ": was expecting closing quote for a string value";
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(2147483647L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1763, (ObjectCodec) null, mockPrintStream0, byteArray0, (-963), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(": was expecting closing quote for a string value");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -963
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-470), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-4165));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-632), (ObjectCodec) null, pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(0L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 126, (ObjectCodec) null, mockPrintStream0, byteArray0, (-963), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("IGNORE_UNKNOWN");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -963
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "HH)k^qz58z'", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("HH)k^qz58z'", true);
      StringReader stringReader0 = new StringReader("HH)k^qz58z'");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(2, (-413));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-26);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-26), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-106), false);
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-470), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 48, false);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-470), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)65;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000000, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)65, false);
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      System.setCurrentTimeMillis((byte)34);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g>{K)e`l6CQ4", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-82), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+gk_3',");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = 'J';
      charArray0[2] = 'R';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 4179, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[1] = '>';
      charArray0[2] = 'b';
      charArray0[3] = 'S';
      charArray0[4] = 'f';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 389, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 243, 389, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('S');
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 389, (ObjectCodec) null, printStream0, byteArrayBuilder0.NO_BYTES, (-1125), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("IGNORE_UNKNOWN", "");
      File file0 = MockFile.createTempFile(": was expecting closing quote for a string value", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(2147483647L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1763, (ObjectCodec) null, mockPrintStream0, byteArray0, (-963), true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName(": was expecting closing quote for a string value");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, filterOutputStream0, byteArray0, (-1353), false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1229);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 1229, (ObjectCodec) null, filterOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }
}
