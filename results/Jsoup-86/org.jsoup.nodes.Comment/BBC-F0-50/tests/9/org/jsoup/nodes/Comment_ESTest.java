/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 23:38:31 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Comment_ESTest extends Comment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("", "`[");
      StringWriter stringWriter0 = new StringWriter(502);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      comment0.outerHtmlHead(stringWriter0, 0, document_OutputSettings0);
      assertEquals("\n<!---->", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      comment0.outerHtmlTail(charArrayWriter0, 0, document_OutputSettings0);
      assertEquals(0, comment0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment("");
      String string0 = comment0.nodeName();
      assertEquals("#comment", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comment comment0 = new Comment((String) null, "x3rnp");
      comment0.getData();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment("");
      comment0.getData();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment("JGviS&%.'", "93~WntXU`Wyq`Y\"");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment(" />");
      Document document0 = Parser.parse(" />", " />");
      Element element0 = document0.appendChild(comment0);
      comment0.before((Node) element0);
      // Undeclared exception!
      comment0.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment("JGviS&%.'", "93~WntXU`Wyq`Y\"");
      comment0.siblingIndex = (-491);
      Node node0 = comment0.shallowClone();
      comment0.parentNode = node0;
      // Undeclared exception!
      try { 
        comment0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -490
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment(" />", " />");
      CDataNode cDataNode0 = new CDataNode(" />");
      comment0.value = (Object) cDataNode0;
      // Undeclared exception!
      try { 
        comment0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("t");
      Document document0 = Parser.parse("t", "t");
      comment0.parentNode = (Node) document0;
      comment0.setSiblingIndex((-86747544));
      // Undeclared exception!
      try { 
        comment0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("R$a)|6uuMx/V'Gz", "R$a)|6uuMx/V'Gz");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(1946);
      // Undeclared exception!
      comment0.outerHtmlHead(stringWriter0, 1946, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comment comment0 = new Comment(" />", " />");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " />");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(charBuffer0, (-40366234), document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Comment comment0 = new Comment("-fDiM/(MXI7>er", "");
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(charBuffer0, 52, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comment comment0 = new Comment("           ", "           ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead((Appendable) null, (-110947053), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comment comment0 = new Comment("3d[2");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(charArrayWriter0, (-1), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comment comment0 = new Comment(">G~d+rJj9[Gz", ">G~d+rJj9[Gz");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        comment0.outerHtmlHead(pipedWriter0, (-107562889), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      // Undeclared exception!
      try { 
        comment0.isXmlDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comment comment0 = new Comment("@:Jri3npYq");
      Document document0 = new Document("@:Jri3npYq");
      comment0.value = (Object) document0;
      // Undeclared exception!
      try { 
        comment0.isXmlDeclaration();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Document cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comment comment0 = new Comment((String) null, "x3rnp");
      CDataNode cDataNode0 = new CDataNode("Tqp{0S|");
      comment0.value = (Object) cDataNode0;
      // Undeclared exception!
      try { 
        comment0.getData();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comment comment0 = new Comment("");
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comment comment0 = new Comment("?G4k]GR4ns>F63zA6k9I");
      List<Node> list0 = comment0.childNodesCopy();
      comment0.value = (Object) list0;
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.ArrayList cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comment comment0 = new Comment("_hae Ij2lZH==&)F:rr");
      String string0 = comment0.getData();
      assertEquals("#comment", comment0.nodeName());
      assertEquals("_hae Ij2lZH==&)F:rr", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comment comment0 = new Comment("?G4k]GR4ns>F63zA6k9I");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comment comment0 = new Comment("!NT=[p\u0003`W{=kYr)&4");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comment comment0 = new Comment(" />");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comment comment0 = new Comment("t");
      Document document0 = Parser.parse("t", "t");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      comment0.parentNode = (Node) document1;
      String string0 = comment0.toString();
      assertEquals("#comment", comment0.nodeName());
      assertEquals("<!--t-->", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comment comment0 = new Comment("\n<!-- />-->", "Q5B;+7ym2=eiY_x");
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comment comment0 = new Comment(" />");
      comment0.asXmlDeclaration();
  }
}
