/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 09:06:59 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Comment_ESTest extends Comment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("", "`[");
      StringWriter stringWriter0 = new StringWriter(502);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      comment0.outerHtmlHead(stringWriter0, 0, document_OutputSettings0);
      assertEquals("\n<!---->", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment("R$a)|6uuMx/V'Gz", "R$a)|6uuMx/V'Gz");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      comment0.outerHtmlTail(stringWriter0, 1946, document_OutputSettings0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment("");
      String string0 = comment0.nodeName();
      assertEquals("#comment", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comment comment0 = new Comment((String) null, "");
      comment0.getData();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment("");
      comment0.getData();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment("marquee");
      Document document0 = Parser.parse("marquee", "marquee");
      document0.appendTo(document0);
      comment0.parentNode = (Node) document0;
      // Undeclared exception!
      comment0.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment("b/Y=UcC^NrA&5y)`]", "-Y");
      Comment comment1 = (Comment)comment0.shallowClone();
      comment0.setSiblingIndex((-878));
      comment1.reparentChild(comment0);
      // Undeclared exception!
      try { 
        comment0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -877
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment("<!--", "HyjU-pfRmB]H'`");
      CDataNode cDataNode0 = new CDataNode("<!--");
      comment0.value = (Object) cDataNode0;
      // Undeclared exception!
      try { 
        comment0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("!b/Y=UcCGN(rA&5_)Wc");
      Document document0 = Document.createShell("!b/Y=UcCGN(rA&5_)Wc");
      comment0.parentNode = (Node) document0;
      comment0.setSiblingIndex((-2971));
      // Undeclared exception!
      try { 
        comment0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("R$a)|6uuMx/V'Gz", "R$a)|6uuMx/V'Gz");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(1946);
      // Undeclared exception!
      comment0.outerHtmlHead(stringWriter0, 1946, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("-->");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-->");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(charBuffer0, 2181, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comment comment0 = new Comment("@`8'(", "@`8'(");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(charBuffer0, 1024, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comment comment0 = new Comment("R$a)|6uuMx/V'Gz", "R$a)|6uuMx/V'Gz");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(stringWriter0, (-210), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comment comment0 = new Comment("b/Y=UcCN=S5y0]");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        comment0.outerHtmlHead(pipedWriter0, (-30), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      // Undeclared exception!
      try { 
        comment0.isXmlDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comment comment0 = new Comment("<!--", "HyjU-pfRmB]H'`");
      CDataNode cDataNode0 = new CDataNode("<!--");
      comment0.value = (Object) cDataNode0;
      // Undeclared exception!
      try { 
        comment0.isXmlDeclaration();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comment comment0 = new Comment("b/Y=UcCGN=rA&5y)`]", (String) null);
      Object object0 = new Object();
      comment0.value = object0;
      // Undeclared exception!
      try { 
        comment0.getData();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comment comment0 = new Comment((String) null, "");
      comment0.attributes();
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comment comment0 = new Comment("!-fDiM/(MXI7>er");
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comment comment0 = new Comment("]Yx-jg%snrJ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("base");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      comment0.value = (Object) mockPrintWriter0;
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.io.MockPrintWriter cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comment comment0 = new Comment("_hae Ij2lZH==&)F:rr");
      comment0.getData();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comment comment0 = new Comment("!b/Y=UcCGN(rA&5_)Wc");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comment comment0 = new Comment("b/Y=UcCGN=rA&5y)`]", "b/Y=UcCGN=rA&5y)`]");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertNull(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comment comment0 = new Comment("?W!ut<%vF-?");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertTrue(boolean0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comment comment0 = new Comment("!b/Y=UcCGN(rA&5_)Wc");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertTrue(boolean0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comment comment0 = new Comment((String) null, "");
      Attributes attributes0 = comment0.attributes();
      assertEquals(0, attributes0.size());
      
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comment comment0 = new Comment("=@ADa67zxWL");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead((Appendable) null, (byte) (-74), document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comment comment0 = new Comment("!b/Y=UcCGN(rA&5_)Wc");
      String string0 = comment0.toString();
      assertEquals("#comment", comment0.nodeName());
      assertEquals("\n<!--!b/Y=UcCGN(rA&5_)Wc-->", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comment comment0 = new Comment("b/Y=UcCGN=rA&5y)`]", "b/Y=UcCGN=rA&5y)`]");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
      assertEquals("#comment", comment0.nodeName());
  }
}
