/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 21:17:22 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Comment_ESTest extends Comment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("?");
      MockPrintStream mockPrintStream0 = new MockPrintStream("?");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      comment0.outerHtmlTail(mockPrintStream0, 0, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment((String) null, (String) null);
      comment0.getData();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment("");
      comment0.getData();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comment comment0 = new Comment("X/N~1nn|");
      comment0.reparentChild(comment0);
      // Undeclared exception!
      comment0.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment("#", (String) null);
      TextNode textNode0 = new TextNode(" ");
      comment0.parentNode = (Node) textNode0;
      comment0.siblingIndex = (-70537784);
      // Undeclared exception!
      try { 
        comment0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -70537783
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment(")AX}t{@nH4z6", "org.jsoup.nodes.Comment");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      comment0.value = (Object) xmlDeclaration0;
      // Undeclared exception!
      try { 
        comment0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.XmlDeclaration cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment("#", (String) null);
      Document document0 = Parser.parse("y5L!XQcxSPCRpZ\"0:%K", "?@t:I9&h)]RID");
      TextNode textNode0 = new TextNode(" ");
      comment0.parentNode = (Node) textNode0;
      comment0.siblingIndex = (-70537784);
      comment0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        comment0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment("X/E^1DvnnV");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(541);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(541);
      // Undeclared exception!
      comment0.outerHtmlHead(mockPrintWriter0, 2465, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("Jk*?J.dcVx");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Jk*?J.dcVx", 0, 0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(charBuffer0, (-6308), document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("", "1q`KzxJw+^");
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "1q`KzxJw+^");
      Charset charset0 = document0.charset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(charBuffer0, 1, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead((Appendable) null, 3102, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comment comment0 = new Comment("org.jsoup.nodes.DataNode");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(stringBuilder0, (-105861870), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comment comment0 = new Comment("0");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        comment0.outerHtmlHead(pipedWriter0, 1195, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comment comment0 = new Comment((String) null, ":last-child");
      // Undeclared exception!
      try { 
        comment0.isXmlDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comment comment0 = new Comment(">|aDio", ">|aDio");
      Comment comment1 = new Comment(">|aDio");
      comment1.value = (Object) comment0;
      // Undeclared exception!
      try { 
        comment1.isXmlDeclaration();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Comment cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comment comment0 = new Comment("!EoO,05");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      comment0.value = (Object) xmlDeclaration0;
      // Undeclared exception!
      try { 
        comment0.getData();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.XmlDeclaration cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comment comment0 = new Comment("?");
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comment comment0 = new Comment((String) null, "Jk*?J.dcVx");
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comment comment0 = new Comment("B_s2S+lQ%");
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comment comment0 = new Comment("X/N1nnV");
      Comment comment1 = new Comment("?{Nc^N*-]p)wTc@i^\"Hl");
      comment1.value = (Object) comment0;
      // Undeclared exception!
      try { 
        comment1.asXmlDeclaration();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Comment cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comment comment0 = new Comment("?");
      comment0.getData();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comment comment0 = new Comment("M#&6X%B00rdu|", "bdo");
      String string0 = comment0.nodeName();
      assertEquals("#comment", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comment comment0 = new Comment("X/E^1vnnV");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertNull(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comment comment0 = new Comment("org.jsoup.nodes.DataNode");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comment comment0 = new Comment("!|M>k#=6r[-lj]7`X");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertTrue(boolean0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comment comment0 = new Comment("?comment", "?comment");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comment comment0 = new Comment("?");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comment comment0 = new Comment("M#&6X%B00rdu|", "bdo");
      StringBuilder stringBuilder0 = new StringBuilder("M#&6X%B00rdu|");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      comment0.outerHtmlHead(stringBuilder0, 18, document_OutputSettings0);
      assertEquals("M#&6X%B00rdu|<!--M#&6X%B00rdu|-->", stringBuilder0.toString());
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comment comment0 = new Comment("?comment", "?comment");
      String string0 = comment0.toString();
      assertEquals("\n<!--?comment-->", string0);
      assertEquals("#comment", comment0.nodeName());
  }
}
