/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 21:33:18 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Comment_ESTest extends Comment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("basefont");
      File file0 = MockFile.createTempFile(",C_nleqH?~;6\"@h", "org.jsoup.select.Evaluator$IsRoot");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      comment0.outerHtmlTail(mockPrintWriter0, 1576, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment("!@iM&yY}n7F");
      String string0 = comment0.nodeName();
      assertEquals("#comment", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment((String) null, "JRNnGz<UKi)S)6tN'");
      comment0.getData();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      comment0.getData();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment("#hD]>l`1FSkv", "output");
      comment0.parentNode = (Node) comment0;
      // Undeclared exception!
      comment0.toString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment(" />");
      TextNode textNode0 = TextNode.createFromEncoded(" />");
      comment0.value = (Object) textNode0;
      // Undeclared exception!
      try { 
        comment0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment("o<G$/x$gSFr");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("o<G$/x$gSFr", "Pw=IeI\"n 3");
      comment0.setParentNode(document0);
      comment0.siblingIndex = (-141952309);
      // Undeclared exception!
      try { 
        comment0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment("basefont");
      File file0 = MockFile.createTempFile("dQtTx)0", "org.jsoup.select.Evaluator$IsRoot");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1576);
      // Undeclared exception!
      comment0.outerHtmlHead(mockPrintWriter0, 1576, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("!?TreeBuilder{currentToken");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "!?TreeBuilder{currentToken");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(charBuffer0, 27, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("!%p4^/J^OqD<|FF(E6t&", "7|Ow@+Q36W65f/faxS");
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(charBuffer0, 2743, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("#hD]*l`f1FSkJ", "output");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<!--");
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(mockPrintWriter0, 57, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comment comment0 = new Comment("");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(stringBuilder0, (-2962), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comment comment0 = new Comment("U/0", "U/0");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        comment0.outerHtmlHead(pipedWriter0, (-8323580), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comment comment0 = new Comment(",N", "C.6R+");
      comment0.coreValue((String) null);
      // Undeclared exception!
      try { 
        comment0.isXmlDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comment comment0 = new Comment("bh*6[+(,");
      Object object0 = new Object();
      comment0.value = object0;
      // Undeclared exception!
      try { 
        comment0.isXmlDeclaration();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comment comment0 = new Comment("!'/wC)Rb");
      Element element0 = new Element("!'/wC)Rb");
      comment0.value = (Object) element0;
      // Undeclared exception!
      try { 
        comment0.getData();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Element cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comment comment0 = new Comment((String) null, "JRNnGz<UKi)S)6tN'");
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comment comment0 = new Comment("!@iM&yY}n7F");
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comment comment0 = new Comment("@iHMAyz}n7F");
      Comment comment1 = new Comment(" />", "<?iHMAyz}n7?>");
      comment1.value = (Object) comment0;
      // Undeclared exception!
      try { 
        comment1.asXmlDeclaration();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Comment cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comment comment0 = new Comment("!@iM&yY}n7F");
      comment0.getData();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comment comment0 = new Comment(" />", "<?iM&yY}n7?>");
      comment0.asXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comment comment0 = new Comment("?MSBB)rq|&o3gTnw", "?MSBB)rq|&o3gTnw");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comment comment0 = new Comment("!@iM&yY}n7F");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comment comment0 = new Comment("@iM&yY}n7F");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comment comment0 = new Comment("basefont");
      File file0 = MockFile.createTempFile(",C_nleqH?~;6\"@h", "org.jsoup.select.Evaluator$IsRoot");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      comment0.outerHtmlHead(mockPrintWriter0, 1576, document_OutputSettings0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comment comment0 = new Comment("@iM&yY}n7F");
      String string0 = comment0.toString();
      assertEquals("#comment", comment0.nodeName());
      assertEquals("\n<!--@iM&yY}n7F-->", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comment comment0 = new Comment("@iM&yY}n7F");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      Node node0 = comment0.doClone(xmlDeclaration0);
      node0.siblingIndex = (-90278829);
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -90278828
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }
}
