/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 11:42:26 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(31, byteArrayInputStream0.available());
      assertEquals(31, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(31, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(31, byteArray0.length);
      
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0X0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream1);
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      
      long long0 = zipArchiveInputStream0.skip(1024L);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, long0);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)11;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte)11}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, (byte)80);
      assertArrayEquals(new byte[] {(byte)80, (byte)11}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean2 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(31, byteArrayInputStream0.available());
      assertEquals(31, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(31, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(31, byteArray0.length);
      
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0X0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      System.setCurrentTimeMillis((byte) (-114));
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-114);
      byteArray1[1] = (byte) (-114);
      byteArray1[2] = (byte) (-114);
      byteArray1[3] = (byte) (-114);
      byteArray1[4] = (byte) (-114);
      byteArray1[5] = (byte) (-114);
      byteArray1[6] = (byte) (-114);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-886), (-1879));
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1879), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray1.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals((-1879), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray1.length);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals((-1879), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray1.length);
      
      zipArchiveInputStream0.close();
      assertEquals((-1879), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray1.length);
      
      try { 
        zipArchiveInputStream0.skip(290L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (-873));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-1031L));
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      byteArray0[0] = (byte)1;
      byte byte1 = (byte)84;
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean2 = ZipArchiveInputStream.matches(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(5, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.mark((-3811));
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)46, (byte)46);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-44), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals((-44), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals((-44), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = zipArchiveInputStream0.read(byteArray0, (int) (byte) (-114), (int) (byte)46);
      assertEquals((-44), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      int int1 = zipArchiveInputStream0.read(byteArray0, (-5446), (int) (byte)46);
      assertEquals((-44), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals((-44), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(ZipArchiveEntry.NameSource.NAME, jarArchiveEntry0.getNameSource());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, jarArchiveEntry0.getCommentSource());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
      assertEquals((-44), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(ZipArchiveEntry.NameSource.NAME, jarArchiveEntry0.getNameSource());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, jarArchiveEntry0.getCommentSource());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, (String) null, false);
      assertNotNull(zipArchiveInputStream1);
      assertEquals((-44), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals(2, byteArray0.length);
      
      System.setCurrentTimeMillis((byte) (-114));
      // Undeclared exception!
      try { 
        zipArchiveInputStream1.skip((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1521), 995);
      assertNotNull(byteArrayInputStream0);
      assertEquals(995, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(995, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(995, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = zipArchiveInputStream0.read(byteArray0, (-3035), (-2794));
      assertEquals(995, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-114), (byte) (-114));
      assertNotNull(byteArrayInputStream0);
      assertEquals((-114), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G@uZP3a5U@GTD]Jf");
      assertFalse(boolean0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals((-114), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = zipArchiveInputStream0.read(byteArray0, (-931), (-1521));
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      zipArchiveInputStream0.close();
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry1);
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-114), (byte) (-114));
      assertNotNull(byteArrayInputStream0);
      assertEquals((-114), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals((-114), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = zipArchiveInputStream0.read(byteArray0, (-931), (-1521));
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      zipArchiveInputStream0.close();
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertNull(archiveEntry0);
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)16;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)7, (byte)30, (byte)16}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, (-609));
      assertArrayEquals(new byte[] {(byte)90, (byte)7, (byte)30, (byte)16}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean2 = ZipArchiveInputStream.matches(byteArray0, (byte)7);
      assertArrayEquals(new byte[] {(byte)90, (byte)7, (byte)30, (byte)16}, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(5519);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[0];
      try { 
        zipArchiveInputStream0.read(byteArray0, 385, (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)46, (byte)46);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-44), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals((-44), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals((-44), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      long long0 = zipArchiveInputStream0.skip(31L);
      assertEquals((-44), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(0L, long0);
      assertEquals(2, byteArray0.length);
      
      int int0 = zipArchiveInputStream0.read(byteArray0, (int) (byte) (-114), (int) (byte)46);
      assertEquals((-44), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      int int1 = zipArchiveInputStream0.read(byteArray0, (-5446), (int) (byte)46);
      assertEquals((-44), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals((-44), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-356), 816);
      assertNotNull(byteArrayInputStream1);
      assertEquals(358, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(2, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertNotNull(zipArchiveInputStream1);
      assertEquals((-44), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals(2, byteArray0.length);
      
      ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream1.getNextZipEntry();
      assertNull(zipArchiveEntry1);
      assertEquals((-44), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals(2, byteArray0.length);
      
      long long1 = zipArchiveInputStream1.skip(0L);
      assertEquals((-44), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(0L, long1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertTrue(long1 == long0);
      assertEquals(2, byteArray0.length);
      
      System.setCurrentTimeMillis((byte)46);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)16;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)7, (byte)30, (byte)16}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long0 = zipArchiveInputStream0.skip(215L);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-844L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-95);
      int int0 = 213;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-71), 213);
      assertNotNull(byteArrayInputStream0);
      assertEquals(79, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)57, (byte)108, (byte) (-71), (byte)31, (byte)46, (byte)48, (byte)7, (byte) (-95)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(79, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)57, (byte)108, (byte) (-71), (byte)31, (byte)46, (byte)48, (byte)7, (byte) (-95)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      long long0 = zipArchiveInputStream0.skip((byte)31);
      assertEquals(79, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)57, (byte)108, (byte) (-71), (byte)31, (byte)46, (byte)48, (byte)7, (byte) (-95)}, byteArray0);
      assertEquals(0L, long0);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)46, (-1521));
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = zipArchiveInputStream0.read(byteArray0, (-5446), (int) (byte)46);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      assertNotNull(jarArchiveEntry0);
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(ZipArchiveEntry.NameSource.NAME, jarArchiveEntry0.getNameSource());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, jarArchiveEntry0.getCommentSource());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(ZipArchiveEntry.NameSource.NAME, jarArchiveEntry0.getNameSource());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, jarArchiveEntry0.getCommentSource());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      int int1 = zipArchiveInputStream0.read(byteArray0, 0, 2541);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(2, byteArray0.length);
      
      int int2 = zipArchiveInputStream0.read(byteArray0, 3, (-2174));
      assertEquals((-1521), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, byteArray0.length);
      
      long long0 = zipArchiveInputStream0.skip(1443L);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(0L, long0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      String string0 = "qv,-6Vy~";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("WL&GqR*A{+^TA]", "qv,-6Vy~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"qv,-6Vy~\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)20;
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false, false);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)20);
      assertNotNull(tarArchiveEntry0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(boolean0);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream");
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream");
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray0 = new byte[3];
      int int0 = zipArchiveInputStream0.read(byteArray0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)15;
      int int1 = (-245);
      int int2 = 676;
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-21);
      byte byte0 = (byte)44;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)63, (byte)63);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-55), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-95), (byte)63, (byte)0, (byte) (-42), (byte) (-21), (byte)44, (byte)0, (byte)106}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals((-55), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-95), (byte)63, (byte)0, (byte) (-42), (byte) (-21), (byte)44, (byte)0, (byte)106}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(zipArchiveInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 32782);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (-200));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-83)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveInputStream zipArchiveInputStream1 = null;
      try {
        zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "qxgXCYNpDK", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // qxgXCYNpDK
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)46, (-1521));
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = zipArchiveInputStream0.read(byteArray0, (-5446), (int) (byte)46);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int1 = zipArchiveInputStream0.read(byteArray0, 0, 0);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(2, byteArray0.length);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertNull(archiveEntry0);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry1);
      assertEquals((-1521), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 5519;
      PipedInputStream pipedInputStream0 = new PipedInputStream(5519);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      pipedInputStream0.mark(5519);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      zipArchiveInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray0 = null;
      int int1 = 0;
      boolean boolean0 = ZipArchiveInputStream.matches((byte[]) null, 0);
      assertFalse(boolean0);
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.mark((-3811));
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-844L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 972);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2722);
      pipedInputStream0.close();
      String string0 = "";
      boolean boolean0 = true;
      boolean boolean1 = true;
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "", true, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "V", true, true);
      pipedInputStream0.skip((-1530L));
      zipArchiveInputStream0.available();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)0;
      try { 
        pipedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = true;
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[5];
      try { 
        zipArchiveInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
