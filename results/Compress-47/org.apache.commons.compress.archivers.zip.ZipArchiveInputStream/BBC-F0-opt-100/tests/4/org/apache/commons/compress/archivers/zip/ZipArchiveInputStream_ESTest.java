/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 11:42:05 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)84;
      ZipArchiveInputStream.matches(byteArray0, (byte)84);
      System.setCurrentTimeMillis((-140L));
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      zipArchiveInputStream0.read(byteArray0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = 12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2219), 12);
      byteArrayInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null);
      zipArchiveInputStream0.markSupported();
      byteArrayInputStream0.reset();
      zipArchiveInputStream0.read();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      zipArchiveInputStream0.skip(1024L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[47];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream1);
      zipArchiveInputStream0.available();
      zipArchiveInputStream0.skip(1382L);
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0X0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[47];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream1);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.available();
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0X0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      ZipArchiveInputStream.matches(byteArray0, (byte)80);
      ZipArchiveInputStream.matches(byteArray0, (byte)80);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byte byte0 = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      try { 
        zipArchiveInputStream0.skip((byte)96);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)84;
      ZipArchiveInputStream.matches(byteArray0, (byte)84);
      System.setCurrentTimeMillis((-140L));
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)84;
      ZipArchiveInputStream.matches(byteArray0, (byte)84);
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, (byte)84);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2219), 12);
      byteArrayInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null);
      zipArchiveInputStream0.markSupported();
      byteArrayInputStream0.reset();
      zipArchiveInputStream0.read();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "GROUP_READ");
      zipArchiveInputStream0.mark((-48));
      zipArchiveInputStream0.read();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "ISO-8859-1", true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SrqIk7{=");
      zipArchiveInputStream0.skip(2686L);
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 0);
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null);
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = zipArchiveInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      
      int int0 = zipArchiveInputStream0.read();
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(zipArchiveEntry0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(5, byteArray0.length);
      
      ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream0.getNextZipEntry();
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(zipArchiveEntry1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(5, byteArray0.length);
      
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null, (byte)0);
      assertNotNull(cpioArchiveEntry0);
      assertEquals(0, cpioArchiveEntry0.getDataPadCount());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(1, cpioArchiveEntry0.getHeaderPadCount());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertNull(cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      
      boolean boolean1 = zipArchiveInputStream0.canReadEntryData(cpioArchiveEntry0);
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, cpioArchiveEntry0.getDataPadCount());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(1, cpioArchiveEntry0.getHeaderPadCount());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertNull(cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(5, byteArray0.length);
      assertFalse(boolean1);
      
      ZipArchiveEntry zipArchiveEntry2 = zipArchiveInputStream0.getNextZipEntry();
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(zipArchiveEntry2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(5, byteArray0.length);
      
      boolean boolean2 = zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(5, byteArray0.length);
      assertFalse(boolean2);
      
      ZipArchiveEntry zipArchiveEntry3 = zipArchiveInputStream0.getNextZipEntry();
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(zipArchiveEntry3);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(5, byteArray0.length);
      
      long long0 = zipArchiveInputStream0.skip(3);
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(5, byteArray0.length);
      assertEquals(0L, long0);
      
      zipArchiveInputStream0.close();
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(5, byteArray0.length);
      
      boolean boolean3 = ZipArchiveInputStream.matches(byteArray0, 0);
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte) (-74);
      byteArray0[8] = (byte)19;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 2565);
      assertArrayEquals(new byte[] {(byte)82, (byte)84, (byte)12, (byte) (-7), (byte) (-7), (byte)10, (byte) (-24), (byte) (-74), (byte)19}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((byte)10);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)0;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) (-21));
      assertArrayEquals(new byte[] {(byte)61, (byte) (-21), (byte) (-65), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      try { 
        zipArchiveInputStream0.read(byteArray0, (-1320), (int) (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)1;
      byteArray0[1] = (byte)2;
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte)16;
      int int0 = zipArchiveInputStream0.read(byteArray0, 355, 401);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)16, (byte)21, (byte)1, (byte)0, (byte)26, (byte)16}, byteArray0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int0);
      
      int int1 = zipArchiveInputStream0.read();
      assertTrue(int1 == int0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals((-1), int1);
      
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 3775);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)16, (byte)21, (byte)1, (byte)0, (byte)26, (byte)16}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveInputStream zipArchiveInputStream1 = null;
      try {
        zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long0 = zipArchiveInputStream0.skip(806L);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, long0);
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      assertNotNull(zipArchiveInputStream1);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      
      int int0 = zipArchiveInputStream1.available();
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertEquals(0, int0);
      
      try { 
        zipArchiveInputStream1.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byte byte0 = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)96, (byte)81, (byte) (-119), (byte)0, (byte) (-83), (byte) (-1)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)96, (byte)81, (byte) (-119), (byte)0, (byte) (-83), (byte) (-1)}, byteArray0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(6, byteArray0.length);
      
      zipArchiveInputStream0.close();
      assertArrayEquals(new byte[] {(byte)96, (byte)81, (byte) (-119), (byte)0, (byte) (-83), (byte) (-1)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(6, byteArray0.length);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)96, (byte)81, (byte) (-119), (byte)0, (byte) (-83), (byte) (-1)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertArrayEquals(new byte[] {(byte)96, (byte)81, (byte) (-119), (byte)0, (byte) (-83), (byte) (-1)}, byteArray0);
      assertNull(archiveEntry0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((byte) (-83));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)34;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 4191);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-88), (byte)27, (byte)34}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      int int0 = sequenceInputStream0.read(byteArray0, (int) (byte)34, (int) (byte) (-87));
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-88), (byte)27, (byte)34}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int0);
      
      sequenceInputStream0.mark((byte)34);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      sequenceInputStream0.mark(168);
      int int1 = zipArchiveInputStream0.read(byteArray0, 168, (-78));
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-88), (byte)27, (byte)34}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int1);
      
      int int2 = zipArchiveInputStream0.read();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals((-1), int2);
      
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, 1);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-88), (byte)27, (byte)34}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean1);
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertNull(archiveEntry0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      try { 
        zipArchiveInputStream0.read(byteArray0, (-1), (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "es";
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "es", false, false);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-1739L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)113;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)84);
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)4, (byte)113}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        dataInputStream0.readInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "", false, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 46);
      assertNotNull(bufferedInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, "tv^;x]ji/d0:b|@Mc{", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // tv^;x]ji/d0:b|@Mc{
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "DEFLATED", false);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("DEFLATED", (byte)0);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertNotNull(tarArchiveEntry0);
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("DEFLATED", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isFIFO());
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("DEFLATED", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "GROUP_READ");
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long0 = zipArchiveInputStream0.skip(0L);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, long0);
      
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 0);
      byteArrayInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null);
      byteArrayInputStream0.reset();
      zipArchiveInputStream0.read();
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.getNextZipEntry();
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((String) null, (byte) (-63));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid entry size <-63>
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ZipArchiveInputStream.matches(byteArray0, 0);
      ZipArchiveInputStream.matches(byteArray0, 0);
      ZipArchiveInputStream.matches(byteArray0, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        pipedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(38);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      String string0 = "=<3\\@FK)Z";
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "=<3@FK)Z");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // =<3@FK)Z
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
