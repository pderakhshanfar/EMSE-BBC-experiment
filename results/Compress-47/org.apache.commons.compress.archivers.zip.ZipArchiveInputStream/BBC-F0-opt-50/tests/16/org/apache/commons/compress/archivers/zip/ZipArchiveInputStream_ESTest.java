/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 13:14:51 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      ZipArchiveInputStream.matches(byteArray0, (byte)80);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2114445437), (byte)80);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-64);
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-50);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-24), 38);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArrayInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, true);
      zipArchiveInputStream0.read(byteArray0, 3, (int) (byte) (-64));
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      zipArchiveInputStream1.skip(30L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)37;
      byteArray0[8] = (byte) (-119);
      ZipArchiveInputStream.matches(byteArray0, (byte)37);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, "SHA256", false);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.markSupported();
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0X0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0X0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, (byte)26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.close();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)3;
      byte byte0 = (byte) (-76);
      zipArchiveInputStream0.getNextEntry();
      byteArray0[2] = (byte) (-76);
      ZipArchiveInputStream.matches(byteArray0, (byte)3);
      try { 
        zipArchiveInputStream0.skip((byte)107);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[8];
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-29);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      zipArchiveInputStream0.read();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-75);
      byteArray1[3] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)46;
      byteArray1[7] = (byte) (-29);
      byteArray1[8] = (byte)0;
      zipArchiveInputStream0.available();
      zipArchiveInputStream0.close();
      ZipArchiveInputStream.matches(byteArray1, 4);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "groupNo", false, false);
      zipArchiveInputStream0.mark(0);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.getNextZipEntry();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, (String) null);
      zipArchiveInputStream0.skip(1481L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-19);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(1481L);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream2 = null;
      try {
        zipArchiveInputStream2 = new ZipArchiveInputStream(pipedInputStream0, "l,uq:l+}v7`'*MTXnt");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // l,uq:l+}v7`'*MTXnt
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "groupNo", false, false);
      zipArchiveInputStream0.mark(0);
      zipArchiveInputStream0.getNextEntry();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)107;
      ZipArchiveInputStream.matches(byteArray0, (byte)107);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-11);
      ZipArchiveInputStream.matches(byteArray0, (byte)0);
      zipArchiveInputStream0.skip(286L);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte)0;
      ZipArchiveInputStream.matches(byteArray0, (-2146908992));
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "groupNo", false, false);
      zipArchiveInputStream1.skip(286L);
      zipArchiveInputStream1.skip(1024L);
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "QxBu", false);
      zipArchiveInputStream0.mark(4);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 1728);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)2;
      zipArchiveInputStream0.read(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)127;
      zipArchiveInputStream0.read(byteArray1, 30, (int) (byte)51);
      zipArchiveInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)0;
      ZipArchiveInputStream.matches(byteArray0, (byte)0);
      zipArchiveInputStream0.skip(3760L);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)15;
      byte byte1 = (byte)92;
      byte byte2 = (byte) (-19);
      byte byte3 = (byte) (-37);
      zipArchiveInputStream0.skip(0L);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((-652L));
      String string0 = "";
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream2 = null;
      try {
        zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream1, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      ZipArchiveInputStream.matches(byteArray0, 82);
      ZipArchiveInputStream.matches(byteArray0, (-2058));
      String string0 = "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$1";
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$1");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "QxBu", false);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-3657L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (-4271));
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "groupNo", false, false);
      zipArchiveInputStream1.mark((byte) (-82));
      zipArchiveInputStream1.getNextEntry();
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream1.close();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)15;
      byte byte1 = (byte)92;
      byte byte2 = (byte) (-19);
      byte byte3 = (byte) (-37);
      zipArchiveInputStream0.skip(0L);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((-652L));
      String string0 = "";
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("", 4617L, (-3500), (byte) (-19), (byte)15, 325L);
      zipArchiveInputStream0.canReadEntryData(arArchiveEntry0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream2 = null;
      try {
        zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream1, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.close();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("WORLD_READ");
      zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "groupNo", false, false);
      zipArchiveInputStream0.mark(0);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      zipArchiveInputStream0.read();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-75);
      byteArray1[3] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)46;
      byteArray1[7] = (byte) (-29);
      byteArray1[8] = (byte)0;
      zipArchiveInputStream0.available();
      zipArchiveInputStream0.close();
      ZipArchiveInputStream.matches(byteArray1, 4);
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)2;
      int int0 = zipArchiveInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-29), (byte)0, (byte)51, (byte) (-57), (byte) (-57), (byte)2}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-72);
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byteArray1[3] = (byte)73;
      byteArray1[4] = (byte)3;
      try { 
        zipArchiveInputStream0.read(byteArray1, (int) (byte) (-72), 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byte byte0 = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)0;
      int int0 = (-1484);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)2, (-1484));
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)1, (byte) (-61), (byte)74, (byte)0, (byte)2, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1484), byteArrayInputStream0.available());
      
      int int1 = byteArrayInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)1, (byte) (-61), (byte)74, (byte)0, (byte)2, (byte)0}, byteArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1484), byteArrayInputStream0.available());
      
      long long0 = byteArrayInputStream0.skip((byte)0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)1, (byte) (-61), (byte)74, (byte)0, (byte)2, (byte)0}, byteArray0);
      assertEquals((-1484L), long0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "Dh?~*^W&c!!m", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Dh?~*^W&c!!m
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)107;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) (-111));
      assertArrayEquals(new byte[] {(byte)26, (byte) (-119), (byte) (-111), (byte)7, (byte)26, (byte)107}, byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-19);
      byte byte0 = (byte)15;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-19), (byte)15, (byte)37, (byte)43, (byte)92, (byte) (-19), (byte) (-37)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      
      long long0 = byteArrayInputStream0.skip((-652L));
      assertArrayEquals(new byte[] {(byte)59, (byte) (-19), (byte)15, (byte)37, (byte)43, (byte)92, (byte) (-19), (byte) (-37)}, byteArray0);
      assertEquals(0L, long0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, true, true);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }
}
