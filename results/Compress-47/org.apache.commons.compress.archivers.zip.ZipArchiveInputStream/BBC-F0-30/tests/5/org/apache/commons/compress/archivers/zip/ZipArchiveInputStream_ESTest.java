/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 03:14:19 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.SyncFailedException;
import java.net.URI;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.Path;
import java.util.Enumeration;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byteArrayInputStream0.close();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-1900), 25);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream1);
      // Undeclared exception!
      try { 
        zipArchiveInputStream1.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipArchiveInputStream.matches(byteArray0, 2246);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-2143991803), (-2143991803));
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream1);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream1);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)127;
      ZipArchiveInputStream.matches(byteArray0, (byte)127);
      ZipArchiveInputStream.matches(byteArray0, 4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[7] = (byte)16;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(36);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0, 4);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, (String) null, true, true);
      zipArchiveInputStream0.skip((byte)16);
      zipArchiveInputStream0.read(byteArray0, 4, (int) (byte)0);
      System.setCurrentTimeMillis((byte)0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "CLRI");
      zipArchiveInputStream0.close();
      byte byte0 = (byte)3;
      try { 
        zipArchiveInputStream0.skip((byte)41);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'W#^?g<A4#", "UTF8");
      File file0 = MockFile.createTempFile("'W#^?g<A4#", "UTF8", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFile0.toURI();
      mockFile0.toPath();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)66;
      ZipArchiveInputStream.matches(byteArray0, 2911);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)50, 968);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2085);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0, 30);
      bufferedInputStream1.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream1);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.getNextZipEntry();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(bufferedInputStream1);
      zipArchiveInputStream1.read(byteArray0, 3, 3);
      try { 
        zipArchiveInputStream0.skip(2926L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.close();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)97;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)1;
      ZipArchiveInputStream.matches(byteArray1, (-1832));
      ZipArchiveInputStream.matches(byteArray0, (byte)0);
      zipArchiveInputStream0.close();
      ZipArchiveInputStream.matches(byteArray1, 1524);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 122, (byte)50);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 122);
      bufferedInputStream0.read(byteArray0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0, 2911);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream1);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextZipEntry();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE");
      zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      zipArchiveInputStream1.close();
      ZipArchiveInputStream.matches(byteArray0, 2911);
      System.setCurrentTimeMillis(447L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'W#^?g<A4#", "UTF8");
      MockFile.createTempFile("'W#^?g<A4#", "UTF8", (File) mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)47, 1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.close();
      ZipArchiveInputStream.matches(byteArray0, 12);
      ZipArchiveInputStream.matches(byteArray0, (byte)47);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte) (-112);
      PipedInputStream pipedInputStream0 = new PipedInputStream(36);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0, 9);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField", false, false);
      byte[] byteArray1 = new byte[0];
      zipArchiveInputStream0.read(byteArray1, (-2054), (int) (byte)16);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'W#^?g<A4#", "UTF8");
      File file0 = MockFile.createTempFile("'W#^?g<A4#", "UTF8", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFile0.toURI();
      mockFile0.toPath();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0, "Yu", false, false);
      zipArchiveInputStream0.skip(3244L);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte) (-112);
      PipedInputStream pipedInputStream0 = new PipedInputStream(36);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0, 4);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream1, (String) null, true, true);
      zipArchiveInputStream0.skip((byte)0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[8];
      sequenceInputStream0.read(byteArray0, (int) (byte)15, (int) (byte)15);
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte) (-115);
      bufferedInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      zipArchiveInputStream0.read(byteArray0, (-1848), (int) (byte) (-115));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'W#^?g<A4#", "UTF8");
      File file0 = MockFile.createTempFile("'W#^?g<A4#", "UTF8", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFile0.toURI();
      mockFile0.toPath();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0, "Yu", false, false);
      zipArchiveInputStream0.skip(3244L);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-1452L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[8];
      sequenceInputStream0.read(byteArray0, (int) (byte)15, (int) (byte)15);
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte) (-115);
      bufferedInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      zipArchiveInputStream0.read(byteArray0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.getNextEntry();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-49), (byte)100);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null);
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.normalize(uRI0);
      URI uRI2 = MockURI.relativize(uRI1, uRI1);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2048);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, (String) null, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      try { 
        zipArchiveInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-102);
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)113);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)113, (byte)50, (byte)66, (byte) (-102)}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)50, 15);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte)50, (byte)66, (byte) (-102)}, byteArray0);
      assertEquals((-46), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)113);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte)50, (byte)66, (byte) (-102)}, byteArray0);
      assertEquals((-46), byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)50;
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, 80);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)113, (byte)50, (byte)66, (byte) (-102)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(byteArray0, byteArray1);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte)50, (byte)66, (byte) (-102)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-46), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte)50, (byte)66, (byte) (-102)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-46), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNull(archiveEntry0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean2 = ZipArchiveInputStream.matches(byteArray0, (-1));
      assertEquals(4, byteArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)113, (byte)50, (byte)66, (byte) (-102)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(byteArray0, byteArray1);
      
      int int0 = zipArchiveInputStream0.read(byteArray1, (int) (byte)50, (int) (byte)50);
      assertEquals(4, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)113, (byte)50, (byte)66, (byte) (-102)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)66, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-46), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int1 = zipArchiveInputStream0.read(byteArray0, (int) (byte) (-102), (int) (byte)50);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)113, (byte)50, (byte)66, (byte) (-102)}, byteArray0);
      assertTrue(int1 == int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-46), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNull(archiveEntry0);
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ArchiveEntry archiveEntry1 = zipArchiveInputStream0.getNextEntry();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNull(archiveEntry1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)91;
      sequenceInputStream0.mark(1684);
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)110, (byte) (-127), (byte)110, (byte)91, (byte)25, (byte)91}, byteArray0);
      
      ArchiveEntry archiveEntry2 = zipArchiveInputStream0.getNextEntry();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNull(archiveEntry2);
      
      ArchiveEntry archiveEntry3 = zipArchiveInputStream0.getNextEntry();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNull(archiveEntry3);
      
      try { 
        zipArchiveInputStream0.read(byteArray0, (int) (byte)91, (int) (byte)91);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)66;
      byteArray0[1] = (byte) (-102);
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)113);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-102), (byte)66, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)50, 15);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-102), (byte)66, (byte)0}, byteArray0);
      assertEquals((-46), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 20);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-102), (byte)66, (byte)0}, byteArray0);
      assertEquals((-46), byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      int int0 = bufferedInputStream0.read(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-102), (byte)66, (byte)0}, byteArray0);
      assertEquals((-46), byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-102), (byte)66, (byte)0}, byteArray0);
      assertEquals((-46), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-102), (byte)66, (byte)0}, byteArray0);
      assertEquals((-46), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-102), (byte)66, (byte)0}, byteArray0);
      assertEquals((-46), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNull(zipArchiveEntry0);
      
      ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-102), (byte)66, (byte)0}, byteArray0);
      assertEquals((-46), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNull(zipArchiveEntry1);
      
      boolean boolean1 = zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-102), (byte)66, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals((-46), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      try { 
        zipArchiveInputStream0.read(byteArray0, 113, (-526));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 692);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 122, (byte)50);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-114), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 122);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-114), byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      int int0 = bufferedInputStream0.read(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-114), byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0, 2911);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals((-114), byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream1);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNull(zipArchiveEntry0);
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
      
      ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNull(zipArchiveEntry1);
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE");
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(ZipArchiveEntry.NameSource.NAME, jarArchiveEntry0.getNameSource());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, jarArchiveEntry0.getCommentSource());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNotNull(jarArchiveEntry0);
      
      boolean boolean1 = zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(ZipArchiveEntry.NameSource.NAME, jarArchiveEntry0.getNameSource());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, jarArchiveEntry0.getCommentSource());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertNotNull(zipArchiveInputStream1);
      
      int int1 = zipArchiveInputStream1.available();
      assertEquals(8, byteArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertFalse(int1 == int0);
      assertEquals((-114), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      
      try { 
        zipArchiveInputStream0.read(byteArray0, 2085, 2085);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertNotNull(bufferedInputStream0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)15;
      int int0 = sequenceInputStream0.read(byteArray0, (int) (byte)15, (int) (byte)15);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)57;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte)12;
      byteArray0[3] = (byte)12;
      byte byte3 = (byte)22;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-39);
      byte byte4 = (byte) (-115);
      byteArray0[7] = (byte) (-115);
      int int1 = bufferedInputStream0.read(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)15, (byte)57, (byte)0, (byte)12, (byte)22, (byte)16, (byte) (-39), (byte) (-115)}, byteArray0);
      assertTrue(int1 == int0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNull(zipArchiveEntry0);
      
      ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNull(zipArchiveEntry1);
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      assertFalse(boolean0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      try { 
        zipArchiveInputStream0.read(byteArray0, 0, (-4127));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)36;
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)68;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)68);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-128), (byte)37, (byte)68}, byteArray0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-122);
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) (-122));
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)16, (byte)65, (byte) (-122)}, byteArray0);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'W#^?g<A4#", "UTF8");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("'W#^?g<A4#", "UTF8", (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("/experiment/'W#^?g<A4#/UTF8", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/'W#^?g<A4#", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals("UTF8", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/experiment/'W#^?g<A4#/UTF8/'W#^?g<A4#0UTF8", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("'W#^?g<A4#0UTF8", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/experiment/'W#^?g<A4#/UTF8", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(mockFileInputStream0);
      
      URI uRI0 = mockFile0.toURI();
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals("/experiment/'W#^?g<A4#/UTF8", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/'W#^?g<A4#", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals("UTF8", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/experiment/'W%23%5E%3Fg%3CA4%23/UTF8/", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file:/experiment/'W%23%5E%3Fg%3CA4%23/UTF8/", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      assertNotSame(mockFile0, file0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals("/experiment/'W#^?g<A4#/UTF8", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/'W#^?g<A4#", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals("UTF8", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertNotNull(path0);
      assertNotSame(mockFile0, file0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0, "Yu", false, false);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("/experiment/'W#^?g<A4#/UTF8", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/'W#^?g<A4#", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals("UTF8", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/experiment/'W#^?g<A4#/UTF8/'W#^?g<A4#0UTF8", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("'W#^?g<A4#0UTF8", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/experiment/'W#^?g<A4#/UTF8", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0, mockFileInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      long long0 = zipArchiveInputStream0.skip(3244L);
      assertEquals(0L, long0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("/experiment/'W#^?g<A4#/UTF8", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/'W#^?g<A4#", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals("UTF8", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/experiment/'W#^?g<A4#/UTF8/'W#^?g<A4#0UTF8", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("'W#^?g<A4#0UTF8", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/experiment/'W#^?g<A4#/UTF8", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0, mockFileInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-102);
      ZipArchiveInputStream.matches(byteArray0, (byte)113);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)50, 15);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)113);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte)50;
      byteArray1[5] = (byte) (-102);
      byteArray1[6] = (byte)113;
      byteArray1[7] = (byte)113;
      byteArray1[8] = (byte)66;
      pushbackInputStream0.unread(byteArray1);
      String string0 = "";
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
