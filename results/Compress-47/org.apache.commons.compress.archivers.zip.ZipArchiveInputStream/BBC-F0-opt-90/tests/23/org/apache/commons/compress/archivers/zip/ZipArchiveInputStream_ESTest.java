/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 18:24:49 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)97;
      ZipArchiveInputStream.matches(byteArray0, 2145382391);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)56;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, "nextSym", false);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0X0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream1);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0X0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getBytesRead();
      zipArchiveInputStream0.skip(0L);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextZipEntry();
      try { 
        zipArchiveInputStream0.skip(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.skip(20L);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      zipArchiveInputStream0.skip(1024L);
      JarEntry jarEntry0 = new JarEntry("R'Li[(M%Auu");
      ZipArchiveEntry zipArchiveEntry0 = null;
      try {
        zipArchiveEntry0 = new ZipArchiveEntry(jarEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte)4;
      ZipArchiveInputStream.matches(byteArray0, (byte)4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null, false);
      zipArchiveInputStream0.getNextZipEntry();
      sequenceInputStream0.close();
      zipArchiveInputStream0.skip(1011L);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)73;
      ZipArchiveInputStream.matches(byteArray0, 62);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      int int0 = 571;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 571);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)48;
      ZipArchiveInputStream.matches(byteArray0, 2558);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)81;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)27, (byte)27);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, true);
      DataInputStream dataInputStream0 = new DataInputStream(zipArchiveInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(bufferedInputStream0, (String) null);
      zipArchiveInputStream1.close();
      try { 
        zipArchiveInputStream1.read(byteArray0, 1331, (-1162));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, "UTF8", false, false);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      byte[] byteArray0 = new byte[0];
      try { 
        zipArchiveInputStream0.read(byteArray0, (-2045222520), 16);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      dataInputStream0.available();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, "UTF8", false, false);
      zipArchiveInputStream0.close();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-1718L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)2;
      ZipArchiveInputStream.matches(byteArray0, 4300);
      int int0 = (-2145361627);
      ZipArchiveInputStream.matches(byteArray0, (-2145361627));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int1 = (-3599);
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 252);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-255L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      dataInputStream0.available();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, "UTF8", false, false);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(zipArchiveInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream0, sequenceInputStream0);
      sequenceInputStream0.close();
      zipArchiveInputStream0.markSupported();
      zipArchiveInputStream0.getNextEntry();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(sequenceInputStream1);
      zipArchiveInputStream1.canReadEntryData((ArchiveEntry) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "M", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)46;
      zipArchiveInputStream0.read(byteArray0, (int) (byte)35, 0);
      zipArchiveInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "bgL", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      zipArchiveInputStream1.read(byteArray0, (int) (byte) (-51), (-2006));
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("", 702L, (-2006), (-1), (-1), (-808L));
      zipArchiveInputStream1.canReadEntryData(arArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)41;
      ZipArchiveInputStream.matches(byteArray0, (byte)63);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(928);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, (String) null);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = MockFile.createTempFile("i401<N_G({", (String) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0, "_&Zb^4L6vFex", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // _&Zb^4L6vFex
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = "&{tTfU?[.rGjG+[s'.";
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "&{tTfU?[.rGjG+[s'.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // &{tTfU?[.rGjG+[s'.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, "UTF8", false, false);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)85, false);
      zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.skip(12L);
      zipArchiveInputStream0.skip(0L);
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (-447));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      int int0 = zipArchiveInputStream0.read(byteArray0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "UTF8", false);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNotNull(zipArchiveInputStream1);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream1.getNextZipEntry();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertNull(zipArchiveEntry0);
      
      long long0 = zipArchiveInputStream1.skip(2574L);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "M", true, true);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry((String) null, 1300L, 4812, (-870), (-1), 1300L);
      assertEquals(1300L, arArchiveEntry0.getSize());
      assertEquals((-870), arArchiveEntry0.getGroupId());
      assertNull(arArchiveEntry0.getName());
      assertEquals(1300L, arArchiveEntry0.getLength());
      assertEquals(1300L, arArchiveEntry0.getLastModified());
      assertEquals(4812, arArchiveEntry0.getUserId());
      assertEquals((-1), arArchiveEntry0.getMode());
      assertFalse(arArchiveEntry0.isDirectory());
      assertNotNull(arArchiveEntry0);
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(arArchiveEntry0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(1300L, arArchiveEntry0.getSize());
      assertEquals((-870), arArchiveEntry0.getGroupId());
      assertNull(arArchiveEntry0.getName());
      assertEquals(1300L, arArchiveEntry0.getLength());
      assertEquals(1300L, arArchiveEntry0.getLastModified());
      assertEquals(4812, arArchiveEntry0.getUserId());
      assertEquals((-1), arArchiveEntry0.getMode());
      assertFalse(arArchiveEntry0.isDirectory());
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)65;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", true, false);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("+|49S@F");
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, jarArchiveEntry0.getCommentSource());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("+|49S@F", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("+|49S@F", jarArchiveEntry0.toString());
      assertEquals(ZipArchiveEntry.NameSource.NAME, jarArchiveEntry0.getNameSource());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, jarArchiveEntry0.getCommentSource());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("+|49S@F", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("+|49S@F", jarArchiveEntry0.toString());
      assertEquals(ZipArchiveEntry.NameSource.NAME, jarArchiveEntry0.getNameSource());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertFalse(boolean0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)20;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)72);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)72, (byte)63, (byte)63, (byte)20, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      int int0 = 2;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)72, (byte)63, (byte)63, (byte)20, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      try { 
        zipArchiveInputStream0.skip((byte)20);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null, false);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNull(zipArchiveEntry0);
      
      sequenceInputStream0.close();
      long long0 = zipArchiveInputStream0.skip(1011L);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, long0);
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (-447));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      int int0 = zipArchiveInputStream0.read(byteArray0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }
}
