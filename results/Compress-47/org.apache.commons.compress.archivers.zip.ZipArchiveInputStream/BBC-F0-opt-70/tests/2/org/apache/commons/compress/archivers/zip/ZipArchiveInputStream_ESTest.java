/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:06:00 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.attribute.FileTime;
import java.util.Enumeration;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      ZipArchiveInputStream.matches(byteArray0, (byte)80);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      ZipArchiveInputStream.matches(byteArray0, (byte)80);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, (String) null);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.skip(1010L);
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0X0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0X0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2145351091), (-2145351091));
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 4319;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 4319);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)31;
      byteArray0[4] = (byte) (-79);
      byteArray0[4] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)92);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)63;
      byteArray0[0] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, true);
      zipArchiveInputStream0.close();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ZipArchiveInputStream.matches(byteArray0, 92);
      try { 
        zipArchiveInputStream0.read(byteArray0, (int) (byte)63, (int) (byte)63);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.markSupported();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.close();
      byte[] byteArray0 = new byte[0];
      try { 
        zipArchiveInputStream0.read(byteArray0, 2146543418, 2146543418);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.markSupported();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      byteArrayInputStream0.skip(16L);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextZipEntry();
      try { 
        zipArchiveInputStream0.skip(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 888);
      byteArrayInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.read();
      zipArchiveInputStream0.skip(371L);
      zipArchiveInputStream0.read(byteArray0, 12, 1175);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.getNextEntry();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)92;
      byteArray1[2] = (byte) (-79);
      byteArray1[3] = (byte) (-89);
      byteArray1[4] = (byte) (-79);
      byteArray1[5] = (byte)31;
      ZipArchiveInputStream.matches(byteArray1, 1175);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 3020);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)80;
      int int0 = 4257;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray1, 4257);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.getNextEntry();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)80;
      zipArchiveInputStream0.read(byteArray1, (int) (byte)83, 1250);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.getNextEntry();
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray1, 4257);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.markSupported();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4914), (byte)0);
      byteArrayInputStream0.skip(2776L);
      byteArrayInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.read();
      zipArchiveInputStream0.skip(65535L);
      byteArrayInputStream0.read();
      zipArchiveInputStream0.read();
      byteArrayInputStream0.mark(4096);
      byteArrayInputStream0.read();
      ZipArchiveInputStream.matches(byteArray0, 4);
      zipArchiveInputStream0.close();
      try { 
        zipArchiveInputStream0.skip(134695760L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4914), (byte)0);
      byteArrayInputStream0.skip(2776L);
      byteArrayInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.read();
      zipArchiveInputStream0.skip(65535L);
      byteArrayInputStream0.read();
      zipArchiveInputStream0.read();
      ZipArchiveInputStream.matches(byteArray0, 4);
      zipArchiveInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = 98496370;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 98496370);
      byteArrayInputStream0.skip(888);
      byteArrayInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.read();
      zipArchiveInputStream0.skip(14L);
      byteArrayInputStream0.read();
      zipArchiveInputStream0.read();
      byteArrayInputStream0.reset();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      zipArchiveInputStream1.read(byteArray0, (-1), (int) (byte)31);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-27L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-762), (byte)0);
      byteArrayInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.read();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-1256L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      ZipArchiveInputStream.matches(byteArray0, (byte) (-108));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(75);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(pipedInputStream1, (String) null);
      zipArchiveInputStream0.read(byteArray0, 0, (int) (byte)3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4914), (-2160));
      byteArrayInputStream0.skip(2776L);
      byteArrayInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.read();
      zipArchiveInputStream0.skip(65535L);
      byteArrayInputStream0.read();
      zipArchiveInputStream0.read();
      byteArrayInputStream0.read(byteArray0);
      zipArchiveInputStream0.read(byteArray0, 15, (-5332));
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      zipArchiveInputStream1.getNextEntry();
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)92, (byte) (-79));
      byteArrayInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.read();
      zipArchiveInputStream0.skip(2283L);
      byteArrayInputStream0.read();
      zipArchiveInputStream0.read();
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.reset();
      zipArchiveInputStream0.skip((byte)0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.markSupported();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.skip(0L);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)3;
      ZipArchiveInputStream.matches(byteArray0, 851);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, "", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.markSupported();
      int int0 = 2386;
      zipArchiveInputStream0.mark(2386);
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)32;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("U/_}");
      zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
      ZipArchiveInputStream.matches(byteArray0, (-1582));
      zipArchiveInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("U/_}");
      zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 888);
      byteArrayInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.read();
      zipArchiveInputStream0.skip(371L);
      byteArrayInputStream0.read();
      zipArchiveInputStream0.read();
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.reset();
      zipArchiveInputStream0.read(byteArray0, 68, (int) (byte) (-79));
      zipArchiveInputStream0.getNextEntry();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("UTF8");
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-103);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, false);
      DataInputStream dataInputStream0 = new DataInputStream(zipArchiveInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(dataInputStream0, (String) null, false, false);
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream1, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1360);
      pipedInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, (String) null, false, false);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(578);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "", true, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 888);
      byteArrayInputStream0.skip((byte) (-79));
      byteArrayInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.read();
      zipArchiveInputStream0.skip(371L);
      byteArrayInputStream0.read();
      zipArchiveInputStream0.read();
      byteArrayInputStream0.read(byteArray0);
      zipArchiveInputStream0.read(byteArray0, 68, (int) (byte)0);
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byte byte0 = (byte)3;
      byteArray0[1] = (byte)3;
      ZipArchiveInputStream.matches(byteArray0, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "Truncated ZIP file", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Truncated ZIP file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)12, 68);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "M*\u0003.2av");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // M*\u0003.2av
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
