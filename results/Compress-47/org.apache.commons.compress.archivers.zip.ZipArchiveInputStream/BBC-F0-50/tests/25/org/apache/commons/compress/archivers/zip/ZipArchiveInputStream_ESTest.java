/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:54:54 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      jarArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      jarArchiveEntry0.setMethod(89);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte) (-24);
      ZipArchiveInputStream.matches(byteArray0, (byte)30);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      zipArchiveInputStream1.close();
      zipArchiveInputStream0.getNextZipEntry();
      byte[] byteArray0 = new byte[0];
      ZipArchiveInputStream.matches(byteArray0, (-2059));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2143136541), (-2143136541));
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[45];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.skip(0L);
      zipArchiveInputStream0.skip(0L);
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0X0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.close();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      try { 
        zipArchiveInputStream0.read(byteArray1, (-2125), (int) (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.close();
      ZipArchiveInputStream.matches(byteArray0, (byte) (-85));
      byteArrayInputStream0.skip((byte) (-85));
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      ZipArchiveInputStream.matches(byteArray0, 2145100203);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      byte[] byteArray0 = new byte[0];
      int int0 = 1467;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 1467);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      ZipArchiveInputStream.matches(byteArray0, (byte)4);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)4);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, (byte)4);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[3];
      sequenceInputStream0.read(byteArray0, 4252, 26113);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      zipArchiveInputStream0.read(byteArray0, (int) (byte)0, 3530753);
      zipArchiveInputStream0.read(byteArray0, 3530753, (int) (byte)0);
      zipArchiveInputStream0.skip((byte)4);
      zipArchiveInputStream0.skip((byte)0);
      zipArchiveInputStream0.getNextZipEntry();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[3];
      sequenceInputStream0.read(byteArray0, 4252, 26113);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      zipArchiveInputStream0.read(byteArray0, (int) (byte)0, 3530753);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream1.read((byte[]) null, 2375, 3621);
      zipArchiveInputStream0.read((byte[]) null, 3530753, 2146649349);
      zipArchiveInputStream1.skip(4252);
      zipArchiveInputStream1.getNextZipEntry();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(sequenceInputStream0, (String) null, true);
      zipArchiveInputStream2.close();
      zipArchiveInputStream1.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      ZipArchiveInputStream.matches(byteArray0, (byte)78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 42, (-1923));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 735);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 42);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)78, false);
      zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
      zipArchiveInputStream0.skip(1024L);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      zipArchiveInputStream0.skip(0L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)85;
      byte byte0 = (byte)15;
      zipArchiveInputStream0.read(byteArray0, (int) (byte)15, (int) (byte)15);
      int int0 = 824;
      zipArchiveInputStream0.read(byteArray0, (int) (byte)15, 824);
      zipArchiveInputStream0.skip(981L);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      ZipArchiveInputStream.matches(byteArray0, (byte)78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 42, (-1923));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 735);
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 4600);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream.matches(byteArray0, 571);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      try { 
        zipArchiveInputStream0.skip(101075792L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      ZipArchiveInputStream.matches(byteArray0, (byte)50);
      ZipArchiveInputStream.matches(byteArray0, (byte)50);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1881);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, (String) null, false, false);
      zipArchiveInputStream0.skip(1881);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)45;
      ZipArchiveInputStream.matches(byteArray0, (byte)111);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      zipArchiveInputStream0.skip(0L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-99);
      ZipArchiveInputStream.matches(byteArray0, (byte)112);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 638, (byte)26);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      ZipArchiveInputStream.matches(byteArray0, (byte)50);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 42, (-1923));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 735);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, (byte)50);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)45;
      ZipArchiveInputStream.matches(byteArray0, (-4505));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "%/W`+z");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // %/W`+z
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[1];
      sequenceInputStream0.read(byteArray0, (int) (byte)107, (-522));
      byteArray0[0] = (byte)107;
      sequenceInputStream0.read(byteArray0);
      sequenceInputStream0.mark(0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "G'PU\"N+", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // G'PU\"N+
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(15);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 15);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, "", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[45];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0X0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.skip((byte)32);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-21);
      byteArray1[3] = (byte)21;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)21;
      byteArray1[6] = (byte)21;
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      zipArchiveInputStream1.read(byteArray0, (int) (byte)58, (int) (byte)21);
      zipArchiveInputStream1.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      ZipArchiveInputStream.matches(byteArray0, (byte)50);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 42, (-1923));
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null);
      zipArchiveInputStream0.read(byteArray0, 4, (-1923));
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", 735);
      zipArchiveInputStream0.canReadEntryData(cpioArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      zipArchiveInputStream0.skip(0L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[2] = (byte)15;
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)84;
      zipArchiveInputStream0.read(byteArray0, (-2394), (-341));
      zipArchiveInputStream0.skip(0L);
      zipArchiveInputStream0.skip(0L);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("R71|'8");
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[3];
      sequenceInputStream0.read(byteArray0, 4252, 26113);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      zipArchiveInputStream0.read(byteArray0, (int) (byte)0, 3530753);
      zipArchiveInputStream0.read(byteArray0, 3530753, (int) (byte)0);
      long long0 = zipArchiveInputStream0.skip((byte)4);
      assertEquals(0L, long0);
      
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.read(byteArray0, 0, 0);
      zipArchiveInputStream0.read(byteArray0, (-1), 15);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m;5M+n>&J P7w", 16L);
      zipArchiveInputStream0.canReadEntryData(cpioArchiveEntry0);
      assertEquals(0, zipArchiveInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.skip((byte)32);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-21);
      byteArray1[3] = (byte)21;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)21;
      byteArray1[6] = (byte)21;
      zipArchiveInputStream0.read(byteArray1, (int) (byte) (-21), 265);
  }
}
