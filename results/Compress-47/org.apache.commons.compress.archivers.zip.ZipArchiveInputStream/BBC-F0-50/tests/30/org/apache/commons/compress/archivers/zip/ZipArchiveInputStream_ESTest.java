/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 19:35:20 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0X0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[34];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0X0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      ZipArchiveInputStream.matches(byteArray0, (byte)80);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, (byte)80);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", false, false);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2145102844), 2101792506);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      zipArchiveInputStream0.skip(1024L);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)1, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", 2247L);
      cpioArchiveEntry0.getRemoteDeviceMin();
      zipArchiveInputStream0.canReadEntryData(cpioArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream.matches(byteArray0, 4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 2543);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "aCUtA-");
      zipArchiveInputStream0.skip(9223372036854775807L);
      zipArchiveInputStream0.getNextEntry();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)68;
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)82;
      byteArray1[6] = (byte)16;
      byteArray1[7] = (byte)36;
      ZipArchiveInputStream.matches(byteArray1, 12);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)112;
      byte byte1 = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2145576468, (byte)112);
      byteArrayInputStream0.reset();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-3508), (byte)26);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZipArchiveInputStream.matches(byteArray0, 124);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "S", false, false);
      zipArchiveInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(dataInputStream0, (String) null);
      zipArchiveInputStream1.mark((-63));
      // Undeclared exception!
      try { 
        zipArchiveInputStream1.getNextZipEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.close();
      try { 
        zipArchiveInputStream0.skip(9223372036854775807L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "S", false, false);
      zipArchiveInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(dataInputStream0, (String) null);
      zipArchiveInputStream1.mark((-63));
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream1);
      // Undeclared exception!
      try { 
        zipArchiveInputStream2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "S", false, false);
      zipArchiveInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      zipArchiveInputStream0.getNextZipEntry();
      byte[] byteArray0 = new byte[0];
      try { 
        zipArchiveInputStream0.read(byteArray0, 2726, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 124, (-3508));
      byteArrayInputStream0.reset();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.read(byteArray0, (-3508), (-4487));
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, (String) null);
      zipArchiveInputStream1.skip(46L);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      ZipArchiveInputStream.matches(byteArray0, (byte)79);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)79);
      String string0 = null;
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, (String) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(zipArchiveInputStream0, 2034458192);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "S", false, false);
      zipArchiveInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(dataInputStream0, (String) null);
      zipArchiveInputStream1.mark((-63));
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream1);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream2.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 124, (-3508));
      byteArrayInputStream0.reset();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZipArchiveInputStream.matches(byteArray0, (byte)79);
      ZipArchiveInputStream.matches(byteArray0, (byte)79);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 46);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null);
      zipArchiveInputStream1.mark((-63));
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(bufferedInputStream0);
      zipArchiveInputStream2.getNextEntry();
      zipArchiveInputStream1.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "S", false, false);
      zipArchiveInputStream0.close();
      try { 
        zipArchiveInputStream0.read((byte[]) null, 2185, (-818));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "S", false);
      zipArchiveInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "S");
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-40);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-112);
      try { 
        zipArchiveInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      byte byte0 = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)0;
      ZipArchiveInputStream.matches(byteArray0, 1338);
      PipedInputStream pipedInputStream0 = new PipedInputStream(4);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)26;
      ZipArchiveInputStream.matches(byteArray0, (-831));
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)26);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      zipArchiveInputStream0.skip(4);
      zipArchiveInputStream0.skip((byte)0);
      zipArchiveInputStream0.close();
      try { 
        zipArchiveInputStream0.skip((byte)26);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-63);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 662, 1817);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 891, 662);
      byteArrayInputStream1.reset();
      InputStream inputStream0 = null;
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray1, 95);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6:tEnv]VJTLw*mA1");
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "org.apache.commons.compress.archivers.zip.NioZipEncoding", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 49, 2300);
      byteArrayInputStream0.reset();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZipArchiveInputStream.matches(byteArray0, (-666));
      zipArchiveInputStream1.read(byteArray0, 4341, (-1275));
      zipArchiveInputStream0.skip(0L);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveInputStream.matches(byteArray0, 124);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-112);
      byteArray0[8] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)28);
      byteArrayInputStream0.reset();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      long long0 = zipArchiveInputStream0.skip(283L);
      assertEquals(0L, long0);
      
      zipArchiveInputStream0.skip(36864L);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 124);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)27;
      ZipArchiveInputStream.matches(byteArray0, 2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 46);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, (String) null);
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2338, 0);
      byteArrayInputStream0.reset();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      ZipArchiveInputStream.matches(byteArray0, (byte)101);
      int int0 = zipArchiveInputStream0.read(byteArray0, (-2198), (-1241));
      assertEquals((-1), int0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("The stream is closed");
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, 115792);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "S", false, false);
      zipArchiveInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "S");
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "org.apache.commons.compress.archivers.zip.NioZipEncoding", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)0;
      zipArchiveInputStream0.read(byteArray0, 0, (int) (byte) (-27));
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String string0 = "UniCode path extra data must have at least 5 bytes.";
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, "UniCode path extra data must have at least 5 bytes.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // UniCode path extra data must have at least 5 bytes.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = false;
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "S", false, false);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "S");
      // Undeclared exception!
      try { 
        zipArchiveInputStream1.skip((-1108L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 1338);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)100;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "Always", false);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(zipArchiveInputStream0, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)27;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "", true, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "Unexpected record signature: 0X%X", true, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Unexpected record signature: 0X%X
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
