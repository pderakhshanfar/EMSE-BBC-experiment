/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 00:14:30 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "og.globafiniZ", 38, 38);
      Node node1 = new Node(118, node0, node0, node0, node0, 55, 42);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "og.globafiniZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "infinity", (-2104612473), 0);
      Node node1 = new Node(118, node0, node0, node0, node0, 55, 977);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "vcwwJ.C0vqQ=ara");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(38, node0);
      Node node2 = new Node(516, node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 516
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "infinity", 38, (-23));
      Node node1 = new Node(118, node0, node0, node0, node0, 40, 57);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "infinity");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "infinity", 38, 38);
      Node node1 = new Node(118, node0, node0, node0, node0, 40, 57);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "infinity");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "infinity", (-2104612473), (-23));
      Node node1 = new Node(118, node0, node0, node0, node0, 55, 42);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, ".prototype.", 38, 38);
      Node node1 = new Node(118, node0, node0, node0, node0, 40, 57);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, ".prototype.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(35, "wnfity", 35, 35);
      Node node1 = new Node(4095, node0, 43, 2);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "goog.globalog.globafniZ", 38, 38);
      Node node1 = new Node(118, node0, node0, node0, node0, 40, 57);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "goog.globalog.globafniZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "infinity", (-4700), (-23));
      Node node1 = new Node(118, node0, node0, node0, node0, 55, 42);
      Node node2 = new Node((-2414), node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node3 = Normalize.parseAndNormalizeTestCode(compiler0, "infinity");
      nameAnalyzer0.process(node1, node3);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"infinity\">infinity</a><ul><li>REFERENCED BY: </li></ul></li><li><a name=\"window\">window</a><ul><li>REFERS TO: <a href=\"#infinity\">infinity</a></li></ul></li></ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "goog.globalfiniZ", (-2104612473), (-30));
      Node node1 = new Node(118, node0, node0, node0, node0, 55, 42);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NameAnalyzer$JsNameRefNodR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "window", 38, 101);
      Node node1 = new Node(2075626741, node0);
      Compiler compiler1 = new Compiler();
      Compiler compiler2 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler2, false);
      Node node2 = Normalize.parseAndNormalizeTestCode(compiler2, "window");
      nameAnalyzer0.process(node2, node1);
      assertFalse(node2.isSetterDef());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "googlobalfiniZ", 38, 38);
      Node node1 = new Node(118, node0, node0, node0, node0, 55, 42);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "googlobalfiniZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(69, 69, 46);
      Node node1 = new Node(114, node0);
      nameAnalyzer0.process(node0, node1);
      assertTrue(node0.mayMutateGlobalStateOrThrow());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(111, 111, 111);
      Node node1 = new Node(111, node0);
      Node node2 = Node.newNumber((double) 16);
      node1.addChildToBack(node2);
      nameAnalyzer0.process(node0, node1);
      assertEquals(55, Node.INFERRED_FUNCTION);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString((-1584), "A'V'8qGvS7^05_s{", 302, (-1619757125));
      Node node1 = new Node(110, node0);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isGetterDef());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(111, "A'V'8qGvS7^05_s{", 111, (-1619757141));
      Node node1 = new Node(119, node0);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((-335), "com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode", 142, (-335));
      Node node1 = new Node(113, node0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isOnlyModifiesThisCall());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newString(111, "A'V'wqGvS7^05Zs{", 111, (-1619757160));
      Node node1 = new Node(108, node0);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isStringKey());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((-4763), "com.google.javascript.jscomp.OptimizeParameters$Parameter", (-4763), 118);
      Node node1 = new Node(49, node0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node1);
      assertEquals(48, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString((-14), "com.google.javascript.rhino.jstype.NoType", (-720), 105);
      Node node1 = new Node(115, node0);
      Node node2 = new Node((-1), node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(1329, "com.google.javascript.rhino.jstype.NoType", 1329, 1329);
      Node node1 = new Node(86, node0);
      Node node2 = new Node(4, node1);
      nameAnalyzer0.process(node1, node2);
      assertEquals((-1), node2.getSourceOffset());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "gooAg.gl.balfiniZ", (-2104612473), (-30));
      Node node1 = new Node(118, node0, node0, node0, node0, 55, 42);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "gooAg.gl.balfiniZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(42, "crossModuleCodeMotion", 1332, 1332);
      Node node1 = new Node(37, node0);
      NameAnalyzer nameAnalyzer1 = new NameAnalyzer(compiler0, true);
      Normalize.parseAndNormalizeTestCode(compiler0, "F}A0S.El");
      nameAnalyzer0.process(node0, node1);
      assertFalse(node0.isFor());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(42, "crossModuleCodeMotion", 1329, 38);
      Node node1 = compiler0.parseTestCode("psyZ:(S$8WR)K{f");
      Node node2 = new Node(37, node1);
      nameAnalyzer0.process(node0, node2);
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(154, "<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 0</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 0</li>\n<li>Referenced Names: 0</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 0</li>\n</ul>ALL NAMES<ul>\n</ul></body></html>", 154, (-1723968647));
      Node node1 = new Node(2272, node0);
      Node node2 = new Node(2, node1);
      nameAnalyzer0.process(node0, node2);
      assertFalse(node0.isCast());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node((-14));
      Node node1 = new Node(86, node0);
      Node node2 = new Node(38, node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newString((-14), "SHA-512", (-14), (-14));
      Node node1 = new Node(86, node0);
      node0.setType(40);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node0.isDo());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(42, "goog.globalfiniZ", (-2104612473), (-30));
      Node node1 = new Node(86, node0, node0, node0, node0, 55, 42);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "this");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }
}
