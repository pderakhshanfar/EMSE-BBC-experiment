/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 10:53:53 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "var JSCompiler_stubMap = [];function JSCompiler_stubMetho9(JSCompiler_stubMethod_id) {  return function() {    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(        this, arguments); };}function JSCompiler_unstubMethod(    JSCompiler_unstubMethod_id, JSCompile_unstubMethod_body) {  return JSCompiler_stubMap[JSCompiler_unstubMethd8id] =       JSCompiler_unstubMethod_body;}");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = compiler0.parseTestCode("var JSompiler_stubMap = [];function JSCompiler_stubMetho9(JSCompiler_stubMethod_id) {  return function() {    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(        this, arguents); };}function JSCompiler_unstubMethod(   JSCompiler_unstuMethod_id, JSCompile_unstubMethod_body) {  return JSCompiler_stubMap[JSCompiler_unstubMethd8id] =       JSCompiler_unstubMemhod_body;}");
      nameAnalyzer0.process(node0, node1);
      assertEquals(2, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NameAnalyzer$SpecialReferenceNode");
      Node node1 = new Node(114, node0, node0, node0, node0, 47, 57);
      nameAnalyzer0.process(node1, node1);
      assertEquals(1, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.NameAnalyzer$SpecialReferenceNode");
      Node node1 = new Node(119, node0, node0, node0, node0, 47, 57);
      nameAnalyzer0.process(node0, node1);
      assertEquals(56, Node.CHANGE_TIME);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "er9=n^ESPA");
      Node node1 = new Node(108, node0, node0, node0, node0, 55, 8);
      nameAnalyzer0.process(node1, node1);
      assertEquals(46, Node.IS_NAMESPACE);
  }
}
