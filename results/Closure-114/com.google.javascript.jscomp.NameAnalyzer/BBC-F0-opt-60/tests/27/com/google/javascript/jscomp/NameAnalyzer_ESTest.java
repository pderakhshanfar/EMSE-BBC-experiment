/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 00:02:22 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.PreprocessorSymbolTable;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.text.ParseException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      Node node1 = Node.newString("Referenced Classes: ");
      node1.setType(1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      node0.addChildToFront(node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(110);
      Node node1 = Node.newString("{IAxLx|\"?WQ.f=C[");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      node0.addChildToFront(node1);
      nameAnalyzer0.process(node1, node0);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("window");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      Node node1 = Node.newString("msg.dup.label");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.getHtmlReport();
      node0.addChildToFront(node1);
      NameAnalyzer nameAnalyzer1 = new NameAnalyzer(compiler0, true);
      nameAnalyzer1.process(node0, node0);
      assertFalse(node0.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      boolean boolean0 = false;
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getTemplateTypeNames();
      Node node0 = new Node(86);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.removeUnreferenced();
      Node node0 = compiler0.parseTestCode("com.google.common.collect.ImmutableCollection");
      nameAnalyzer0.process(node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getTemplateTypeNames();
      jSDocInfo0.getAssociatedNode();
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable((Node) null);
      PreprocessorSymbolTable preprocessorSymbolTable1 = new PreprocessorSymbolTable((Node) null);
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable1, checkLevel0);
      processClosurePrimitives0.getExportedVariableNames();
      // Undeclared exception!
      try { 
        VariableMap.fromBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      SyntheticAst syntheticAst0 = new SyntheticAst("catch (");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isNew());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.removeUnreferenced();
      Node node0 = compiler0.parseTestCode("HOOK");
      nameAnalyzer0.process(node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getTemplateTypeNames();
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      PreprocessorSymbolTable preprocessorSymbolTable1 = new PreprocessorSymbolTable(node0);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable1, checkLevel0);
      processClosurePrimitives0.getExportedVariableNames();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      try { 
        VariableMap.fromBytes(byteArray0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Bad line: \uFFFD
         //
         verifyException("com.google.javascript.jscomp.VariableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      SyntheticAst syntheticAst0 = new SyntheticAst("catch (");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.removeUnreferenced();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      SyntheticAst syntheticAst0 = new SyntheticAst("catch (");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.removeUnreferenced();
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, false);
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.getHtmlReport();
      Node node0 = Node.newString(0, "<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 0</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 0</li>\n<li>Referenced Names: 0</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 0</li>\n</ul>ALL NAMES<ul>\n</ul></body></html>", 0, 0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.ensureDefaultPassConfig();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      compiler0.getPropertyMap();
      nameAnalyzer0.getHtmlReport();
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.getHtmlReport();
      Node node0 = null;
      // Undeclared exception!
      try { 
        nameAnalyzer0.process((Node) null, (Node) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      boolean boolean0 = true;
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.getHtmlReport();
      Node node0 = new Node((-1194));
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      node1.setVarArgs(true);
      nameAnalyzer0.process(node0, node1);
      // Undeclared exception!
      try { 
        exploitAssigns0.getCodingConvention();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }
}
