/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:45:01 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, true);
      nameAnalyzer0.removeUnreferenced();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("Y", "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      Node node1 = Node.newString(37, "QvW", 2, 46);
      Node node2 = new Node((-1842639469), node0, node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1842639469
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("com.google.avascript.jcomp.NameAnalyzer$FinDe,larationsAndSett2r");
      Node node1 = Node.newString(35, "UgVO;axW[mu", 86, 57);
      node0.addChildrenToFront(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscompNaeAnalyzer$FinDe,laratonsAndSett2rs", "com.google.javascript.jscompNaeAnalyzer$FinDe,laratonsAndSett2rs");
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isLocalResultCall());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("QvW", "window");
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isGetterDef());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("template", "template");
      Node node1 = Node.newString(114, "template", (-28), 651);
      node1.addChildrenToFront(node0);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isFalse());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.NameAnalyzer$FinDe,larationsAndSett2rs", "com.google.javascript.jscomp.NameAnalyzer$FinDe,larationsAndSett2rs");
      Node node1 = Node.newString(111, "com.google.javascript.jscomp.NameAnalyzer$FinDe,larationsAndSett2rs", 31, 37);
      node1.addChildrenToFront(node0);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isDec());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("gB1Ym", "gB1Ym");
      Node node1 = Node.newString(110, "gB1Ym", 4095, 38);
      node1.addChildrenToFront(node0);
      nameAnalyzer0.process(node1, node1);
      assertEquals(55, Node.INFERRED_FUNCTION);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("com.google.javascipt.jscomp.NameAnalyzer$FinDe,larationsAndSett2rs", "com.google.javascipt.jscomp.NameAnalyzer$FinDe,larationsAndSett2rs");
      Node node1 = Node.newString(119, "com.google.javascipt.jscomp.NameAnalyzer$FinDe,larationsAndSett2rs", 31, 37);
      node1.addChildrenToFront(node0);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isFor());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscompNaeAnalyzer$FinDe,laratonsAndSett2rs", "com.google.javascript.jscompNaeAnalyzer$FinDe,laratonsAndSett2rs");
      Node node1 = Node.newString(113, "com.google.javascript.jscompNaeAnalyzer$FinDe,laratonsAndSett2rs", 31, 37);
      node1.addChildrenToFront(node0);
      nameAnalyzer0.process(node1, node1);
      assertEquals(55, Node.INFERRED_FUNCTION);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("com.googlejavascript.jcomp.ClosureCodeRemoval$RemovaleAssignment", "com.googlejavascript.jcomp.ClosureCodeRemoval$RemovaleAssignment");
      Node node1 = Node.newString(108, "&bRKCv.e:QK}Lt:t", 1, 114);
      node1.addChildrenToFront(node0);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(2743, (-587), (-3800));
      Node node1 = new Node(49, node0, node0, node0, 15, 12);
      Node node2 = reorderConstantExpression0.optimizeSubtree(node1);
      nameAnalyzer0.process(node2, node2);
      assertFalse(node2.isCast());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.NameAnalyzer$FinDeclarationsAndSetters", "com.google.javascript.jscomp.NameAnalyzer$FinDeclarationsAndSetters");
      Node node1 = Node.newString(37, "com.google.javascript.jscomp.NameAnalyzer$FinDeclarationsAndSetters", 2, 46);
      node0.setType(4);
      node1.addChildrenToFront(node0);
      nameAnalyzer0.process(node0, node1);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString("_+j2*t1M4");
      Node node1 = Node.newString(118, "_+j2*t1M4", (-1636310184), 39);
      node1.addChildrenToFront(node0);
      nameAnalyzer0.process(node0, node1);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("=", "com.google.javascript.jscomp.NameAnalyzer$FinDeclarationsAndSetters");
      Node node1 = Node.newString(147, "FALSE", 8, 443);
      node0.addChildrenToFront(node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("2Wa>", "com.google.javascript.jscomp.NameAnalyzer$FinDeclarationsAndSetters");
      Node node1 = Node.newString(86, "com.google.javascript.jscomp.NameAnalyzer$FinDeclarationsAndSetters", (-1171), 37);
      node1.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newString("2Wa>");
      Node node1 = Node.newString(86, "com.google.javascript.jscomp.NameAnalyzer$FinDe,larationsAndSett2rs", 31, 37);
      node1.addChildrenToFront(node0);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("gB1Ym", "gB1Ym");
      Node node1 = Node.newString(118, "gB1Ym", 4095, 38);
      node1.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("com.google.javascipt.jscomp.NameAnalyzer$FinDe,larationsAndSett2rs", "com.google.javascipt.jscomp.NameAnalyzer$FinDe,larationsAndSett2rs");
      nameAnalyzer0.process(node0, node0);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }
}
