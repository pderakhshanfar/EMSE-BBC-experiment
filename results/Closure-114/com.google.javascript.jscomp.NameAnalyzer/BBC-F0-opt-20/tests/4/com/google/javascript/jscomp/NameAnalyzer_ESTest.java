/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 18:16:34 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.Iterator;
import java.util.List;
import java.util.PriorityQueue;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newString(148, "ALEy3ar");
      Node node1 = new Node(148, node0, node0);
      NameAnalyzer nameAnalyzer1 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer1.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("0o");
      Node node1 = new Node(148, node0, node0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node2 = new Node((-1603), node1, 54, 30);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1603
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Logger.getGlobal();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("var __allocStats; \nvar __alloc = function(obj, sourcePosition, id, typeName) { \n  if (!__allocStats) { \n    __allocStats = { \n      reset: function() { \n        ths.counts = [{ type:typeName, line:'total', count:0 }]; \n      }, \n      report: function(opt_n) { \n        this.counts.filter(function(x) { \n          return x; \n        }).sort(function(a, b) { \n          return b.count - a.count; \n        }).splice(0, opt_n || 50).reverse().forEach(function (x) { \n          if (window.console) { \n            window.console.log(x.count + ' (' + x.type + ') : ' + x.line); \n          } \n        }); \n      } \n    }; \n    __allocStats.reset(); \n    if (window.parent) { \n      window.parent['__allocStats'] = __allocStats; \n    } \n  } \n  if (!__allocStats.counts[id]) { \n    __allocStats.counts[id] = { type:typeName, line:sourcePosition, count:0 }; \n  } \n  __allocStats.counts[0].count++; \n  __allocStats.counts[id].count++; \n  return obj;\n}; \n");
      Node node1 = compiler0.parseSyntheticCode("var __allocStats; \nvar __alloc = function(obj, sourcePosition, id, typeName) { \n  if (!__allocStats) { \n    __allocStats = { \n      reset: function() { \n        ths.counts = [{ type:typeName, line:'total', count:0 }]; \n      }, \n      report: function(opt_n) { \n        this.counts.filter(function(x) { \n          return x; \n        }).sort(function(a, b) { \n          return b.count - a.count; \n        }).splice(0, opt_n || 50).reverse().forEach(function (x) { \n          if (window.console) { \n            window.console.log(x.count + ' (' + x.type + ') : ' + x.line); \n          } \n        }); \n      } \n    }; \n    __allocStats.reset(); \n    if (window.parent) { \n      window.parent['__allocStats'] = __allocStats; \n    } \n  } \n  if (!__allocStats.counts[id]) { \n    __allocStats.counts[id] = { type:typeName, line:sourcePosition, count:0 }; \n  } \n  __allocStats.counts[0].count++; \n  __allocStats.counts[id].count++; \n  return obj;\n}; \n", "windowwindow");
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
      Node node3 = new Node(114, node2, node1, node1, node0, 2, (-14));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node4 = AbstractPeepholeOptimization.validateResult(node1);
      nameAnalyzer0.process(node4, node3);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseTestCode("D.u(|3'K");
      NameAnalyzer nameAnalyzer1 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(119, node0);
      Node node2 = new Node(50, node1, node1);
      nameAnalyzer1.process(node2, node2);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("var __allocStats; \nvar __alloc = function(obj, sourcePosition, id, typeName) { \n  if (!__allocStats) { \n    __allocStats = { \n      reset: function() { \n        ths.counts = [{ type:typeName, line:'total', count:0 }]; \n      }, \n      report: function(opt_n) { \n        this.counts.filter(function(x) { \n          return x; \n        }).sort(function(a, b) { \n          return b.count - a.count; \n        }).splice(0, opt_n || 50).reverse().forEach(function (x) { \n          if (window.console) { \n            window.console.log(x.count + ' (' + x.type + ') : ' + x.line); \n          } \n        }); \n      } \n    }; \n    __allocStats.reset(); \n    if (window.parent) { \n      window.parent['__allocStats'] = __allocStats; \n    } \n  } \n  if (!__allocStats.counts[id]) { \n    __allocStats.counts[id] = { type:typeName, line:sourcePosition, count:0 }; \n  } \n  __allocStats.counts[0].count++; \n  __allocStats.counts[id].count++; \n  return obj;\n}; \n");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.getHtmlReport();
      nameAnalyzer0.process(node0, node0);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("b#&//]5y@]Q=1KPXc", "windowwindow.console");
      Node node1 = new Node(114, node0, node0);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isCatch());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newString("var __allocStats; \nvar __alloc = function(obj, sourcePosition, id, typeName) { \n  if (!__allocStats) { \n    __allocStats = { \n      reset: function() { \n        this.counts = [{ type:typeName, line:'total', count:0 }]; \n      }, \n      report: function(opt_n) { \n        this.counts.filter(function(x) { \n          return x; \n        }).sort(function(a, b) { \n          return b.count - a.count; \n        }).splice(0, opt_n || 50).reverse().forEach(function (x) { \n          if (window.console) { \n            window.console.log(x.count + ' (' + x.type + ') : ' + x.line); \n          } \n        }); \n      } \n    }; \n    __allocStats.reset(); \n    if (window.parent) { \n      window.parent['__allocStats'] = __allocStats; \n    } \n  } \n  if (!__allocStats.counts[id]) { \n    __allocStats.counts[id] = { type:typeName, line:sourcePosition, count:0 }; \n  } \n  __allocStats.counts[0].count++; \n  __allocStats.counts[id].count++; \n  return obj;\n}; \n");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.removeUnreferenced();
      Node node1 = new Node(148, node0, node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("B=N,I-HP*wXJ8d8v9");
      loggerErrorManager0.printSummary();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.removeUnreferenced();
      NameAnalyzer nameAnalyzer1 = new NameAnalyzer(compiler0, true);
      nameAnalyzer1.process(node0, node0);
      nameAnalyzer0.process(node0, node0);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("NXZ@@%n<P]PZ", "g,jNwGhP=GfIXV");
      Node node1 = new Node((-1061), node0, node0);
      nameAnalyzer0.process(node1, node0);
      assertFalse(node0.isDo());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("i=fdow", "i=fdow");
      nameAnalyzer0.process(node0, node0);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("var __allocStats; \nvar __alloc = function(obj, sourcePosition, id, typeName) { \n  if (!__allocStats) { \n    __allocStats = { \n      reset: function() { \n        this.counts = [{ type:typeName, line:'total', count:0 }]; \n      }, \n      report: function(opt_n) { \n        this.counts.filter(function(x) { \n          return x; \n        }).sort(function(a, b) { \n          return b.count - a.count; \n        }).splice(0, opt_n || 50).reverse().forEach(function (x) { \n          if (window.console) { \n            window.console.log(x.count + ' (' + x.type + ') : ' + x.line); \n          } \n        }); \n      } \n    }; \n    __allocStats.reset(); \n    if (window.parent) { \n      window.parent['__allocStats'] = __allocStats; \n    } \n  } \n  if (!__allocStats.counts[id]) { \n    __allocStats.counts[id] = { type:typeName, line:sourcePosition, count:0 }; \n  } \n  __allocStats.counts[0].count++; \n  __allocStats.counts[id].count++; \n  return obj;\n}; \n");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.removeUnreferenced();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.getHtmlReport();
      Node node0 = Node.newString("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 0</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 0</li>\n<li>Referenced Names: 0</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 0</li>\n</ul>ALL NAMES<ul>\n</ul></body></html>");
      Node node1 = new Node(49, node0, node0);
      nameAnalyzer0.process(node1, node1);
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseTestCode("var __allocStats; \nvar __alloc = function(obj, sourcePosition, id, typeName) { \n  if (!__allocStats) { \n    __allocStats = { \n      reset: function() { \n        this.counts = [{ type:typeName, line:'total', count:0 }]; \n      }, \n      report: function(opt_n) { \n        this.counts.filter(function(x) { \n          return x; \n        }).sort(function(a, b) { \n          return b.count - a.count; \n        }).splice(0, opt_n || 50).reverse().forEach(function (x) { \n          if (window.console) { \n            window.console.log(x.count + ' (' + x.type + ') : ' + x.line); \n          } \n        }); \n      } \n    }; \n    __allocStats.reset(); \n    if (window.parent) { \n      window.parent['__allocStats'] = __allocStats; \n    } \n  } \n  if (!__allocStats.counts[id]) { \n    __allocStats.counts[id] = { type:typeName, line:sourcePosition, count:0 }; \n  } \n  __allocStats.counts[0].count++; \n  __allocStats.counts[id].count++; \n  return obj;\n}; \n");
      Node node1 = Normalize.parseAndNormalizeSyntheticCode(compiler0, ",F?sH-R(hmA+;/", "");
      nameAnalyzer0.process(node1, node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      String string0 = nameAnalyzer0.getHtmlReport();
      Node node0 = compiler0.parseTestCode("var __allocStats; \nvar __alloc = function(obj, sourcePosition, id, typeName) { \n  if (!__allocStats) { \n    __allocStats = { \n      reset: function() { \n        this.counts = [{ type:typeName, line:'total', count:0 }]; \n      }, \n      report: function(opt_n) { \n        this.counts.filter(function(x) { \n          return x; \n        }).sort(function(a, b) { \n          return b.count - a.count; \n        }).splice(0, opt_n || 50).reverse().forEach(function (x) { \n          if (window.console) { \n            window.console.log(x.count + ' (' + x.type + ') : ' + x.line); \n          } \n        }); \n      } \n    }; \n    __allocStats.reset(); \n    if (window.parent) { \n      window.parent['__allocStats'] = __allocStats; \n    } \n  } \n  if (!__allocStats.counts[id]) { \n    __allocStats.counts[id] = { type:typeName, line:sourcePosition, count:0 }; \n  } \n  __allocStats.counts[0].count++; \n  __allocStats.counts[id].count++; \n  return obj;\n}; \n");
      nameAnalyzer0.process(node0, node0);
      String string1 = nameAnalyzer0.getHtmlReport();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "var __allocStats; \nvar __alloc = function(obj, sourcePosition, id, typeName) { \n  if (!__allocStats) { \n    __allocStats = { \n      reset: function() { \n        this.counts = [{ type:typeName, line:'total', count:0 }]; \n      }, \n      report: function(opt_n) { \n        this.counts.filter(function(x) { \n          return x; \n        }).sort(function(a, b) { \n          return b.count - a.count; \n        }).splice(0, opt_n || 50).reverse().forEach(function (x) { \n          if (window.console) { \n            window.console.log(x.count + ' (' + x.type + ') : ' + x.line); \n          } \n        }); \n      } \n    }; \n    __allocStats.reset(); \n    if (window.parent) { \n      window.parent['__allocStats'] = __allocStats; \n    } \n  } \n  if (!__allocStats.counts[id]) { \n    __allocStats.counts[id] = { type:typeName, line:sourcePosition, count:0 }; \n  } \n  __allocStats.counts[0].count++; \n  __allocStats.counts[id].count++; \n  return obj;\n}; \n");
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseTestCode("var __allocStats; \nvar __alloc = function(obj, sourcePosition, id, typeName) { \n  if (!__allocStats) { \n    __allocStats = { \n      reset: function() { \n        this.counts = [{ type:typeName, line:'total', count:0 }]; \n      }, \n      report: function(opt_n) { \n        this.counts.filter(function(x) { \n          return x; \n        }).sort(function(a, b) { \n          return b.count - a.count; \n        }).splice(0, opt_n || 50).reverse().forEach(function (x) { \n          if (window.console) { \n            window.console.log(x.count + ' (' + x.type + ') : ' + x.line); \n          } \n        }); \n      } \n    }; \n    __allocStats.reset(); \n    if (window.parent) { \n      window.parent['__allocStats'] = __allocStats; \n    } \n  } \n  if (!__allocStats.counts[id]) { \n    __allocStats.counts[id] = { type:typeName, line:sourcePosition, count:0 }; \n  } \n  __allocStats.counts[0].count++; \n  __allocStats.counts[id].count++; \n  return obj;\n}; \n");
      Node node1 = new Node(39, node0, node0);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isContinue());
      
      String string0 = nameAnalyzer0.getHtmlReport();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Logger.getGlobal();
      Compiler compiler0 = new Compiler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JKxG7(okX7{oku-!v#xK");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("H", "FALSE");
      Node node1 = new Node(113, node0, node0);
      nameAnalyzer0.process(node1, node1);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Logger.getGlobal();
      Compiler compiler0 = new Compiler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JxG7(okX7{oku-!v#xK");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("H", "FALSE");
      Node node1 = new Node(118, node0, node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.getHtmlReport();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString((-1437596712), "m?1\"~;^:>kM4@XC(2H");
      Node node1 = compiler0.parseSyntheticCode("YF nB0", "windowwindow");
      Node node2 = new Node(37, node0, node1, node0, node0, 4, 489);
      nameAnalyzer0.getHtmlReport();
      nameAnalyzer0.process(node1, node2);
      assertEquals(36, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.getHtmlReport();
      Node node0 = Node.newString((-1437596712), "m?1\"~;^:>kM4@XC(2H");
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      Node node1 = compiler1.parseSyntheticCode("YF nB0", "windowwindow");
      Node node2 = new Node(37, node0, node1, node0, node0, 4, 489);
      nameAnalyzer0.process(node2, node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.getHtmlReport();
      Node.newString(38, "");
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.NameAnalyzer$InstanceOfCheckNode", "window");
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.getHtmlReport();
      System.setCurrentTimeMillis(36);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.getHtmlReport();
      Node.newString(38, "");
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      Node node0 = compiler1.parseSyntheticCode("com.google.javascript.jscomp.NameAnalyzer$InstanceOfCheckNode", "window");
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      Iterator<JSType> iterator0 = priorityQueue0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(4, node0, node0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node1);
      nameAnalyzer0.process(node0, node1);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.removeUnreferenced();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Iterator<UnknownType> iterator0 = (Iterator<UnknownType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(47, node0, node0);
      nameAnalyzer0.process(node0, node1);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.removeUnreferenced();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      Iterator<JSType> iterator0 = priorityQueue0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(1, node0, node0);
      nameAnalyzer0.process(node0, node1);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.getHtmlReport();
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      compiler0.setState(compiler_IntermediateState0);
      nameAnalyzer0.removeUnreferenced();
      Node node0 = null;
      nameAnalyzer0.getHtmlReport();
      // Undeclared exception!
      try { 
        nameAnalyzer0.process((Node) null, (Node) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.getHtmlReport();
      Node node0 = Node.newString(1377, "<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 0</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 0</li>\n<li>Referenced Names: 0</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 0</li>\n</ul>ALL NAMES<ul>\n</ul></body></html>");
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      Node node1 = compiler1.parseSyntheticCode("com.google.javascript.jscomp.NameAnalyzer$InstanceOfCheckNode", "com.google.javascript.jscomp.NameAnalyzer$InstanceOfCheckNode");
      nameAnalyzer0.process(node0, node1);
      assertEquals(0, node1.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      Iterator<JSType> iterator0 = priorityQueue0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(1, node0, node0);
      nameAnalyzer0.process(node1, node0);
      assertFalse(node1.isVar());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "var __allocStats; \nvar __alloc = function(obj, sourcePosition, id, typeName) { \n  if (!__allocStats) { \n    __allocStats = { \n      reset: function() { \n        this.counts = [{ type:typeName, line:'total', count:0 }]; \n      }, \n      report: function(opt_n) { \n        this.counts.filter(function(x) { \n          return x; \n        }).sort(function(a, b) { \n          return b.count - a.count; \n        }).splice(0, opt_n || 50).reverse().forEach(function (x) { \n          if (window.console) { \n            window.console.log(x.count + ' (' + x.type + ') : ' + x.line); \n          } \n        }); \n      } \n    }; \n    __allocStats.reset(); \n    if (window.parent) { \n      window.parent['__allocStats'] = __allocStats; \n    } \n  } \n  if (!__allocStats.counts[id]) { \n    __allocStats.counts[id] = { type:typeName, line:sourcePosition, count:0 }; \n  } \n  __allocStats.counts[0].count++; \n  __allocStats.counts[id].count++; \n  return obj;\n}; \n");
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseTestCode("var __allocStats; \nvar __alloc = function(obj, sourcePosition, id, typeName) { \n  if (!__allocStats) { \n    __allocStats = { \n      reset: function() { \n        this.counts = [{ type:typeName, line:'total', count:0 }]; \n      }, \n      report: function(opt_n) { \n        this.counts.filter(function(x) { \n          return x; \n        }).sort(function(a, b) { \n          return b.count - a.count; \n        }).splice(0, opt_n || 50).reverse().forEach(function (x) { \n          if (window.console) { \n            window.console.log(x.count + ' (' + x.type + ') : ' + x.line); \n          } \n        }); \n      } \n    }; \n    __allocStats.reset(); \n    if (window.parent) { \n      window.parent['__allocStats'] = __allocStats; \n    } \n  } \n  if (!__allocStats.counts[id]) { \n    __allocStats.counts[id] = { type:typeName, line:sourcePosition, count:0 }; \n  } \n  __allocStats.counts[0].count++; \n  __allocStats.counts[id].count++; \n  return obj;\n}; \n");
      Node node1 = new Node(39, node0, node0);
      nameAnalyzer0.process(node0, node1);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.getHtmlReport();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      Iterator<JSType> iterator0 = priorityQueue0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(39, node0, node0);
      nameAnalyzer0.process(node1, node0);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isBlock());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "var __allocStats; \nvar __alloc = function(obj, sourcePosition, id, typeName) { \n  if (!__allocStats) { \n    __allocStats = { \n      reset: function() { \n        this.counts = [{ type:typeName, line:'total', count:0 }]; \n      }, \n      report: function(opt_n) { \n        this.counts.filter(function(x) { \n          return x; \n        }).sort(function(a, b) { \n          return b.count - a.count; \n        }).splice(0, opt_n || 50).reverse().forEach(function (x) { \n          if (window.console) { \n            window.console.log(x.count + ' (' + x.type + ') : ' + x.line); \n          } \n        }); \n      } \n    }; \n    __allocStats.reset(); \n    if (window.parent) { \n      window.parent['__allocStats'] = __allocStats; \n    } \n  } \n  if (!__allocStats.counts[id]) { \n    __allocStats.counts[id] = { type:typeName, line:sourcePosition, count:0 }; \n  } \n  __allocStats.counts[0].count++; \n  __allocStats.counts[id].count++; \n  return obj;\n}; \n");
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseTestCode("var __allocStats; \nvar __alloc = function(obj, sourcePosition, id, typeName) { \n  if (!__allocStats) { \n    __allocStats = { \n      reset: function() { \n        this.counts = [{ type:typeName, line:'total', count:0 }]; \n      }, \n      report: function(opt_n) { \n        this.counts.filter(function(x) { \n          return x; \n        }).sort(function(a, b) { \n          return b.count - a.count; \n        }).splice(0, opt_n || 50).reverse().forEach(function (x) { \n          if (window.console) { \n            window.console.log(x.count + ' (' + x.type + ') : ' + x.line); \n          } \n        }); \n      } \n    }; \n    __allocStats.reset(); \n    if (window.parent) { \n      window.parent['__allocStats'] = __allocStats; \n    } \n  } \n  if (!__allocStats.counts[id]) { \n    __allocStats.counts[id] = { type:typeName, line:sourcePosition, count:0 }; \n  } \n  __allocStats.counts[0].count++; \n  __allocStats.counts[id].count++; \n  return obj;\n}; \n");
      Node node1 = new Node((-1451265546), node0, node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //   Node(NAME __allocStats): [testcode]:1:4
         // var __allocStats; 
         //   Parent(VAR): [testcode]:1:0
         // var __allocStats; 
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.removeUnreferenced();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Iterator<UnknownType> iterator0 = (Iterator<UnknownType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(66, node0, node0);
      nameAnalyzer0.process(node1, node0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, true);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      nameAnalyzer0.getHtmlReport();
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      NameAnalyzer nameAnalyzer1 = new NameAnalyzer(compiler0, false);
      nameAnalyzer1.removeUnreferenced();
      nameAnalyzer1.removeUnreferenced();
      nameAnalyzer1.removeUnreferenced();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      Iterator<JSType> iterator0 = priorityQueue0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node((-1489), node0, node0);
      nameAnalyzer1.process(node1, node0);
      assertFalse(node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, true);
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.getHtmlReport();
      // Undeclared exception!
      try { 
        nameAnalyzer0.process((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = true;
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, true);
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.getHtmlReport();
      nameAnalyzer0.getHtmlReport();
      nameAnalyzer0.getHtmlReport();
      nameAnalyzer0.getHtmlReport();
      nameAnalyzer0.removeUnreferenced();
      nameAnalyzer0.getHtmlReport();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage1("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 0</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 0</li>\n<li>Referenced Names: 0</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 0</li>\n</ul>ALL NAMES<ul>\n</ul></body></html>", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property <html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 0</li>
         // <li>Total Classes: 0</li>
         // <li>Total Static Functions: 0</li>
         // <li>Referenced Names: 0</li>
         // <li>Referenced Classes: 0</li>
         // <li>Referenced Functions: 0</li>
         // </ul>ALL NAMES<ul>
         // </ul></body></html>
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, (Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      loggerErrorManager0.getErrors();
      LightweightMessageFormatter.withoutSource();
      loggerErrorManager0.getWarnings();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newString(92, "~l;MXSTjb?su`*W'-");
      // Undeclared exception!
      try { 
        compiler0.areNodesEqualForInlining(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }
}
