/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 23:40:14 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, false);
      Node node0 = new Node((-3458), (-3458), (-1614347055));
      Node node1 = compiler0.parseSyntheticCode("</li>", "TRUE");
      node1.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, (Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3458
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(86, 2423, (-3458));
      Node node1 = compiler0.parseSyntheticCode("</li>", "TRUE");
      node0.addChildrenToBack(node1);
      Node node2 = new Node(0, node0, node0, node0, node0, (-7), 30);
      nameAnalyzer0.process(node2, node0);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isBlock());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(2423, 0, 2423);
      Node node1 = compiler0.parseSyntheticCode("TRUE", "window");
      nameAnalyzer0.process(node0, node1);
      assertFalse(node0.isExprResult());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(2423, 0, 2423);
      Node node1 = new Node(114, node0, node0, node0, node0, 38, 4095);
      nameAnalyzer0.process(node1, node1);
      assertEquals(43, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node((-1029));
      SyntheticAst syntheticAst0 = new SyntheticAst("dM\"");
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(119, node0, node1, node1, node1, 57, 38);
      nameAnalyzer0.process(node1, node2);
      assertFalse(node2.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(2451);
      Node node1 = new Node(111, node0, node0, node0, node0, 38, 4095);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node0.isExprResult());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(2451);
      Node node1 = new Node(110, node0, node0, node0, node0, 38, 4095);
      nameAnalyzer0.process(node0, node1);
      assertTrue(node0.mayMutateGlobalStateOrThrow());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(113, 2423, (-3458));
      Node node1 = compiler0.parseSyntheticCode("</li>", "TRUE");
      node0.addChildrenToBack(node1);
      nameAnalyzer0.process(node0, node0);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(108, 2423, (-3458));
      Node node1 = compiler0.parseSyntheticCode("</li>", "TRUE");
      node0.addChildrenToBack(node1);
      nameAnalyzer0.process(node0, node0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(2648, 2648, 2648);
      Node node1 = new Node(49, node0, node0, node0, node0, 4095, 12);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isVoid());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(115, 6, (-276));
      Node node1 = new Node(53, node0, node0, node0, node0, 2178, 57);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(0);
      Node node1 = new Node(118, node0, node0, node0, node0, 38, 4095);
      nameAnalyzer0.process(node1, node1);
      assertTrue(node1.isVar());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(2401, (-913), 64);
      Node node1 = compiler0.parseSyntheticCode("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 0</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 0</li>\n<li>Referenced Names: 0</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 0</li>\n</ul>ALL NAMES<ul>\n</ul></body></html>", "com.google.javascript.rhino.head.BaseFunction");
      nameAnalyzer0.process(node0, node1);
      assertFalse(node0.isFunction());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node((-44), 2423, (-3458));
      Node node1 = compiler0.parseSyntheticCode("</li>", "TRUE");
      Node node2 = new Node(37, node1, node0, node0, node1, (-1166996837), 100);
      nameAnalyzer0.process(node1, node2);
      assertFalse(node1.isFalse());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(154);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86, 2392, 2392);
      Node node1 = new Node(32);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(42, node0, node0, 4095, 2);
      node2.setType(100);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86, 2395, 2395);
      Node node1 = new Node(32);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(42, node0, node0, 4095, 2);
      node2.setType(98);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node1, node2);
      assertEquals(0, node1.getLength());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86, 2394, 2394);
      Node node1 = new Node(32);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(38, node0, node0, 50, 68);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86, 2423, 2423);
      Node node1 = Node.newNumber(0.0);
      node0.addChildrenToBack(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node0);
      assertFalse(node1.isNot());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(38);
      Node node1 = new Node(118, node0, node0, node0, node0, 38, 4095);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      Node node0 = new Node(86, 2423, 2423);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("</li>");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(86, 2423, (-3458));
      Node node1 = compiler0.parseSyntheticCode("</li>", "TRUE");
      node0.addChildrenToBack(node1);
      Node node2 = new Node(0, node0, node0, node0, node0, (-7), 30);
      nameAnalyzer0.process(node2, node0);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }
}
