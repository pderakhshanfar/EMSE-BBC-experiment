/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 23:48:33 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import java.io.File;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = MockFile.createTempFile("i^&%]Mv", "i^&%]Mv", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = new Node((-3193));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.process(node0, node0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.google.javascript.jscomp.NameAnalyzer$FindReferences");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.removeUnreferenced();
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NameAnalyzer$FindReferences");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: ngInject=NOT_IMPLEMENTED and ngInject=NG_INJECT
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = new Node(70);
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(114, node0, node0, node0, node0, 1, 38);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isAssignAdd());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = new Node(96, 96, 96);
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(111, node0, node0, node0, node0, 1, 56);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isRegExp());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(110, node0, node0, node0, node0, 125, 39);
      nameAnalyzer0.process(node1, node1);
      assertEquals(54, Node.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = new Node(70);
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(113, node0, node0, node0, node0, 132, 108);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node0.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = new Node(99);
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(108, node0, node0, node0, node0, 32, 1);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isGetProp());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = new Node(70);
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(49, node0, node0, node0, node0, 1, (-1473651288));
      nameAnalyzer0.process(node0, node1);
      assertEquals(70, node0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("X{$");
      Node node0 = new Node(70);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(4, node0, node0, node0, node0, 12, 2334);
      nameAnalyzer0.process(node1, node1);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node((-1617942590), node0, node0, node0, node0, 86, 1130);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = new Node(2048, 2048, 2048);
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(118, node0, node0, node0, node0, 53, 2);
      nameAnalyzer0.process(node0, node1);
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = new Node(68, 68, 68);
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.init((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(37, node0, node0, node0, node0, 52, 49);
      nameAnalyzer0.process(node1, node1);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = new Node((-1722377090));
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(154, node0, node0, node0, node0, 111, 40);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      SyntheticAst syntheticAst0 = new SyntheticAst("%]M");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      Node node1 = new Node(86, node0, node0, node0, node0, 102, 4095);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString("%]6", 86, 86);
      Node node1 = new Node(86, node0, node0, node0, node0, 42, 4095);
      nameAnalyzer0.process(node1, node1);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = new Node(2048, 2048, 2048);
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(53, 1, 39);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(118, node0, node0, node0, node0, 53, 2);
      nameAnalyzer0.process(node0, node2);
      assertFalse(node0.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "k[extern]");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: ngInject=NOT_IMPLEMENTED and ngInject=NG_INJECT
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.google.javascript.jscomp.NameAnalyzer$FindReferences");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.removeUnreferenced();
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "window");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: ngInject=NOT_IMPLEMENTED and ngInject=NG_INJECT
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }
}
