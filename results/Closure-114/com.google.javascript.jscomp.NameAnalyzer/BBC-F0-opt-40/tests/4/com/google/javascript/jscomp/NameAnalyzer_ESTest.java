/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 10:55:19 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.rhino.Node;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(42);
      Node node1 = new Node(115, node0, 12, 40);
      Node node2 = new Node(42, node1, 42, 2242);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(47);
      Node node1 = new Node(86, node0, 12, 40);
      Node node2 = new Node(86, node1, 19, 57);
      Node node3 = new Node(55, node2, (-3078), 1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node3);
      assertFalse(node1.isFalse());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(42);
      Node node1 = new Node(86, node0, 12, 40);
      Node node2 = new Node(55, node1, 29, 54);
      nameAnalyzer0.process(node0, node2);
      // Undeclared exception!
      try { 
        nameAnalyzer0.removeUnreferenced();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(42);
      Node node1 = new Node(86, node0, 12, 40);
      Node node2 = new Node(108, node1, node1, node1, 40, 97);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(42);
      Node node1 = new Node(86, node0, 12, 40);
      Node node2 = new Node(87, node1, 4095, (-1314));
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(35);
      Node node1 = new Node(86, node0, (-1793987081), 40);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(42);
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isInc());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("_KAuQ<5(WO1w'1", "com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences");
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isCall());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(2);
      Node node1 = new Node(114, node0, 2092, (-19));
      nameAnalyzer0.process(node1, node1);
      assertEquals(57, Node.REFLECTED_OBJECT);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(67, 67, 67);
      MockFile mockFile0 = new MockFile("o", "o");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      Node node1 = compiler0.parse(sourceFile0);
      Node node2 = new Node(37, node1, node1, node0, 8, 0);
      node2.setType(113);
      nameAnalyzer0.process(node0, node2);
      assertFalse(node0.isContinue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(42);
      Node node1 = new Node(111, node0, (-1793987072), 40);
      nameAnalyzer0.process(node0, node1);
      assertEquals(0, node1.getChangeTime());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node((-299));
      Node node1 = new Node(110, node0, (-51), 4095);
      nameAnalyzer0.process(node1, node1);
      assertEquals(39, Node.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node((-20));
      Node node1 = new Node(119, node0, 31, 38);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isLocalResultCall());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(45);
      Node node1 = new Node(108, node0, 929, 43);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(51);
      Node node1 = new Node(86, node0, 12, 40);
      Node node2 = new Node(49, node1, node1, node1, node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node2);
      assertFalse(node2.isCase());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node((-1616515863));
      Node node1 = new Node(118, node0, 301, 37);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isCase());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.NameAnalyzer$JsName");
      Node node1 = new Node(118, node0, 1433, (-104821513));
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // EXPR_RESULT nodes are not supported.
         //   Node(EXPR_RESULT): [testcode]:1:0
         // com.google.javascript.jscomp.NameAnalyzer$JsName
         //   Parent(SCRIPT): [testcode]:1:0
         // com.google.javascript.jscomp.NameAnalyzer$JsName
         // 
         //   Node(SCRIPT): [testcode]:1:0
         // com.google.javascript.jscomp.NameAnalyzer$JsName
         //   Parent(VAR): [source unknown]
         //
         verifyException("com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.removeUnreferenced();
      Node node0 = new Node(42, 42, (-1983));
      nameAnalyzer0.removeUnreferenced();
      Node node1 = compiler0.parseSyntheticCode("com.google.common.collect.FilteredKeyMultimap", "AVUJN7-_");
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isInc());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(65);
      MockFile mockFile0 = new MockFile("R,.C4");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      Node node1 = compiler0.parse(sourceFile0);
      Node node2 = new Node(37, node1, node1, node0, 125, (-1109460072));
      nameAnalyzer0.process(node1, node2);
      assertFalse(node2.isIn());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(154);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(28);
      Node node1 = new Node(86, node0, 12, 40);
      Node node2 = Node.newString("__noSuchMethod__", 4095, 2);
      StatementFusion.fuseExpressionIntoExpression(node2, node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-1789859325));
      Node node1 = new Node(86, node0, 43, (-1789859325));
      MockFile mockFile0 = new MockFile("'MrZX|VWZ#>B^N", "){eTz*");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      Node node2 = compiler0.parse(sourceFile0);
      Node node3 = new Node(86, node1, node2, node2, 0, (-1915));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(42);
      Node node1 = new Node(86, node0, 12, 40);
      Node node2 = new Node(101, node1, 844, 38);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(42);
      Node node1 = new Node(86, node0, 12, 40);
      MockFile mockFile0 = new MockFile("j7Nx.?,?CAY3M7a", "j7Nx.?,?CAY3M7a");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      Node node2 = compiler0.parse(sourceFile0);
      Node node3 = new Node(100, node1, node2, node1, 40, 97);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node3, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(42);
      Node node1 = new Node(86, node0, 12, 40);
      Node node2 = new Node(98, node1, 341, 1134);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node((-368215219));
      Node node1 = new Node(86, node0, 43, (-1790930594));
      Node node2 = new Node(38, node1, 48, 4095);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newNumber((-2348.87), 42, 85);
      Node node1 = new Node(86, node0, (-1793987081), (-1790930594));
      nameAnalyzer0.process(node0, node1);
      assertEquals(43, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node((-1364));
      Node node1 = new Node(38, node0, 1, 42);
      Node node2 = new Node(118, node1, 15, (-1745));
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(42);
      Node node1 = new Node(86, node0, 12, 40);
      Node node2 = new Node(130, node1, 4095, (-1314));
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(42);
      Node node1 = new Node(86, node0, 12, 40);
      Node node2 = new Node(31, node1, node1, node1, (-61), 0);
      nameAnalyzer0.process(node1, node2);
      assertEquals(0, node1.getChildCount());
      
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 3</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 3</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"\"></a><ul></li></ul></li><li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(42);
      Node node1 = new Node(86, node0, 12, 40);
      Node node2 = new Node(4, node1, (-11), (-1723037429));
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(42);
      Node node1 = new Node(86, node0, 12, 40);
      Node node2 = new Node(115, node1, 170, 46);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.NameAnalyzer$ProcessExternals", "window");
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isDelProp());
  }
}
