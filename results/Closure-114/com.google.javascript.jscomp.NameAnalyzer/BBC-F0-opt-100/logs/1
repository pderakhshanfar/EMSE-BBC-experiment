* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-100
* Going to generate test cases for class: com.google.javascript.jscomp.NameAnalyzer
* Starting Client-0
* Connecting to master process on port 21023
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-114/build/classes
  - subjects/buggy-versions/Closure-114/lib/args4j.jar
  - subjects/buggy-versions/Closure-114/lib/guava.jar
  - subjects/buggy-versions/Closure-114/lib/json.jar
  - subjects/buggy-versions/Closure-114/lib/jsr305.jar
  - subjects/buggy-versions/Closure-114/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-114/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-114/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.NameAnalyzer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2352
* Using seed 2437217253
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 531 / 2352
[MASTER] 10:42:56.319 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 10:42:56.319 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 10:42:58.648 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
[MASTER] 10:45:13.975 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 601s and 549 generations, 221178 statements, best individual has fitness: 1568.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 37%
* Total number of goals: 685
* Number of covered goals: 253
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 31%
* Total number of goals: 561
* Number of covered goals: 172
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 37%
* Total number of goals: 506
* Number of covered goals: 185
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 3
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 22%
* Total number of goals: 18
* Number of covered goals: 4
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 22%
* Total number of goals: 18
* Number of covered goals: 4
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 31%
* Total number of goals: 561
* Number of covered goals: 172
* Generated 20 tests with total length 107
* Resulting test suite's coverage: 33% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 10:52:54.975 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:53:17.772 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test14 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: ngInject=NOT_IMPLEMENTED and ngInject=NG_INJECT
[MASTER] 10:53:17.773 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = new Node(85, 1, (-3285));
Compiler compiler1 = new Compiler();
NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler1, true);
SourceFile sourceFile0 = SourceFile.fromCode("com.google.common.collect.DenseImmutableTable$ColumnMap", "com.google.common.collect.DenseImmutableTable$ColumnMap", "goog.object.create");
JsAst jsAst0 = new JsAst(sourceFile0);
Node node1 = jsAst0.getAstRoot(compiler0);
nameAnalyzer0.process(node0, node1);
assertEquals(29, Node.JSDOC_INFO_PROP);


[MASTER] 10:53:17.773 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test02 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
[MASTER] 10:53:17.773 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("indin/_", "OB", "ied7;w$=N,Z1daTxIB");
JsAst jsAst0 = new JsAst(sourceFile0);
Node node0 = jsAst0.getAstRoot(compiler0);
NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
nameAnalyzer0.process(node0, node0);
assertFalse(node0.isSetterDef());


[MASTER] 10:53:17.773 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test15 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: ngInject=NOT_IMPLEMENTED and ngInject=NG_INJECT
[MASTER] 10:53:17.773 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
Node node0 = new Node(115);
Node node1 = compiler0.parseTestCode("Referenced Classes: ");
Node node2 = new Node(54, node1, node0, node0, node0);
nameAnalyzer0.process(node2, node2);

[MASTER] 10:53:17.773 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test17 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: enum=NOT_IMPLEMENTED and enum=ENUM
[MASTER] 10:53:19.072 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test03 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: ngInject=NOT_IMPLEMENTED and ngInject=NG_INJECT
[MASTER] 10:53:19.072 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = new Node((-3285), (-3285), 64);
Compiler compiler1 = new Compiler();
NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.NameAnalyzer$PrototypeSetNode", "~va8Ue~bY$", "window");
JsAst jsAst0 = new JsAst(sourceFile0);
Node node1 = jsAst0.getAstRoot(compiler0);
nameAnalyzer0.process(node0, node1);
assertEquals(51, Node.STATIC_SOURCE_FILE);


* Writing tests to file
* Writing JUnit test case 'NameAnalyzer_ESTest' to results/Closure-114/com.google.javascript.jscomp.NameAnalyzer/BBC-F0-opt-100/tests/1
* Done!

* Computation finished
