/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 10:55:16 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((-2102), "nfe5If", (-2102), (-77));
      Node node1 = new Node(115, node0, node0, node0, node0, 108, 1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "jRi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "n95If", (-1797556884), (int) (byte)16);
      Node node1 = new Node(118, node0, node0, node0, node0, 38, 36);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "n95If");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "uaUQd}OP~", 101, (int) (byte)56);
      Node node1 = new Node(118, node0, node0, node0, node0, 38, 36);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "uaUQd}OP~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "uaUQyd}OP~", 101, (int) (byte)56);
      Node node1 = new Node(118, node0, node0, node0, node0, 38, 36);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "uaUQyd}OP~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "nf5If", (-1797556884), (int) (byte)16);
      Node node1 = new Node(118, node0, node0, node0, node0, 38, 36);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("'G%r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      SourceFile sourceFile0 = SourceFile.fromCode("msg.return.inconsistent", "msg.return.inconsistent");
      Node node0 = compiler0.parse(sourceFile0);
      nameAnalyzer0.process(node0, node0);
      assertEquals(0, node0.getLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(35, "eIW7jB&EL", 115, 115);
      Node node1 = new Node(114, node0, node0, node0, node0, 57, 40);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "com.google.javascript.jscomp.RescopeGlobalSymbols$RemoveGlobalVarCallback", 101, (int) (byte)2);
      Node node1 = new Node(118, node0, node0, node0, node0, 38, 36);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.RescopeGlobalSymbols$RemoveGlobalVarCallback");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "nf5If", (-1797556884), (int) (byte)16);
      Node node1 = new Node(118, node0, node0, node0, node0, 38, 36);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "nf5If");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      SourceFile sourceFile0 = SourceFile.fromCode("9MB ' `2K", "window");
      Node node0 = compiler0.parse(sourceFile0);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isExprResult());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "nfe5If", 101, (int) (byte)16);
      Node node1 = new Node(118, node0, node0, node0, node0, 38, 36);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "nfe5If");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "NameAnalyzer$T", 101, (int) (byte)56);
      Node node1 = new Node(118, node0, node0, node0, node0, 38, 36);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "NameAnalyzer$T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "msg.changI.setter.witp.configurable.fal=e");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newString(113, "eIWl7jMiBEL", 113, 113);
      Node node1 = new Node(113, node0, node0, node0, node0, 31, 49);
      Node node2 = Node.newString(1987, "eIWl7jMiBEL");
      node1.addChildrenToFront(node2);
      nameAnalyzer0.process(node1, node1);
      assertTrue(node1.isWhile());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newString(111, "eIWl7jMiBEL", 111, 111);
      Node node1 = new Node(111, node0, node0, node0, node0, 31, 49);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node0.isWhile());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newString(110, "eIWl7jMiBEL", 110, 110);
      Node node1 = new Node(110, node0, node0, node0, node0, 31, 49);
      nameAnalyzer0.process(node0, node1);
      assertEquals(0, node1.getChangeTime());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(113);
      Node node1 = new Node(119, node0, node0, node0, node0, 55, 40);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isWhile());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newString((-1), "eIWl7jMiBEL", (-1), 118);
      Node node1 = new Node(108, node0, node0, node0, node0, (-1840700267), 108);
      nameAnalyzer0.process(node1, node1);
      assertEquals(48, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newString(4, "window", (-2189), (-1720812479));
      Node node1 = new Node(4, node0, node0, node0, node0, 29, (byte)5);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isTry());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "reverse");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(49, node0, node0, node0, node0, 4095, 47);
      nameAnalyzer0.process(node0, node1);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(115, "9jv", 115, (-1723359363));
      Node node1 = new Node(37, node0, node0, node0, node0, 4, 42);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "9jv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(147, "h*J6", (int) (byte)23, 147);
      Node node1 = new Node(1, node0, node0, node0, node0, 889, 42);
      Node node2 = new Node(73, node1, node1, node1, (byte)23, 4095);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node1, node2);
      assertFalse(node2.isCast());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("0om.google.javascript.jscomr.NmeAnalyzer$1");
      Node node1 = new Node(86, node0, node0, node0, node0, 32, 134);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isThrow());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "nf5If", (-1797556879), (int) (byte)16);
      Node node1 = new Node(118, node0, node0, node0, node0, 38, 36);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "nf5If");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(38, "nf5If", (-1797556884), (int) (byte)16);
      Node node1 = new Node(118, node0, node0, node0, node0, 38, 36);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node2 = Normalize.parseAndNormalizeTestCode(compiler0, "nf5If");
      nameAnalyzer0.process(node1, node2);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"nf5If\">nf5If</a><ul><li>REFERENCED BY: </li></ul></li><li><a name=\"window\">window</a><ul><li>REFERS TO: <a href=\"#nf5If\">nf5If</a></li></ul></li></ul></body></html>", string0);
  }
}
