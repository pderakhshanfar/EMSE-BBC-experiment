/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 20:10:26 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.removeUnreferenced();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(115, 115, 115);
      Node node1 = new Node(54, node0, node0, 457, (-797));
      Node node2 = new Node(115);
      node0.addChildToFront(node2);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86, 86, 86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(86, node0, node0);
      Node node2 = new Node(39, node1, node1, 0, (-79313061));
      Node node3 = new Node(56);
      node0.addChildToFront(node3);
      nameAnalyzer0.process(node3, node2);
      assertFalse(node3.isNew());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(37, node0, node0, 42, 56);
      Node node2 = new Node(42);
      node0.addChildToFront(node2);
      nameAnalyzer0.process(node2, node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.removeUnreferenced();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(108, node0, node0, 32, 43);
      Node node2 = new Node(42, 55, 43);
      node0.addChildToFront(node2);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(4, node0, node0, 42, 2229);
      Node node2 = new Node(42);
      node0.addChildToFront(node2);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(97, node0, node0, 32, 43);
      Node node2 = new Node(42, 55, 43);
      node0.addChildToFront(node2);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.process(node0, node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.rhino.head.ast.GeneratorExpression");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(119, 119, 119);
      Node node1 = Node.newString("prototype");
      node0.addChildrenToBack(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node2 = new Node(1);
      node0.addChildToFront(node2);
      nameAnalyzer0.process(node0, node0);
      assertEquals(56, Node.CHANGE_TIME);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(111, 111, 111);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = Node.newString(38, "goog.global");
      node0.addChildToFront(node1);
      nameAnalyzer0.process(node1, node0);
      assertEquals(32, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(110, 110, 110);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(2);
      node0.addChildToFront(node1);
      nameAnalyzer0.process(node1, node0);
      assertFalse(node1.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(113, 118, (-3));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(51);
      node0.addChildToFront(node1);
      nameAnalyzer0.process(node1, node0);
      assertFalse(node0.isOnlyModifiesArgumentsCall());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(118, 118, 118);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = Node.newString(3, "java.lang.String");
      Node node2 = new Node(108, node1, 32, 52);
      node0.addChildToFront(node2);
      nameAnalyzer0.process(node2, node0);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(118, 118, 118);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(49);
      node1.addChildToFront(node0);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isOr());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(118, 118, 118);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(51);
      node0.addChildToFront(node1);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(114, node0, node0, 42, 2239);
      Node node2 = new Node(42);
      node0.addChildToFront(node2);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("window", "window");
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(80, 80, 80);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      compiler0.getErrorManager();
      Node node1 = new Node(37);
      node1.addChildToFront(node0);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isTrue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(148);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(100, node0, node0, 32, 43);
      Node node2 = new Node(42, 55, 43);
      node0.addChildToFront(node2);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86, 86, 86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(86, node0, node0);
      Node node2 = new Node(56);
      node0.addChildToFront(node2);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(85, node0, node0, 32, 43);
      Node node2 = new Node(42, 55, 43);
      node0.addChildToFront(node2);
      nameAnalyzer0.process(node0, node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(38, node0, node0);
      Node node2 = new Node(42);
      node0.addChildToFront(node2);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(40, 2, 56);
      node0.addChildToFront(node1);
      nameAnalyzer0.process(node0, node0);
      assertEquals(37, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(118, 118, 118);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = Node.newString(38, "k'H");
      node0.addChildToFront(node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(4, node0, node0, (-857), 1192);
      Node node2 = new Node(1);
      node0.addChildToFront(node2);
      nameAnalyzer0.process(node0, node1);
      assertTrue(node0.isAssign());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 0</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 0</li>\n<li>Referenced Names: 0</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 0</li>\n</ul>ALL NAMES<ul>\n</ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(37, node0, node0, 42, 56);
      Node node2 = new Node(42);
      node0.addChildToFront(node2);
      nameAnalyzer0.process(node2, node0);
      assertFalse(node0.hasOneChild());
      
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 3</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 3</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"\"></a><ul></li></ul></li><li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }
}
