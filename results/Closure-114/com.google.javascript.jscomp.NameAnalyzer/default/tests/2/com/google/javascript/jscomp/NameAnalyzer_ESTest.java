/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 02:02:03 GMT 2020
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, false);
      nameAnalyzer0.removeUnreferenced();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, true);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(114, node0, node0, node0, node0, 46, 54);
      nameAnalyzer0.process(node0, node1);
      assertEquals(36, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newNumber((double) 110);
      Node node1 = Node.newString("pQ!6@ZK[{W}");
      Node node2 = new Node(110, node0, node0, node0, node1, 176, (-1721054746));
      nameAnalyzer0.process(node1, node2);
      assertEquals(57, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      SyntheticAst syntheticAst0 = new SyntheticAst("property {0} is already defined by the {1} extended interface");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      Node node1 = new Node(113, node0, node0, node0, node0, 1879, 55);
      nameAnalyzer0.process(node0, node1);
      assertEquals(0, node1.getChangeTime());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.ProcessCommonJSMdules$ProcessCommonJsModulesCallback");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      SyntheticAst syntheticAst0 = new SyntheticAst("gOp#^G+");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      Node node1 = new Node(108, node0, node0, node0, node0, 3, 53);
      nameAnalyzer0.process(node1, node1);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newNumber((-1873.0904));
      Node node1 = new Node(49, node0, node0, node0, node0, 49, 43);
      nameAnalyzer0.process(node0, node1);
      assertEquals(54, Node.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.ProcessCommonJSMdules$ProcessCommonJsModulesCallback");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      SyntheticAst syntheticAst0 = new SyntheticAst("property {0} is already defined by the {1} extended interface");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      Node node1 = new Node(4, node0, node0, node0, node0, 52, 54);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NameAnalyzer$AliasSet");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newNumber(0.7635041696461536);
      Node node1 = new Node(154, node0, node0, node0, node0, 46, 54);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newNumber((double) 86);
      Node node1 = new Node(86, node0, node0, node0, node0, 16, 16);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isWith());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.goo=le.javascript.jscomp.NameAnalyzer$AliasSet");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newNumber((-2468.7763));
      Node node1 = new Node(37, node0, node0, node0, node0, 42, 48);
      compiler0.parseTestCode("closureReplaceGetCssName");
      nameAnalyzer0.process(node1, node1);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.ProcessCommonJSMdules$ProcessCommonJsModulesCallback");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("window");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }
}
