/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 31 23:25:08 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(115, 115, 115);
      Node node1 = new Node(4095, node0, 29, 39);
      Node node2 = Node.newString(24, " {");
      node0.addChildToFront(node2);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(86);
      Node node1 = new Node(0, node0, node0);
      Node node2 = Node.newString(42, "</li>", 47, (-1722562180));
      node0.addChildToFront(node2);
      nameAnalyzer0.process(node0, node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.removeUnreferenced();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "2x'");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.AliasStrings$StringOccurrence");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(86);
      Node node1 = new Node(0, node0, node0);
      Node node2 = Node.newString(42, "</li>", (-1088593361), (-1722562180));
      node0.addChildToFront(node2);
      nameAnalyzer0.process(node0, node0);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 3</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 3</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"\"></a><ul></li></ul></li><li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(35, 35, 35);
      Node node1 = new Node(37, node0, node0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.google.common.ioByteSource$ConcatenatedByteSourc");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-3490), 3346, 85);
      Node node1 = new Node(114, node0, node0);
      Node node2 = Node.newString(126, "OVERALL STATS<ul>", 48, 55);
      node1.addChildToFront(node2);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node1);
      assertEquals(0, node1.getLength());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = new Node(4, 4, 4);
      Node node1 = new Node(4, 4, 4);
      Node node2 = new Node(108, node1, node0);
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node2);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(110, 110, 110);
      Node node1 = Node.newString("w");
      node0.addChildToFront(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node0);
      assertFalse(node0.isDebugger());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(119, 119, 119);
      Node node1 = Node.newString("w");
      node0.addChildToFront(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node0);
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(93, 93, 93);
      Node node1 = new Node(4, node0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isFalse());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(49, node0, node0);
      Node node2 = Node.newString((-1629064663), "ly{A0fz_&-", (-201), 52);
      node0.addChildToFront(node2);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isInc());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(118, 118, 118);
      Node node1 = Node.newString("rWjiENYKPi3c#}t");
      node0.addChildToFront(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      assertEquals(55, Node.INFERRED_FUNCTION);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("windtw");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(86);
      Node node1 = new Node(57, 57, (-485));
      Node node2 = new Node(98, node1, node0);
      Node node3 = Node.newString(1615, "</li>", 646, 55);
      node0.addChildToFront(node3);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(101, node0, node0);
      Node node2 = Node.newString(48, "0_&+|I<8}|;f2LyWA/", 47, 49);
      node0.addChildToFront(node2);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isExprResult());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(86, 86, 3);
      Node node1 = new Node(100, node0, node0);
      Node node2 = Node.newString(1447, "wintw", 2, 51);
      node0.addChildToFront(node2);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(86, node0, node0);
      Node node2 = Node.newString(48, "j", 47, 49);
      node0.addChildToFront(node2);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(38, node0, node0);
      Node node2 = Node.newString(48, "j", 47, 49);
      node0.addChildToFront(node2);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(86, 86, (-1840700267));
      Node node1 = Node.newString(43, "jaup5o^|)", 51, 48);
      node0.addChildToFront(node1);
      nameAnalyzer0.process(node0, node0);
      assertEquals(57, Node.REFLECTED_OBJECT);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(86);
      Node node1 = new Node(0, node0, node0);
      Node node2 = Node.newString(42, "</li>", (-1088593361), (-1722562180));
      node0.addChildToFront(node2);
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.removeUnreferenced();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(118, 118, 118);
      Node node1 = Node.newString("PVsm");
      node0.addChildToFront(node1);
      Node node2 = Node.newString(31, "PVsm", 57, 57);
      node1.addChildToFront(node2);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node0);
      assertFalse(node0.isAnd());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "window");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }
}
