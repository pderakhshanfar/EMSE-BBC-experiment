/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 20:09:54 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.removeUnreferenced();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("AcF5");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(115);
      node1.addChildAfter(node0, (Node) null);
      Node node2 = new Node(4, node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(148, "cp");
      Node node1 = new Node(16, node0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = new Node(84);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Wp");
      Node node1 = Node.newString("Wp");
      node1.setType(37);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node2 = new Node(1043, node0, node0, node1, 8, 30);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1043
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("oMveride");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isExprResult());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("oIvede");
      node0.setType(114);
      Node node1 = Node.newString("$acj");
      node0.addChildToFront(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isCast());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("iFdow");
      node0.setType(111);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("wiFdow");
      node0.setType(110);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("override");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(119, node0);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isFalse());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Ac65");
      node0.setType(113);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node0);
      assertEquals(113, node0.getType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("AstChangeProxy::getRhs ", "com.google.common.collect.Sets$ImprovedAbstractSet");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("oMvede");
      node0.setType(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(49, node0);
      nameAnalyzer0.process(node1, node1);
      assertEquals(0, node1.getChangeTime());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Ul4");
      node0.setType(118);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("oMveride");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(118, node0);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("window", "window");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("override");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(37, node0);
      nameAnalyzer0.process(node0, node1);
      assertNull(node1.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("oMveride");
      Node node1 = compiler0.parseSyntheticCode("oMveride", "gi");
      node0.setType(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node2 = new Node(86, node0);
      node2.addChildToBack(node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("oMverride");
      node0.setType(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(101, node0);
      nameAnalyzer0.process(node1, node0);
      assertFalse(node1.isOnlyModifiesThisCall());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("oMveride");
      node0.setType(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(100, node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("oMveride");
      node0.setType(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(98, node0);
      nameAnalyzer0.process(node1, node0);
      assertFalse(node0.isGetterDef());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("oMveride");
      node0.setType(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(86, node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("ede");
      node0.setType(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(85, node0);
      nameAnalyzer0.process(node0, node0);
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("oMveride");
      node0.setType(86);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(38, node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("oMveride");
      node0.setType(39);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(86, node0);
      nameAnalyzer0.process(node1, node1);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("oMveride");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }
}
