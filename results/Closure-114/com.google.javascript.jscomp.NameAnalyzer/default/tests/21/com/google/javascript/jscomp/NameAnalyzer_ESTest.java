/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 02:08:11 GMT 2020
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.Node;
import java.io.File;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, true);
      nameAnalyzer0.removeUnreferenced();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 0, 0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.NameAnalyzer", "com.google.javascript.jscomp.NameAnalyzer");
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isArrayLit());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(755);
      Node node1 = new Node(755);
      Node node2 = new Node(114, node0, node0, node1, 48, 54);
      nameAnalyzer0.process(node0, node2);
      assertFalse(node2.isWhile());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(755);
      Node node1 = new Node(119, node0, node0, node0, 38, 56);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node1);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(755);
      Node node1 = new Node(113, node0, node0, node0, 1, 0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isDo());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(755);
      Node node1 = new Node(49, node0, node0, node0, (-1), (-1444641527));
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.NameAnalyzer", "com.google.javascript.jscomp.NameAnalyzer");
      Node node1 = new Node(4, node0, node0, node0, (-1614074286), 30);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(755);
      File file0 = MockFile.createTempFile("sANh8\u0013WJiZ", "windowwindow");
      SourceFile sourceFile0 = SourceFile.fromFile(file0);
      ImmutableList<SourceFile> immutableList0 = ImmutableList.of(sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.init((List<SourceFile>) immutableList0, (List<SourceFile>) immutableList0, compilerOptions0);
      Node node1 = new Node(37, node0, node0, node0, 40, 4095);
      nameAnalyzer0.process(node0, node1);
      assertTrue(node0.mayMutateGlobalStateOrThrow());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(755);
      Node node1 = new Node(37, node0, node0, node0, 40, 4095);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.NameAnalyzer", "TyygyN=Y");
      nameAnalyzer0.process(node0, node0);
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 0</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 0</li>\n<li>Referenced Names: 0</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 0</li>\n</ul>ALL NAMES<ul>\n</ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("d?m&s_iCr#SBZ", "window");
      nameAnalyzer0.process(node0, node0);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }
}
