/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 23:49:48 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.removeUnreferenced();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(115, "/GU!6v$I8");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node((-973), (-616), 2780);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(32, node0, node0, node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(86, "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      Node node1 = new Node(42, 15, 30);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(4095, node0, (-1529), 2);
      nameAnalyzer0.process(node1, node2);
      // Undeclared exception!
      try { 
        nameAnalyzer0.removeUnreferenced();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(86, "]");
      Node node1 = new Node(42, 15, 30);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(114, node0, 57, (-2032));
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(86, "]");
      Node node1 = new Node(42, 15, 30);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(100, node0, 49, 0);
      Node node3 = new Node(46, node2, 47, 4095);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(86, "]");
      Node node1 = new Node(42, 15, 30);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(90, node0, 57, (-2032));
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newString(86, "S78r^03|OU");
      Node node1 = new Node(35, 8, 4095);
      node0.addChildrenToBack(node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(86, "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      Node node1 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters", "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      nameAnalyzer0.process(node1, node1);
      nameAnalyzer0.process(node0, node1);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(115, 115, 115);
      Node node1 = new Node(52, 1, 15);
      Node node2 = new Node(114, node1, 37, 31);
      node2.addChildrenAfter(node0, node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(52, 539, 15);
      Node node1 = new Node(114, node0, 37, 4);
      nameAnalyzer0.process(node1, node1);
      assertEquals(0, node1.getChangeTime());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(111, "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      Node node1 = new Node(42, 15, 30);
      node0.addChildrenToBack(node1);
      nameAnalyzer0.process(node0, node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(100, 113, 2);
      Node node1 = Node.newString(110, "</ul>", 108, 56);
      node1.addChildrenToBack(node0);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node0.isVar());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString((-872), "tdmo-OC?`c;#O=ptHZ");
      Node node1 = new Node(119, (-4), 57);
      node1.addChildrenToBack(node0);
      nameAnalyzer0.process(node1, node1);
      assertEquals(119, node1.getType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(85, 113, 2);
      Node node1 = Node.newString(113, "</ul>", 108, 56);
      node1.addChildrenToBack(node0);
      nameAnalyzer0.process(node0, node1);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(86, "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      Node node1 = new Node(42, 15, 30);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(108, node0, 56, 130);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(86, "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      Node node1 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters", "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      node0.addChildrenToBack(node1);
      Node node2 = new Node(49, node0, 8, 4095);
      nameAnalyzer0.process(node2, node2);
      assertEquals(43, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(86, "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      Node node1 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters", "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      node0.addChildrenToBack(node1);
      Node node2 = new Node(130, node0, 553, 301);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(118, "tdmo-OC?`c;#O=ptHZ");
      Node node1 = new Node((-1106), 47, 16);
      node0.addChildrenToBack(node1);
      nameAnalyzer0.process(node1, node0);
      assertFalse(node1.isAnd());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("gleObj");
      Node node1 = new Node(37, 52, 55);
      node1.addChildrenToBack(node0);
      Node node2 = new Node(118, node1, 2, 1555);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //   Node(NAME gleObj): [testcode]:1:0
         // gleObj
         //   Parent(EXPR_RESULT): [testcode]:1:0
         // gleObj
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("gleObj");
      Node node1 = new Node(37, 52, 55);
      node1.addChildrenToBack(node0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(154, "/CeEM");
      Node node1 = Node.newString("B6V");
      node1.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(86, "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      Node node1 = new Node(42, 15, 30);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(101, node0, 3406, 835);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(86, "]");
      Node node1 = new Node(42, 15, 30);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(100, node0, 49, 0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(86, "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      Node node1 = new Node(42, 15, 30);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(98, node0, 4, 57);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(86, "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      Node node1 = new Node(42, 15, 30);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(86, 36, 589);
      node2.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(86, "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      Node node1 = new Node(85, (-1775), 2);
      node1.addChildrenToBack(node0);
      Node node2 = new Node((-299), 1, 3987);
      node0.addChildrenToBack(node2);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node2, node0);
      assertFalse(node2.isHook());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(86, "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      Node node1 = new Node(52, 30, 2468);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(38, node0, (-387), 15);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newString(86, "S7r_*3|OU");
      Node node1 = Node.newString("S7r_*3|OU", 32, 86);
      node0.addChildrenToBack(node1);
      nameAnalyzer0.process(node0, node0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(118, "only implemented in GoogleCodingConvention");
      Node node1 = new Node(38, 542, 37);
      node0.addChildrenToBack(node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(86, "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      Node node1 = new Node(42, 15, 30);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(130, node0, 4, 57);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(86, "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      Node node1 = new Node(42, 15, 30);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(4, (-1), 2000);
      node2.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(86, "com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters");
      Node node1 = new Node(42, 15, 30);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(4095, node0, (-1529), 2);
      nameAnalyzer0.process(node1, node2);
      assertEquals((-1), node1.getSourcePosition());
      
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 3</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 3</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"\"></a><ul></li></ul></li><li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("window", "window");
      nameAnalyzer0.process(node0, node0);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }
}
