/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 23:46:40 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.removeUnreferenced();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(148, "omgoogle.javaIrip.bscomp.LiveVriablesnalyszs$1", 74, 74);
      Node node1 = new Node(148, node0, node0, node0, node0, 46, (-1789569704));
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("l{6%\")4<NnrDE");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(38, node0, node0, node0, node0, 12, 29);
      Node node2 = new Node(0, node1, 1613, (-153));
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}");
      node0.setType((-1614074286));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isDebugger());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      assertEquals(1, node0.getChildCount());
      
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"JSCompiler_get\">JSCompiler_get</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}");
      Node node1 = node0.removeFirstChild();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node2 = new Node(8, node1, node0, node0, node0, 1754, (-18));
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("{^V6");
      node0.setType(42);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(37, node0, node0, node0, node0, 32, 57);
      nameAnalyzer0.process(node1, node1);
      assertEquals(48, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(54, node0, node0, node0, 38, 8);
      nameAnalyzer0.process(node0, node1);
      nameAnalyzer0.process(node1, node1);
      assertEquals(57, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(54, node0, node0, node0, 38, 8);
      nameAnalyzer0.process(node1, node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.removeUnreferenced();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "winS=w");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(113, node0, node0, node0, 1308, 43);
      nameAnalyzer0.process(node1, node1);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"JSCompiler_get\">JSCompiler_get</a><ul><li>REFERENCED BY: </li></ul></li><li><a name=\"window\">window</a><ul><li>REFERS TO: <a href=\"#JSCompiler_get\">JSCompiler_get</a></li></ul></li></ul></body></html>", string0);
  }
}
