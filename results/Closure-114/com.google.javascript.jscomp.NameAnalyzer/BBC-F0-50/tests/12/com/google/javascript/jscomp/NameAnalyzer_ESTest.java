/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 18:14:56 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Compiler compiler1 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("lr=IXEJ;[mx]");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(2101);
      Node node1 = new Node(86, node0, node0, node0, node0, 43, 12);
      Node node2 = new Node(100, node1, node1, node1, node1, 0, 4095);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(2105, 2105, 2105);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.removeUnreferenced();
      Node node1 = new Node((-238), 101, (-1460365957));
      nameAnalyzer0.removeUnreferenced();
      Node.newString(2105, "", (-1768), (-3943));
      Node node2 = new Node(1, node1, node0, node1, node1, 53, 32);
      NameAnalyzer nameAnalyzer1 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("com.google.javascript.rhino.jstype.TemplatizedType", "window");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      NameAnalyzer nameAnalyzer1 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.NameAnalyzer$TriState");
      nameAnalyzer0.process(node0, node0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1), 38);
      nameAnalyzer0.process(node0, node1);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(2852, 2852, 2588);
      Node node1 = new Node(111, node0, node0, node0, node0, 47, 111);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node1);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(110);
      Node node1 = new Node(110, node0, node0, node0, node0, 48, 32);
      nameAnalyzer0.process(node1, node1);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(119, 119, 119);
      Node node1 = new Node(119, node0, node0, node0, node0, 48, 32);
      nameAnalyzer0.process(node0, node1);
      assertEquals(1, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(2105, 2105, 2105);
      Node node1 = new Node(113, node0, node0, node0, node0, 56, 76);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isHook());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(108, 108, 108);
      Node node1 = new Node(108, node0, node0, node0, node0, 48, 32);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node0.isSwitch());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber((double) 86);
      Node node1 = new Node(115, node0, node0, node0, node0, 46, 116);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node2 = new Node(40, node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber((double) 86);
      Node node1 = new Node(86, node0, node0, node0, node0, 54, 30);
      Node node2 = new Node(49, node1, node1, node1, node1, 38, (-913));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node2);
      assertFalse(node2.isOnlyModifiesThisCall());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(2070, 2070, 2070);
      Node node1 = new Node(86, node0, node0, node0, node0, 43, 12);
      Node node2 = new Node(4, node1, node1, node1, node1, (-1618089793), 36);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node2);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(2105, 2105, 2105);
      Node node1 = new Node(118, node0, node0, node0, node0, 1195, 46);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isAnd());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(154, 3317, (-1718819920));
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(2101, 2101, 2101);
      Node node1 = new Node(86, node0, node0, node0, node0, 43, 12);
      Node node2 = new Node(101, node1, node1, node1, node1, 0, 4095);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node2, node2);
      assertFalse(node2.isInc());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(2105, 2105, 2105);
      Node node1 = new Node(86, node0, node0, node0, node0, 3382, 54);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node2 = new Node(86, node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(2101);
      Node node1 = new Node(86, node0, node0, node0, node0, 43, 12);
      Node node2 = new Node(100, node1, node1, node1, node1, 0, 4095);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node3 = new Node(85, node2, 126, 27);
      nameAnalyzer0.process(node0, node3);
      assertFalse(node0.isCast());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(2101, 2101, 2101);
      Node node1 = new Node(86, node0, node0, node0, node0, 43, 12);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node2 = new Node(38, node1);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      NameAnalyzer nameAnalyzer1 = new NameAnalyzer(compiler0, false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Hashing.sha256()");
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isWith());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(114, 114, 114);
      nameAnalyzer0.process(node0, node0);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }
}
