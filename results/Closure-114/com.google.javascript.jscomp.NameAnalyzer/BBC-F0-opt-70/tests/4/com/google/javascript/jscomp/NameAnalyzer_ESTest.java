/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 18:14:48 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(49, node0, node0, node0);
      Node node2 = new Node(30, 50, 31);
      Node node3 = Node.newString(115, "", 1208, 16);
      node0.addChildrenToFront(node3);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      node3.addChildrenToFront(node2);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(86);
      SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.rhino.head.ast.rcripNode");
      Node node1 = new Node(86, node0, node0, node0);
      Node node2 = new Node(54, node1, node1, node1);
      Node node3 = syntheticAst0.getAstRoot(compiler0);
      node0.addChildrenToFront(node3);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("com", (-2898), (-1790145684));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("com.google.javascript.jscomp.AmbiguateProperties", (-2898), 100);
      Node node1 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.AmbiguateProperties", "com.google.javascript.jscomp.AmbiguateProperties");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node1);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("jindow");
      Node node1 = new Node(114, node0, node0, node0);
      SyntheticAst syntheticAst0 = new SyntheticAst("jindow");
      Node node2 = syntheticAst0.getAstRoot(compiler0);
      node1.addChildrenToFront(node2);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isOnlyModifiesArgumentsCall());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node((-1790145684));
      Node node1 = new Node(39, 16, (-1790145684));
      Node node2 = new Node(113, node0, node0, node0, node1, 108, 46);
      nameAnalyzer0.process(node2, node2);
      assertFalse(node2.isNE());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(86, 86, 86);
      SyntheticAst syntheticAst0 = new SyntheticAst("~`dA:7NIp|^m[9");
      Node node1 = new Node(110, node0, node0, node0);
      Node node2 = syntheticAst0.getAstRoot(compiler0);
      node0.addChildrenToFront(node2);
      nameAnalyzer0.process(node1, node1);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(119, node0, node0, node0);
      Node node2 = Node.newString(15, "_", 42, 36);
      node0.addChildrenToFront(node2);
      nameAnalyzer0.process(node0, node1);
      assertTrue(node0.isAssign());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(411, 407, 407);
      Node node1 = new Node(108, node0, node0, node0, node0, 50, 2780);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isExprResult());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(4, node0, node0, node0);
      Node node2 = Node.newString(42, "F4/~k|9fh4", 48, 12);
      node0.addChildrenToFront(node2);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node0.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(49, node0, node0, node0);
      Node node2 = Node.newString("$8");
      node0.addChildrenToFront(node2);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("jiWndow");
      SyntheticAst syntheticAst0 = new SyntheticAst("export");
      Node node1 = new Node(118, node0, node0, node0);
      Node node2 = syntheticAst0.getAstRoot(compiler0);
      node1.addChildrenToFront(node2);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //   Node(NAME jiWndow): [testcode]:1:0
         // jiWndow
         //   Parent(EXPR_RESULT): [testcode]:1:0
         // jiWndow
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("window", "window");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("ikv", "");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(86, 86, 86);
      SyntheticAst syntheticAst0 = new SyntheticAst("~`d:7NIp|^m[9");
      Node node1 = new Node(147, node0, node0, node0);
      Node node2 = syntheticAst0.getAstRoot(compiler0);
      node0.addChildrenToFront(node2);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(86, 86, 86);
      SyntheticAst syntheticAst0 = new SyntheticAst("_");
      Node node1 = new Node(101, node0, node0, node0);
      Node node2 = syntheticAst0.getAstRoot(compiler0);
      node0.addChildrenToFront(node2);
      nameAnalyzer0.process(node1, node1);
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(86);
      SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.rhino.head.ast.rcripNode");
      Node node1 = new Node(86, node0, node0, node0);
      Node node2 = syntheticAst0.getAstRoot(compiler0);
      node0.addChildrenToFront(node2);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(86, 86, 86);
      SyntheticAst syntheticAst0 = new SyntheticAst("~`dd7NIpF|m[9");
      Node node1 = new Node(85, node0, node0, node0);
      Node node2 = syntheticAst0.getAstRoot(compiler0);
      node0.addChildrenToFront(node2);
      nameAnalyzer0.process(node1, node0);
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(86, 86, 86);
      SyntheticAst syntheticAst0 = new SyntheticAst("~`dd7NIpF|m[9");
      Node node1 = new Node(38, node0, node0, node0);
      Node node2 = syntheticAst0.getAstRoot(compiler0);
      node0.addChildrenToFront(node2);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}", "function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(57, node0, 15, 4095);
      Node node2 = Node.newString(42, ".", 48, 12);
      node0.addChildrenToFront(node2);
      nameAnalyzer0.process(node1, node0);
      nameAnalyzer0.removeUnreferenced();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(4, node0, node0, node0);
      Node node2 = Node.newString(42, "F4/~k|9fh4", 48, 12);
      node0.addChildrenToFront(node2);
      nameAnalyzer0.process(node1, node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.removeUnreferenced();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseTestCode("_=y3");
      nameAnalyzer0.process(node0, node0);
      assertTrue(node0.hasOneChild());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 0</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 0</li>\n<li>Referenced Names: 0</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 0</li>\n</ul>ALL NAMES<ul>\n</ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(4, node0, node0, node0);
      Node node2 = Node.newString(42, "F4/~k|9fh4", 48, 12);
      node0.addChildrenToFront(node2);
      nameAnalyzer0.process(node1, node0);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 3</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 3</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"\"></a><ul></li></ul></li><li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }
}
