/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 23:43:28 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(154);
      Node node1 = Node.newString(154, "BJ>1h3TuMH)!Td|^lo2");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node2 = StatementFusion.fuseExpressionIntoExpression(node1, node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Compiler compiler1 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler1, "window");
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-1450), 516, (-1450));
      Node node1 = new Node(35, 140, 49);
      node0.addChildToBack(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(114);
      Node node1 = Node.newString("y", 37, 31);
      node0.addChildToBack(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node0);
      assertFalse(node1.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(111);
      Node node1 = Node.newString(53, "!c");
      node0.addChildToBack(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node1, node0);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(119);
      Node node1 = new Node(52, 52, (-50));
      node0.addChildToBack(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node0);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(113);
      Node node1 = Node.newString(114, "THROWS", 37, (-2432));
      node0.addChildToBack(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node0);
      assertEquals(0, node1.getLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(108);
      Node node1 = new Node(47, 2, 86);
      node0.addChildToBack(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node0);
      assertFalse(node1.isVar());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(113);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(49, node0);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isCase());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-148));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(4, node0);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isExprResult());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(115);
      Node node1 = Node.newString(15, "+Vv*!mqCS[ +u&WsYE", 6, (-1848648604));
      node1.addChildToBack(node0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(118);
      Node node1 = new Node((-1275), 328, 32);
      node0.addChildToBack(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isArrayLit());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newNumber((-3084.7057), (-3802), (-44));
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NameAnalyzer$FindReferences$NodeAccumulator");
      nameAnalyzer0.process(node0, node1);
      assertEquals(36, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-39));
      compiler0.initCompilerOptionsIfTesting();
      Node node1 = Node.newString(37, "+Vv*!mqCS[ +u&WsYE", 29, 36);
      node1.addChildToBack(node0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isTypeOf());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      Node node1 = new Node(42, 38, 54);
      node0.addChildToBack(node1);
      Node node2 = Node.newString(4095, "JSC_CONSTANT_PROPERTY_DELETED");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node3 = StatementFusion.fuseExpressionIntoExpression(node2, node0);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node2, node3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      Node node1 = new Node(42, 38, 54);
      node0.addChildToBack(node1);
      Node node2 = Node.newString(3057, "ALL NAMES<ul>\n", 3633, (-541));
      node2.addChildToBack(node0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node2, node2);
      assertFalse(node2.isNE());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      Node node1 = new Node(43, 48, 16);
      node0.addChildToBack(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node0);
      assertFalse(node1.isNot());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(118);
      Node node1 = new Node(38, 118, (-202));
      node0.addChildToBack(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      Node node1 = new Node(42, 38, 54);
      node0.addChildToBack(node1);
      Node node2 = Node.newString(4095, "JSC_CONSTANT_PROPERTY_DELETED");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      StatementFusion.fuseExpressionIntoExpression(node0, node2);
      nameAnalyzer0.process(node2, node0);
      nameAnalyzer0.removeUnreferenced();
      // Undeclared exception!
      try { 
        nameAnalyzer0.removeUnreferenced();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(118);
      Node node1 = new Node(52, 52, (-50));
      node0.addChildToBack(node1);
      Node node2 = Node.newString("gH=", 2, 52);
      node1.addChildToBack(node2);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(86);
      Node node1 = new Node(42, 38, 54);
      node0.addChildToBack(node1);
      Node node2 = Node.newString(4095, "JSC_CONSTANT_PROPERTY_DELETED");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      StatementFusion.fuseExpressionIntoExpression(node0, node2);
      nameAnalyzer0.process(node2, node0);
      assertTrue(node0.hasChildren());
      
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 3</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 3</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"\"></a><ul></li></ul></li><li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "window");
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isGetElem());
  }
}
