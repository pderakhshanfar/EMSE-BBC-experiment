/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:43:37 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.removeUnreferenced();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newNumber(2294.2);
      Node node1 = new Node(114, node0, node0, node0, node0, 12, 30);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isCatch());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(2298.913442166409);
      Node node1 = Node.newNumber(2298.913442166409);
      Node node2 = new Node(111, node1, node0, node0, node0, 12, 30);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node2, node2);
      assertEquals(56, Node.CHANGE_TIME);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newNumber(1894.6853966947722);
      Node node1 = new Node(110, node0, node0, node0, node0, 55, 30);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isHook());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(2307.8173172075);
      Node node1 = new Node(119, node0, node0, node0, node0, 12, 30);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isFromExterns());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newNumber(1902.1940223960949);
      Node node1 = new Node(113, node0, node0, node0, node0, 55, 30);
      nameAnalyzer0.process(node0, node1);
      assertEquals(55, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("%ykd_7&RTY:");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(108, node0, 36, (-1));
      nameAnalyzer0.process(node0, node1);
      assertFalse(node0.isSetterDef());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber((-789.97182732727));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(49, node0, node0, node0, node0, 36, 132);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node0.isCase());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newNumber((-691.4));
      Node node1 = new Node(4, node0, node0, node0, node0, 54, 685);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(1895.9680306708494);
      Node node1 = new Node(118, node0, node0, node0, node0, 4095, 47);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node1);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, false);
      NameAnalyzer nameAnalyzer1 = new NameAnalyzer(compiler0, true);
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.FunctionRewriter$SetterReducer", "window", "window");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(118, nodeArray0);
      // Undeclared exception!
      try { 
        nameAnalyzer1.process(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber((-2124.9));
      Node node1 = new Node(148, node0, node0, node0, node0, 126, (-62));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newString("window");
      Node node1 = new Node(86, node0, node0, node0, node0, 55, 51);
      nameAnalyzer0.process(node0, node1);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      SourceFile.fromCode("BB.H5x=a;QPsq", "BB.H5x=a;QPsq", "BB.H5x=a<QsE");
      Node node0 = compiler0.parseTestCode("BB.H5x=a;QPsq");
      nameAnalyzer0.process(node0, node0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      SourceFile.fromCode("</li>\n", "BB.H5x=a;QPsq", "</li>\n");
      Node node0 = compiler0.parseTestCode("Ordering.allEqual()");
      nameAnalyzer0.process(node0, node0);
      assertEquals(56, Node.CHANGE_TIME);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      NameAnalyzer nameAnalyzer1 = new NameAnalyzer(compiler0, true);
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes", "com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes", "com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      nameAnalyzer1.process(node0, node0);
      String string0 = nameAnalyzer1.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      NameAnalyzer nameAnalyzer1 = new NameAnalyzer(compiler0, false);
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.PhaseOptimizer", "window", "window");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      nameAnalyzer1.process(node0, node0);
      nameAnalyzer1.process(node0, node0);
      assertFalse(node0.isLocalResultCall());
  }
}
