/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:49:42 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("O", "open");
      Document document1 = Document.createShell("O");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document1, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment(",]dg\"Q7BX;[/)1", ",]dg\"Q7BX;[/)1");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment(",]dg\"Q7BX;[/)1", document0, ",]dg\"Q7BX;[/)1", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement(",]dg\"Q7BX;[/)1");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("jZSVyU/p)#8-Lj;lw#", "jZSVyU/p)#8-Lj;lw#");
      Document document1 = htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertFalse(document0.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Document document1 = parser0.parseInput("3}\"n", "3}\"n");
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      assertEquals(1, document0.childNodeSize());
      
      htmlTreeBuilder0.clearStackToTableRowContext();
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("org.jsoup.nodes.Attributes$1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InSelect;
      htmlTreeBuilder0.error(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTable;
      htmlTreeBuilder0.transition(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setHeadElement((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.newPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.framesetOk(false);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("isindex");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "isindex", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("(@{%UPEbj{3Zl");
      htmlTreeBuilder0.replaceOnStack(element0, document0);
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      String string0 = htmlTreeBuilder0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("{");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "object", parser0);
      Element element0 = htmlTreeBuilder0.pop();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("caption");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "K` 9>", parser0);
      Document document0 = new Document("caption");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Document document1 = (Document)htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals("caption", document1.location());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      Attributes attributes0 = new Attributes();
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("qc^@Sb,s8!G('B", attributes0);
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("cvjq");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "cvjq", parser0);
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.Doctype token_Doctype0 = tokeniser0.doctypePending;
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A");
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "A", parser0);
      htmlTreeBuilder0.push((Element) null);
      Element element0 = htmlTreeBuilder0.pop();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("OCtE");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "OCtE", parser0);
      htmlTreeBuilder0.push(document0);
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("noscript");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "noscript", parser0);
      htmlTreeBuilder0.insertStartTag("N#<0'|$@<1=Vy!>y");
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.originalState();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("jZSVyU/p)#8-Lj;lw#");
      htmlTreeBuilder0.onStack(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      boolean boolean0 = htmlTreeBuilder0.onStack(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("P");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "P", parser0);
      document0.tagName("P");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNotNull(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("bgsound");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "", attributes0);
      boolean boolean0 = htmlTreeBuilder0.isSpecial(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("open", "7^T gM");
      boolean boolean0 = htmlTreeBuilder0.isSpecial(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("lKA~:|9Y$q'!f4t");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "lKA~:|9Y$q'!f4t", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertTrue(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Tag tag0 = Tag.valueOf("th");
      CDataNode cDataNode0 = new CDataNode("Bs_E$`3");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "vzk^CHw|i!", attributes0);
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parseFragment("vzk^CHw|i!", formElement0, "BogusComment", parser0);
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)8-Lj;lw#", parser0);
      htmlTreeBuilder0.parse(stringReader0, "li", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("-<ES, rI6` ");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      htmlTreeBuilder0.insertStartTag("jZSVyU/p)#8-Lj;lw#");
      Attributes attributes0 = new Attributes();
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("jZSVyU/p)#8-Lj;lw#", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ps%_=0");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "ps%_=0", parser0);
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("h2", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      htmlTreeBuilder0.insertStartTag("jZSVyU/p)#8-Lj;lw#");
      Attributes attributes0 = new Attributes();
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("select", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ps%_=0");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "ps%_=0", parser0);
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("h2", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      CDataNode cDataNode0 = new CDataNode("ul");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("ul");
      FormElement formElement0 = new FormElement(tag0, "ul", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("ul", formElement0, "ul", parser0);
      assertEquals(1, list0.size());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.Tag token_Tag0 = token_StartTag0.name("_{53fuOj/'LJ!(Yg");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterAfterBody;
      htmlTreeBuilder0.process(token_Tag0, htmlTreeBuilderState0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment(",]dg\"Q7BX;[/)1", ",]dg\"Q7BX;[/)1");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment(",]dg\"Q7BX;[/)1", document0, ",]dg\"Q7BX;[/)1", parser0);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("frameset", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertEquals("frameset", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("html");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("lKA~:|9Y$q'!f4t");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "lKA~:|9Y$q'!f4t", parser0);
      assertEquals(1, document0.childNodeSize());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "lKA~:|9Y$q'!f4t";
      stringArray0[1] = "html";
      stringArray0[3] = "lKA~:|9Y$q'!f4t";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$AttributeWithValueEnding", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.select.Evaluator$AttributeWithValueEnding", attributes0);
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment(",qJLZFfb", pseudoTextElement0, "ol", parser0);
      assertEquals(1, list0.size());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'jG|2GO_rpS cO8tQ";
      stringArray0[1] = "org.jsoup.select.Evaluator$AttributeWithValueEnding";
      stringArray0[2] = "ol";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "script", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("input");
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inScope("input");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyUp)#8-Lj;w#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "li", parser0);
      boolean boolean0 = htmlTreeBuilder0.inScope("jZSVyUp)#8-Lj;w#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tfo\t");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "$-a~<Do`Zq@_Y9/M|>", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("jZSVyU/p)#8-Lj;lw#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("img");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "img", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("img");
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("img");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("r/d630h>E!2wd0/");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "~4`1^m]", parser0);
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("form");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      assertEquals(1, document0.childNodeSize());
      
      htmlTreeBuilder0.popStackToClose("TreeBuilder{currentToken=");
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lkj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lkj;lw#", parser0);
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.CData token_CData0 = new Token.CData("\"{Gz");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTable;
      htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertTrue(list0.contains("\"{Gz"));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A");
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "A", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack("M'ZJKxAPSuRGET");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("aj3_c<gikv,\bXt>");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "P] aKuj{Yc9d[=<", parser0);
      Tag tag0 = Tag.valueOf("ol");
      CDataNode cDataNode0 = new CDataNode("bgold");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "bgold", attributes0);
      htmlTreeBuilder0.push(pseudoTextElement0);
      Element element0 = htmlTreeBuilder0.getFromStack("ol");
      assertEquals("ol", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("IvWw!:W%*[P");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "Z{{", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack("body");
      assertNotNull(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("vd");
      Parser parser0 = Parser.xmlParser();
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "vd", attributes0);
      htmlTreeBuilder0.parseFragment("; filename=\"", formElement0, "; filename=\"", parser0);
      htmlTreeBuilder0.insertInFosterParent(formElement0);
      assertEquals(1, formElement0.siblingIndex());
      
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertEquals(1, formElement1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Tag tag0 = Tag.valueOf("th");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = new FormElement(tag0, "th", (Attributes) null);
      htmlTreeBuilder0.parseFragment("th", formElement0, "th", parser0);
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertFalse(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Tag tag0 = Tag.valueOf("th");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = new FormElement(tag0, "th", (Attributes) null);
      formElement0.prepend("th");
      htmlTreeBuilder0.parseFragment("th", formElement0, "th", parser0);
      assertEquals(1, formElement0.childNodeSize());
      
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertEquals(1, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("aption");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "aption", parser0);
      document0.tagName("aside");
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.helper.W3CDom");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "org.jsoup.helper.W3CDom", parser0);
      Element element0 = document0.head();
      element0.after((Node) document0);
      assertEquals(1, document0.siblingIndex());
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals(1, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("A");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "A", parser0);
      Element element0 = document0.empty();
      Document document1 = htmlTreeBuilder0.getDocument();
      assertSame(document1, element0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("jZSVyU/p)#8-Lj;lw#", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("     ", (Element) null, "", parser0);
      assertEquals(1, list0.size());
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("img");
      stringReader0.skip(100);
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "img", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertFalse(parseSettings0.preserveTagCase());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!x");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "!x", parser0);
      htmlTreeBuilder0.push((Element) null);
      htmlTreeBuilder0.push((Element) null);
      Element element0 = htmlTreeBuilder0.aboveOnStack((Element) null);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tr");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tr", parser0);
      htmlTreeBuilder0.push(document0);
      Element element0 = htmlTreeBuilder0.insertStartTag("\"L|<)o!ofK#pqB");
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertEquals(2, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("lmg");
      stringReader0.skip(100);
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "td", parser0);
      htmlTreeBuilder0.push(document0);
      Element element0 = htmlTreeBuilder0.aboveOnStack(document0);
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("img");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "img", parser0);
      htmlTreeBuilder0.insertInFosterParent(document0);
      // Undeclared exception!
      htmlTreeBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.resetInsertionMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = parser1.parseInput("tq_b[", "tq_b[");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeLastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("open", "7^T gM");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.reconstructFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.Tag token_Tag0 = token_StartTag0.name("$Css1x;~j%ZgZ89w");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Initial;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Tag0, htmlTreeBuilderState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InColumnGroup;
      Token.EOF token_EOF0 = new Token.EOF();
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token_EOF0.type = token_TokenType0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EOF0, htmlTreeBuilderState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A");
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "A", parser0);
      Token.EndTag token_EndTag0 = new Token.EndTag();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Text;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EndTag0, htmlTreeBuilderState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.EOF token_EOF0 = new Token.EOF();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("A");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "A", parser0);
      Token.Doctype token_Doctype0 = new Token.Doctype();
      Token.TokenType token_TokenType0 = Token.TokenType.EndTag;
      token_Doctype0.type = token_TokenType0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Doctype0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose("script");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToBefore("ZyJLs`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("A");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "A", parser0);
      htmlTreeBuilder0.popStackToClose("A");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment("lq", "ul");
      Element element0 = document0.head();
      element0.after((Node) document0);
      // Undeclared exception!
      htmlTreeBuilder0.parseFragment("lq", element0, "head", parser0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("jZSVyU/p)#8-Lj;lw#", "C1L|wRF29;2");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("script", document0, "html", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("jZSVyU/p)#8-Lj;lw#", "BJ&dheP@Hu^[^?D");
      Parser parser0 = Parser.xmlParser();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("BJ&dheP@Hu^[^?D", document0, (String) null, parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.onStack((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.lastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isSpecial((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("RL4f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("plaintext");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("X@", "X@");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      htmlTreeBuilder0.popStackToBefore("jZSVyU/p)#8-Lj;lw#");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("3T_&DIGPnN", (Attributes) null);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      CharacterReader characterReader0 = new CharacterReader("X &u^9jmhZW");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("script", attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.CData token_CData0 = new Token.CData("!c'L`1'eW{GF0b~");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_CData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Xyd/X");
      Parser parser0 = Parser.htmlParser();
      stringReader0.close();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(stringReader0, "Xyd/X", parser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      PipedReader pipedReader0 = new PipedReader(100);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "6l/@8:'i0", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse((Reader) null, "0r^_8AW+[v+c'", (Parser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String input must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("gMPy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("There is an unread token pending!", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("footer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getFromStack("style");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getActiveFormattingElement("xmlns");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment(",]dg\"Q7BX;[/)1", ",]dg\"Q7BX;[/)1");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment(",]dg\"Q7BX;[/)1", document0, ",]dg\"Q7BX;[/)1", parser0);
      htmlTreeBuilder0.popStackToClose(";oN|f4M%mX@:an30$");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.generateImpliedEndTags(";oN|f4M%mX@:an30$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InFrameset;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyUp)#8-Lj;w#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "li", parser0);
      HtmlTreeBuilder htmlTreeBuilder1 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder1.aboveOnStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("A");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "A", parser0);
      String[] stringArray0 = new String[0];
      htmlTreeBuilder0.popStackToClose(stringArray0);
      htmlTreeBuilder0.push(document0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("script");
      Parser parser1 = parser0.settings((ParseSettings) null);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parse(stringReader0, "script", parser1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("img");
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      Document document0 = parser0.parseInput("img", "object");
      htmlTreeBuilder0.parse(stringReader0, "img", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("#root");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "majK", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("html");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("jZSVyU/p)#8-Lj;lw#", "jZSVyU/p)#8-Lj;lw#");
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("jZSVyU/p)#8-Lj;lw#", "jZSVyU/p)#8-Lj;lw#");
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals("jZSVyU/p)#8-Lj;lw#", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("jZSVyU/p)#8-Lj;lw#", "jZSVyU/p)#8-Lj;lw#");
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#-j;lw");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#-j;lw", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("jZSVyU/p)#-j;lw");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("h1");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "h1", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[!)S$S`<S>(V", "jZSVyU/p)#8-Lj;lw#");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A");
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "A", parser0);
      htmlTreeBuilder0.processStartTag("A");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("A", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Y3(dL\"@>itcHJ<*hVg");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "A", attributes0);
      htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
      assertEquals("A", formElement0.nodeName());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("6b8gYIY=");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "?w[uJ:|Pzd]o.8XO", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("jZSVyU/p)#8-Lj;lw#", "jZSVyU/p)#8-Lj;lw#");
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("cvjq");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "cvjq", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "b>&|:2BK1_Oh=w%N(?", parser0);
      htmlTreeBuilder0.generateImpliedEndTags("org.jsoup.select.NodeTraversor");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A");
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "A", parser0);
      boolean boolean0 = htmlTreeBuilder0.processStartTag("optgroup");
      boolean boolean1 = htmlTreeBuilder0.inSelectScope("_");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("img");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "sipt", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("cp/zs{?y9drIF");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "cp/zs{?y9drIF", parser0);
      htmlTreeBuilder0.popStackToBefore("cp/zs{?y9drIF");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("cp/zs{?y9drIF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("\"tj");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "\"tj", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("\"tj");
      assertEquals(1, element0.siblingIndex());
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "\"tj";
      boolean boolean0 = htmlTreeBuilder0.inScope("O]3b3A+5}SSDQ", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("#&+i {u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("isindex");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "colgroup", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("frameset");
      assertEquals(1, element0.siblingIndex());
      
      String[] stringArray0 = new String[6];
      boolean boolean0 = htmlTreeBuilder0.inScope("frameset", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment(",]dg\"Q7BX;[/)1", ",]dg\"Q7BX;[/)1");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment(",]dg\"Q7BX;[/)1", document0, ",]dg\"Q7BX;[/)1", parser0);
      htmlTreeBuilder0.popStackToClose(",]dg\"Q7BX;[/)1");
      boolean boolean0 = htmlTreeBuilder0.inTableScope(",]dg\"Q7BX;[/)1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#&-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "#s8RIgnCCt", parser0);
      htmlTreeBuilder0.insertStartTag(">=AQVM");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lq", "ul");
      Element element0 = document0.head();
      Element element1 = element0.after("ul");
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("frameset");
      FormElement formElement0 = new FormElement(tag0, "style", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("[", formElement0, "_S~)F9Hs0", parser0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment("lq", "ul");
      Element element0 = document0.head();
      htmlTreeBuilder0.parseFragment("lq", element0, "head", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("head");
      assertEquals("head", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("colgroup");
      Element element1 = element0.prepend("colgroup");
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      document0.tagName("caption");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("7kJ/yYf'>PU\"'|h%'2;", document0, "td", parser0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = htmlTreeBuilder0.settings;
      Tag tag0 = Tag.valueOf("tfoot", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "A", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("xhtml", formElement0, "[", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("thead");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "thead", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("[", formElement0, "fVd#R%>@%E", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("tbody", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tbody", (Attributes) null);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tbody", pseudoTextElement0, "e+tXpST)JDb;9f^OrE", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("tr");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "tfo\t", attributes0);
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("select", formElement0, "tfo\t", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      CDataNode cDataNode0 = new CDataNode("td");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("td");
      FormElement formElement0 = new FormElement(tag0, "td", attributes0);
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("/selet", formElement0, "kk~#W:[<*2B", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      Attributes attributes0 = new Attributes();
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("select", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("select", element0, "jZSVyU/p)#8-Lj;lw#", parser0);
      assertEquals(1, list0.size());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      htmlTreeBuilder0.popStackToBefore("li");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "majK", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "T=`Z", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("thead");
      htmlTreeBuilder0.insertOnStackAfter(element0, document0);
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("img");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "script", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("isindex");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "colgroup", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("frameset");
      htmlTreeBuilder0.insert(document0);
      htmlTreeBuilder0.aboveOnStack(element0);
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("FdYFO;<{k");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "FdYFO;<{k", parser0);
      htmlTreeBuilder0.processStartTag("style");
      htmlTreeBuilder0.popStackToBefore("style");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "html";
      stringArray0[2] = "jZSVyU/p)#8-Lj;lw#";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("^M");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "^M", parser0);
      htmlTreeBuilder0.insertStartTag("^M");
      boolean boolean0 = htmlTreeBuilder0.processEndTag("^M");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      htmlTreeBuilder0.popStackToClose("TreeBuilder{currentToken=");
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("jZSVyU/p)#8-Lj;lw#");
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
      assertTrue(boolean0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment(",]dg\"Q7BX;[/)1", ",]dg\"Q7BX;[/)1");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment(",]dg\"Q7BX;[/)1", document0, ",]dg\"Q7BX;[/)1", parser0);
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("#");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "*=", attributes0);
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("Rawtext", formElement0, "*=", parser0);
      htmlTreeBuilder0.insertStartTag("#");
      Element element0 = htmlTreeBuilder0.getFromStack("#");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("tfo\t");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "tfo\t", attributes0);
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tfo\t", formElement0, "select", parser0);
      assertEquals(1, list0.size());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("select");
      assertEquals("select", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 100);
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 2930);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      htmlTreeBuilder0.insert(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A");
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "A", parser0);
      htmlTreeBuilder0.setFosterInserts(true);
      boolean boolean0 = htmlTreeBuilder0.processStartTag("A");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("FdYFO;<{k");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "FdYFO;<{k", parser0);
      htmlTreeBuilder0.processStartTag("style");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Tag tag0 = Tag.valueOf("th");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = new FormElement(tag0, "th", (Attributes) null);
      htmlTreeBuilder0.parseFragment("th", formElement0, "th", parser0);
      Token.CData token_CData0 = new Token.CData("th");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InCaption;
      boolean boolean0 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      Attributes attributes0 = new Attributes();
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      token_StartTag0.selfClosing = true;
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("g@EH+", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StringReader stringReader0 = new StringReader("command");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "command", parser0);
      htmlTreeBuilder0.processStartTag("command");
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      token_StartTag0.nameAttr("select", attributes0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InCell;
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag0, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      parser0.setTrackErrors(66);
      Token.Doctype token_Doctype0 = new Token.Doctype();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InBody;
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("X@", "X@");
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "jZSVyU/p)#8-Lj;lw#", parser0);
      document0.tagName("plaintext");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("caption", document0, "plaintext", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("noscript");
      FormElement formElement0 = new FormElement(tag0, "table", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("noscript", formElement0, "body", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      CDataNode cDataNode0 = new CDataNode("jZSVyU/p)#8-Lj;lw#");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("script");
      FormElement formElement0 = new FormElement(tag0, "dd", attributes0);
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("FIhs)qHcJpMv3L", formElement0, "s<xNctU[+(pFQ-,x`0", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("noembed", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "seect", attributes0);
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("seect", formElement0, "y|`.#BrCy", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "3DB91N-[N", attributes0);
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("body", formElement0, "grB", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inTableScope("#&+i {u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#8-Lj;lw#");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 100);
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 2930);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("4vbG");
      htmlTreeBuilder0.parse(stringReader0, "4vbG", parser0);
      htmlTreeBuilder0.processStartTag("li");
      htmlTreeBuilder0.generateImpliedEndTags("-7fbd\"g(782tj_3ji");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&<G!`3JH-Y", "[");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$AttributeWithValueEnding", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.select.Evaluator$AttributeWithValueEnding", attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements(pseudoTextElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("input");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Tag tag0 = Tag.valueOf("table");
      CDataNode cDataNode0 = new CDataNode("version");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "table", attributes0);
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parseFragment("'9h3rc5", formElement0, ">=", parser0);
      htmlTreeBuilder0.originalState();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InCell;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_StartTag0, htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("jZSVyU/p)#8-Lj;lw#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFormElement((FormElement) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("jZSVyU/p)#&-Lj;lw#");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "#s8RIgnCCt", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringReader stringReader0 = new StringReader("address");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "C", parser0);
      htmlTreeBuilder0.processStartTag("table");
      htmlTreeBuilder0.clearStackToTableContext();
  }
}
