/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 26 01:04:35 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("nl*|zNpmg_.p*", "nl*|zNpmg_.p*");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nl*|zNpmg_.p*", document0.baseUri());
      assertEquals("nl*|zNpmg_.p*", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("org.jsoup.select.Elements");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("nl*|zv3pmgg.p*", "nl*|zv3pmgg.p*");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("nl*|zv3pmgg.p*", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("nl*|zv3pmgg.p*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("nl*|zv3pmgg.p*", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("nl*|zv3pmgg.p*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("nl*|zv3pmgg.p*", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("nl*|zv3pmgg.p*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("nl*|zv3pmgg.p*", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("nl*|zv3pmgg.p*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("fxx+\"c9fu?p,w'-");
      assertFalse(document0.isBlock());
      assertEquals("fxx+\"c9fu?p,w'-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("fxx+\"c9fu?p,w'-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.isBlock());
      assertEquals("fxx+\"c9fu?p,w'-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("fxx+\"c9fu?p,w'-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("fxx+\"c9fu?p,w'-", element0.baseUri());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = parser0.parseFragmentInput("fxx+\"c9fu?p,w'-", document0, "WB(,5k*Tg-|Sg,|C");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.isBlock());
      assertEquals("fxx+\"c9fu?p,w'-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("fxx+\"c9fu?p,w'-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.isBlock());
      assertEquals("fxx+\"c9fu?p,w'-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("fxx+\"c9fu?p,w'-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("fxx+\"c9fu?p,w'-", element0.baseUri());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.isBlock());
      assertEquals("fxx+\"c9fu?p,w'-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("fxx+\"c9fu?p,w'-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Element element0 = new Element("tU");
      assertEquals("tU", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tU", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tU", element0, "tU", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("tU", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tU", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("tU", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tU", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("tU", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tU", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("!l+UG*|zv3mg6.p", "!l+UG*|zv3mg6.p");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals("!l+UG*|zv3mg6.p", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("!l+UG*|zv3mg6.p", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("!l+UG*|zv3mg6.p");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("bgoud");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bgoud", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("bgoud", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("bgoud", document0, "bgoud", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bgoud", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("bgoud", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bgoud", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("bgoud", document0.baseUri());
      assertFalse(document0.isBlock());
      
      htmlTreeBuilder0.replaceActiveFormattingElement(document0, (Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bgoud", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("bgoud", document0.baseUri());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("", "qxSlVB%");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals("qxSlVB%", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("qxSlVB%", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element0 = new Element("0");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("0", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("0", element0.tagName());
      assertNotNull(element0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("0", element0, "object", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("0", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("0", element0.tagName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.insert(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.childNodeSize());
      assertEquals("0", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("0", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("nosc8ipt");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nosc8ipt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("nosc8ipt", document0.location());
      assertNotNull(document0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("nosc8ipt", document0, "nosc8ipt", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nosc8ipt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("nosc8ipt", document0.location());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterHead;
      htmlTreeBuilder0.error(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InHead;
      htmlTreeBuilder0.transition(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.setFormElement((FormElement) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.newPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.framesetOk(true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("bgsound");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("bgsound", document0, "bgsound", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.push(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Tag tag0 = Tag.valueOf("style");
      assertFalse(tag0.isData());
      assertEquals("style", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("style", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "Z5p/vw[Quhph<", (Attributes) null);
      assertFalse(tag0.isData());
      assertEquals("style", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("style", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("style", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Z5p/vw[Quhph<", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("style", formElement0.nodeName());
      assertNotNull(formElement0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("style", formElement0, "style", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(tag0.isData());
      assertEquals("style", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("style", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("style", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Z5p/vw[Quhph<", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("style", formElement0.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("bgsound");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("bgsound", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("bgsound", document0, "a", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("bgsound", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("bgsound");
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("bgsound", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("a", document0, "a", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("bgsound", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      String string0 = htmlTreeBuilder0.toString();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("bgsound");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("bgsound", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("bgsound", document0, "a", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("bgsound", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      htmlTreeBuilder0.state();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("'v9xtE71 o", "select");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element1.isBlock());
      assertEquals("select", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Tag tag0 = Tag.valueOf("n5");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("n5", tag0.toString());
      assertEquals("n5", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "n5", (Attributes) null);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("n5", tag0.toString());
      assertEquals("n5", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("n5", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("n5", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("n5", formElement0.baseUri());
      assertNotNull(formElement0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("kd?AVm", formElement0, "c?t8^|T_|:", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("n5", tag0.toString());
      assertEquals("n5", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("n5", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("n5", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("n5", formElement0.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("n5", tag0.toString());
      assertEquals("n5", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("n5", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("n5", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("n5", formElement0.baseUri());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("c?t8^|T_|:", element0.baseUri());
      assertEquals("n5", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("n5", element0.nodeName());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Tag tag0 = Tag.valueOf("org.jsoup.select.evaluator$attributewithvaluestarting");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", tag0.getName());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", formElement0.nodeName());
      assertEquals("", formElement0.baseUri());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("", formElement0, "reove", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", formElement0.nodeName());
      assertEquals("", formElement0.baseUri());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", formElement0.nodeName());
      assertEquals("", formElement0.baseUri());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.select.evaluator$attributewithvaluestarting", element0.nodeName());
      assertSame(element0, formElement0);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("Hi4t$p@");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("Hi4t$p@", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tjoot", document0, "Hi4t$p@", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("Hi4t$p@", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Element element0 = htmlTreeBuilder0.currentElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals("Hi4t$p@", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertNotNull(element0);
      
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
      assertTrue(element0.hasParent());
      assertEquals("Hi4t$p@", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("nosc8ipt");
      assertEquals("nosc8ipt", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("nosc8ipt", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("nosc8ipt", document0, "nosc8ipt", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("nosc8ipt", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("nosc8ipt", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterHead;
      CharacterReader characterReader0 = htmlTreeBuilder0.reader;
      assertEquals(8, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1));
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(8, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      Token.EndTag token_EndTag0 = tokeniser0.endPending;
      assertNotNull(token_EndTag0);
      
      boolean boolean0 = htmlTreeBuilder0.process(token_EndTag0, htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
      assertEquals(8, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("usF");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("usF", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("usF", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tjoot", document0, "usF", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("usF", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("usF", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Token.CData token_CData0 = new Token.CData("usF");
      assertNotNull(token_CData0);
      
      boolean boolean0 = htmlTreeBuilder0.process(token_CData0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Element element0 = new Element("select");
      assertEquals("select", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("select", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("select", element0, "select", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("select", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("select", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parseSettings0.preserveTagCase());
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("n5", parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parseSettings0.preserveTagCase());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("n5", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("n5", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "n5", (Attributes) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parseSettings0.preserveTagCase());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("n5", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("n5", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("n5", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("n5", formElement0.nodeName());
      assertEquals("n5", formElement0.tagName());
      assertNotNull(formElement0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("kd?AVm", formElement0, "+lasipmry;'c", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parseSettings0.preserveTagCase());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("n5", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("n5", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("n5", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("n5", formElement0.nodeName());
      assertEquals("n5", formElement0.tagName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parseSettings0.preserveTagCase());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("n5", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("n5", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("n5", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("n5", formElement0.nodeName());
      assertEquals("n5", formElement0.tagName());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("n5", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("n5", element0.tagName());
      assertEquals("+lasipmry;'c", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.originalState();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Element element0 = new Element("SC");
      assertFalse(element0.isBlock());
      assertEquals("SC", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("SC", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("noframes", element0, "%jk\"ool", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element0.isBlock());
      assertEquals("SC", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("SC", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = htmlTreeBuilder0.processStartTag("noframes");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
      
      htmlTreeBuilder0.originalState();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Element element0 = new Element("select");
      assertEquals("", element0.baseUri());
      assertEquals("select", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("!Y7(i& :", element0, "%jool", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("", element0.baseUri());
      assertEquals("select", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Element element1 = htmlTreeBuilder0.currentElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("html", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertEquals("%jool", element1.baseUri());
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      
      boolean boolean0 = htmlTreeBuilder0.onStack(element1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
      assertEquals("html", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertEquals("%jool", element1.baseUri());
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Tag tag0 = Tag.valueOf("noscript");
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertEquals("noscript", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("noscript", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "noscript");
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertEquals("noscript", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("noscript", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("noscript", element0.nodeName());
      assertEquals("noscript", element0.baseUri());
      assertEquals("noscript", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      StringReader stringReader0 = new StringReader("Gu[Y^PAY~QR;La");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      htmlTreeBuilder0.initialiseParse(stringReader0, "Gu[Y^PAY~QR;La", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      
      boolean boolean0 = htmlTreeBuilder0.onStack(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertEquals("noscript", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("noscript", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("noscript", element0.nodeName());
      assertEquals("noscript", element0.baseUri());
      assertEquals("noscript", element0.tagName());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Tag tag0 = Tag.valueOf("center", (ParseSettings) null);
      assertTrue(tag0.isKnownTag());
      assertEquals("center", tag0.getName());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("center", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "body");
      assertTrue(tag0.isKnownTag());
      assertEquals("center", tag0.getName());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("center", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("body", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("center", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("center", element0.nodeName());
      assertNotNull(element0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("XH\"_ V/eL(9)>;", element0, "body", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertTrue(tag0.isKnownTag());
      assertEquals("center", tag0.getName());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("center", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("body", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("center", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("center", element0.nodeName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = Document.createShell("usF");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("usF", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("usF", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("usF", document0, "usF", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("usF", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("usF", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Element element0 = document0.body();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("usF", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("usF", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("usF", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("usF", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("usF", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("usF", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element1.childNodeSize());
      assertEquals("usF", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Element element0 = new Element("select");
      assertFalse(element0.hasParent());
      assertEquals("select", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("select", element0, "select", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element0.hasParent());
      assertEquals("select", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element0.hasParent());
      assertEquals("select", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("select", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.nodeName());
      assertEquals("select", element1.baseUri());
      assertFalse(element1.isBlock());
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Element element0 = new Element("select");
      assertEquals(0, element0.siblingIndex());
      assertEquals("select", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("select", element0, "select", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.siblingIndex());
      assertEquals("select", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.siblingIndex());
      assertEquals("select", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("select", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("select", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("nl*|zv3pmgg.p*", "nl*|zv3pmgg.p*");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("nl*|zv3pmgg.p*", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nl*|zv3pmgg.p*", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("nl*|zv3pmgg.p*", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nl*|zv3pmgg.p*", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)htmlTreeBuilder0.lastFormattingElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("nl*|zv3pmgg.p*", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("nl*|zv3pmgg.p*", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document1, document0);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Tag tag0 = Tag.valueOf("th");
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("th", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertEquals("th", tag0.getName());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "th");
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("th", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertEquals("th", tag0.getName());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("th", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("th", element0.baseUri());
      assertEquals("th", element0.nodeName());
      assertNotNull(element0);
      
      boolean boolean0 = htmlTreeBuilder0.isSpecial(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("th", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertEquals("th", tag0.getName());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("th", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("th", element0.baseUri());
      assertEquals("th", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      Document document0 = xmlTreeBuilder0.parse("embed", "q4gX%NF@h_bP");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("q4gX%NF@h_bP", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("q4gX%NF@h_bP", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isSpecial(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("bgsound");
      assertEquals("bgsound", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("bgsound", document0, "a", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("bgsound", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("bgsound", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
      assertEquals("bgsound", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("uBCys~tqS", (Element) null, "uBCys~tqS", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("bgsound");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("bgsound", document0, "a", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("Hi4t$p@");
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Hi4t$p@", document0.location());
      assertNotNull(document0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tjoot", document0, "Hi4t$p@", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Hi4t$p@", document0.location());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Hi4t$p@", document0.location());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("tjoot");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Hi4t$p@", element0.baseUri());
      assertEquals("tjoot", element0.nodeName());
      assertEquals("tjoot", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("Hi4t$p@");
      assertEquals("Hi4t$p@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tjoot", document0, "Hi4t$p@", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("Hi4t$p@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("Hi4t$p@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      CDataNode cDataNode0 = new CDataNode("tr");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("tr", attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(token_StartTag1);
      
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertTrue(element0.isBlock());
      assertEquals("Hi4t$p@", element0.baseUri());
      assertEquals("tr", element0.tagName());
      assertEquals("tr", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("bgsound");
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals("bgsound", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("font", document0, "font", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals("bgsound", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      CDataNode cDataNode0 = new CDataNode(";");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("F'ueV", attributes0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(token_StartTag1);
      
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("f'uev", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("font", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("f'uev", element0.nodeName());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("f-+W:%HcIP<wlQ>~LrP", "f-+W:%HcIP<wlQ>~LrP");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("f-+W:%HcIP<wlQ>~LrP", document0.baseUri());
      assertEquals("f-+W:%HcIP<wlQ>~LrP", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("f-+W:%HcIP<wlQ>~LrP", document0.baseUri());
      assertEquals("f-+W:%HcIP<wlQ>~LrP", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      CharacterReader characterReader0 = new CharacterReader("%gooL");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("head", attributes0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, attributes0.size());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(token_StartTag1);
      
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, attributes0.size());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("f-+W:%HcIP<wlQ>~LrP", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("f-+W:%HcIP<wlQ>~LrP", "f-+W:%HcIP<wlQ>~LrP");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("f-+W:%HcIP<wlQ>~LrP", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("f-+W:%HcIP<wlQ>~LrP", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      CharacterReader characterReader0 = new CharacterReader("%gooL");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("head", attributes0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, attributes0.size());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(token_StartTag1);
      
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, attributes0.size());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("f-+W:%HcIP<wlQ>~LrP", element0.baseUri());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("nl*|z3pmgg.p*", "nl*|z3pmgg.p*");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("nl*|z3pmgg.p*", document0.location());
      assertEquals("nl*|z3pmgg.p*", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("nl*|z3pmgg.p*", attributes0);
      assertEquals(0, attributes0.size());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(token_StartTag1);
      
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, attributes0.size());
      assertTrue(element0.hasParent());
      assertEquals("nl*|z3pmgg.p*", element0.nodeName());
      assertEquals("nl*|z3pmgg.p*", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("nl*|z3pmgg.p*", element0.baseUri());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("bgoud");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("bgoud", document0.location());
      assertEquals("bgoud", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("bgoud", document0, "bgoud", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("bgoud", document0.location());
      assertEquals("bgoud", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("bgoud");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("bgoud", element0.tagName());
      assertEquals("bgoud", element0.baseUri());
      assertEquals("bgoud", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("bgoud");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("bgsound");
      assertEquals("bgsound", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("bgsound", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("a", document0, "a", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("bgsound", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("bgsound", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("q");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("q", element0.nodeName());
      assertEquals("a", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("q", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      String[] stringArray0 = new String[6];
      stringArray0[2] = "q";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Tag tag0 = Tag.valueOf("th", (ParseSettings) null);
      assertEquals("th", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("th", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, ",D3");
      assertEquals("th", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("th", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("th", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(",D3", element0.baseUri());
      assertEquals("th", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment(",D3", element0, ",D3", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("th", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("th", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("th", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(",D3", element0.baseUri());
      assertEquals("th", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("08|XeFw", "bgsound");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("bgsound", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("noembed");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("bgsound", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("noembed", element0.nodeName());
      assertEquals("noembed", element0.tagName());
      assertEquals("bgsound", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("noembed", element0, "noembed", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("bgsound", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("noembed", element0.nodeName());
      assertEquals("noembed", element0.tagName());
      assertEquals("bgsound", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("bgsound", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("noembed", element0.nodeName());
      assertEquals("noembed", element0.tagName());
      assertEquals("bgsound", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = htmlTreeBuilder0.inScope("noembed", stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("08|XeFw", "bgsound");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("bgsound", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("noembed");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("bgsound", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("noembed", element0.tagName());
      assertEquals("bgsound", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("noembed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("noembed", element0, "noembed", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("bgsound", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("noembed", element0.tagName());
      assertEquals("bgsound", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("noembed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("bgsound", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("bgsound", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("noembed", element0.tagName());
      assertEquals("bgsound", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("noembed", element0.nodeName());
      assertFalse(element0.hasParent());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.inScope("noembed");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("tjoot");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tjoot", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tjoot", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("tjoot");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tjoot", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tjoot", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("tjoot", element0.baseUri());
      assertEquals("tjoot", element0.nodeName());
      assertEquals("tjoot", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tjoot", element0, "tjoot", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tjoot", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tjoot", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("tjoot", element0.baseUri());
      assertEquals("tjoot", element0.nodeName());
      assertEquals("tjoot", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tjoot", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tjoot", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("tjoot", element0.baseUri());
      assertEquals("tjoot", element0.nodeName());
      assertEquals("tjoot", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("tjoot");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("!l+!G*P|zv3mg6.Y", "!l+!G*P|zv3mg6.Y");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("!l+!G*P|zv3mg6.Y", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!l+!G*P|zv3mg6.Y", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("!l+!G*P|zv3mg6.Y");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("Hi4t$p@");
      assertEquals("Hi4t$p@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("tjoot");
      assertEquals("Hi4t$p@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals("Hi4t$p@", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tjoot", element0.nodeName());
      assertEquals("tjoot", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tjoot", element0, "Hi4t$p@", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("Hi4t$p@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals("Hi4t$p@", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tjoot", element0.nodeName());
      assertEquals("tjoot", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("Hi4t$p@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals("Hi4t$p@", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tjoot", element0.nodeName());
      assertEquals("tjoot", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("tjoot");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("begsound");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("begsound", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("begsound", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("begsound", document0, "begsound", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("begsound", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("begsound", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("y{ 6cMFaAIG");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("bgsound");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("bgsound", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("bgsound", document0, "bgsound", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("bgsound", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      htmlTreeBuilder0.popStackToClose("bgsound");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("7) 8'", "bgsound");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("bgsound", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bgsound", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("", "");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("yk>}.ca1&0vJ67~($Jy");
      assertFalse(document0.hasParent());
      assertEquals("yk>}.ca1&0vJ67~($Jy", document0.baseUri());
      assertEquals("yk>}.ca1&0vJ67~($Jy", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.hasParent());
      assertEquals("yk>}.ca1&0vJ67~($Jy", document0.baseUri());
      assertEquals("yk>}.ca1&0vJ67~($Jy", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)htmlTreeBuilder0.getHeadElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("yk>}.ca1&0vJ67~($Jy", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("yk>}.ca1&0vJ67~($Jy", document1.baseUri());
      assertSame(document1, document0);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Document.createShell("httj");
      assertEquals(1, document0.childNodeSize());
      assertEquals("httj", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("httj", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("httj", document0, "httj", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, document0.childNodeSize());
      assertEquals("httj", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("httj", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Element element0 = htmlTreeBuilder0.getFromStack("httj");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = Parser.parse("html", "hhg0,Xk&");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("hhg0,Xk&", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("hhg0,Xk&", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("Request has already been read (with .parse())", document0, "Request has already been read (with .parse())", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("hhg0,Xk&", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("hhg0,Xk&", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Element element0 = htmlTreeBuilder0.getFromStack("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Request has already been read (with .parse())", element0.baseUri());
      assertEquals("html", element0.tagName());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      Document document0 = parser1.parseInput("q7Nd8qs", "q7Nd8qs");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("q7Nd8qs", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("q7Nd8qs", document0.baseUri());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.getFromStack("body");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("q7Nd8qs", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("7) 8'", "bgsound");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("bgsound", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("bgsound", document0.location());
      assertNotNull(document0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("QAM$", attributes0);
      assertEquals(0, attributes0.size());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(token_StartTag1);
      
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, attributes0.size());
      assertEquals("bgsound", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("qam$", formElement0.nodeName());
      assertEquals("qam$", formElement0.tagName());
      assertEquals(1, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement0.hasParent());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(formElement0);
      
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("bgsound", formElement1.baseUri());
      assertFalse(formElement1.isBlock());
      assertEquals("qam$", formElement1.nodeName());
      assertTrue(formElement1.hasParent());
      assertEquals("qam$", formElement1.tagName());
      assertEquals(1, formElement1.siblingIndex());
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Tag tag0 = Tag.valueOf("style");
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("style", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("style", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "Z5p/vw[Quhph<", (Attributes) null);
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("style", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("style", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("style", formElement0.nodeName());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Z5p/vw[Quhph<", formElement0.baseUri());
      assertEquals("style", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element0 = formElement0.appendElement("a$");
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("style", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("style", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("style", formElement0.nodeName());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Z5p/vw[Quhph<", formElement0.baseUri());
      assertEquals("style", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("a$", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z5p/vw[Quhph<", element0.baseUri());
      assertEquals("a$", element0.nodeName());
      assertNotNull(element0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("listing", formElement0, "listing", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("style", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("style", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("style", formElement0.nodeName());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Z5p/vw[Quhph<", formElement0.baseUri());
      assertEquals("style", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, formElement1.childNodeSize());
      assertTrue(formElement1.isBlock());
      assertEquals("style", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.hasParent());
      assertEquals("Z5p/vw[Quhph<", formElement1.baseUri());
      assertEquals("style", formElement1.nodeName());
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("D)L", "D)L");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("D)L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("D)L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals("D)L", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("D)L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("#root", document1.tagName());
      assertEquals("D)L", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("D)L", document1.baseUri());
      assertSame(document1, document0);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("post");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      htmlTreeBuilder0.initialiseParse(stringReader0, "post", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.getDocument();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("post", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("post", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("nl*|zv3pmgg.p*", "nl*|zv3pmgg.p*");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("nl*|zv3pmgg.p*", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nl*|zv3pmgg.p*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("nl*|zv3pmgg.p*", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Tag tag0 = Tag.valueOf("This is a searchable index. Enter search keywords: ");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("This is a searchable index. Enter search keywords:", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("This is a searchable index. Enter search keywords:", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertNotNull(tag0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element0 = new Element(tag0, "listing");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("This is a searchable index. Enter search keywords:", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("This is a searchable index. Enter search keywords:", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(element0.hasParent());
      assertEquals("This is a searchable index. Enter search keywords:", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("This is a searchable index. Enter search keywords:", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("listing", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("This is a searchable index. Enter search keywords: ", element0, "", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("This is a searchable index. Enter search keywords:", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("This is a searchable index. Enter search keywords:", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(parser0.isTrackErrors());
      assertFalse(element0.hasParent());
      assertEquals("This is a searchable index. Enter search keywords:", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("This is a searchable index. Enter search keywords:", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("listing", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("form");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("form", document0.baseUri());
      assertEquals("form", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("org.jsoup.nodes.Node$1", document0, "org.jsoup.nodes.Node$1", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("form", document0.baseUri());
      assertEquals("form", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("form");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("form", element0.nodeName());
      assertEquals("form", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.nodes.Node$1", element0.baseUri());
      assertNotNull(element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("form", element0.nodeName());
      assertEquals("form", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.nodes.Node$1", element0.baseUri());
      
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("form");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("form", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("org.jsoup.nodes.Node$1", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("form", element1.nodeName());
      assertSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("#root", "#root");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)htmlTreeBuilder0.getActiveFormattingElement("#root");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document1, document0);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("caption", "caption");
      assertEquals("caption", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("caption", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("", document0, "S", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("caption", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("caption", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("7:VI*#8", "7:VI*#8");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7:VI*#8", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("7:VI*#8", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.currentElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.isBlock());
      assertEquals("7:VI*#8", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.isBlock());
      assertEquals("7:VI*#8", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("html", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertEquals("7:VI*#8", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.resetInsertionMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("nl*|zv3pmgg.p*", "nl*|zv3pmgg.p*");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nl*|zv3pmgg.p*", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("nl*|zv3pmgg.p*", document0.location());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeLastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromStack((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.reconstructFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Element element0 = new Element("acrolym");
      assertEquals("acrolym", element0.tagName());
      assertEquals("acrolym", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTableBody;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Character0, htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilderState$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.CData token_CData0 = new Token.CData("noframes");
      assertNotNull(token_CData0);
      
      Token.Character token_Character0 = token_CData0.asCharacter();
      assertSame(token_CData0, token_Character0);
      assertSame(token_Character0, token_CData0);
      assertNotNull(token_Character0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_Character0.type = token_TokenType0;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InCell;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Character0, htmlTreeBuilderState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_StartTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose("org.jsoup.parser.HtmlTreeBuilder");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToBefore(" o A*wy3jPthI2$*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("2(*%(>D}f*_", "2(*%(>D}f*_");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("2(*%(>D}f*_", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("2(*%(>D}f*_", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("2(*%(>D}f*_", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("2(*%(>D}f*_", document0.baseUri());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      htmlTreeBuilder0.parseFragment("", document0, "", parser0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Element element0 = new Element("SC");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("SC", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("SC", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("SC", element0, "SC", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("!^!<Oxb]N*2vo(8", (Element) null, (String) null, parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Element element0 = new Element("].4b+R3a&y ,yzoly#");
      assertEquals(0, element0.siblingIndex());
      assertEquals("].4b+R3a&y ,yzoly#", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("].4b+R3a&y ,yzoly#", element0.tagName());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.onStack(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.lastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isSpecial((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("mg<(ke");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = new Document("Zu|5G<p913qI?K$");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Zu|5G<p913qI?K$", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Zu|5G<p913qI?K$", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Elements elements0 = document0.siblingElements();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Zu|5G<p913qI?K$", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Zu|5G<p913qI?K$", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Zu|5G<p913qI?K$", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Zu|5G<p913qI?K$", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertEquals(0, htmlTreeBuilder0.stack.size());
      assertTrue(htmlTreeBuilder0.stack.isEmpty());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("httj");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("httj", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("httj", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("httj", document0, "httj", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("httj", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("httj", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm((Token.StartTag) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("httj");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("httj", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("httj", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("httj", document0, "httj", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("httj", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("httj", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "template", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      PipedReader pipedReader0 = new PipedReader(100);
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "", parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("BeforeDoctypeName");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("listing");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getFromStack("noframes");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getActiveFormattingElement("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.generateImpliedEndTags("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTableText;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("<!--", "<!--");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<!--", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<!--", document0.baseUri());
      assertNotNull(document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<!--", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<!--", document0.baseUri());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.processStartTag("isindex");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("nl*|zv3pmgg.p*", "nl*|zv3pmgg.p*");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nl*|zv3pmgg.p*", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("nl*|zv3pmgg.p*", document0.location());
      assertNotNull(document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nl*|zv3pmgg.p*", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("nl*|zv3pmgg.p*", document0.location());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Parser.parse("li", "li");
      assertEquals("li", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("li", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Elements elements0 = document0.siblingElements();
      assertEquals("li", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("li", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      assertEquals("li", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("li", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertEquals(0, htmlTreeBuilder0.stack.size());
      assertTrue(htmlTreeBuilder0.stack.isEmpty());
      
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("bgsound");
      assertEquals("bgsound", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("bgsound", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("bgsound", document0, "a", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("bgsound", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("bgsound", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("bgsound", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("bgsound", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "a";
      stringArray0[1] = "bgsound";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(2, stringArray0.length);
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("Hi4t$p@");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Hi4t$p@", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tjoot", document0, "Hi4t$p@", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Hi4t$p@", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Hi4t$p@", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("tjoot");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("Hi4t$p@");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Hi4t$p@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("tjoot");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Hi4t$p@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("Hi4t$p@", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tjoot", element0.nodeName());
      assertEquals("tjoot", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tjoot", element0, "Hi4t$p@", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Hi4t$p@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("Hi4t$p@", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tjoot", element0.nodeName());
      assertEquals("tjoot", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Hi4t$p@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("Hi4t$p@", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tjoot", element0.nodeName());
      assertEquals("tjoot", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Hi4t$p@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Hi4t$p@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("a", (Element) null, "a", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("tjoot");
      htmlTreeBuilder0.parseFragment("tjoot", document0, "tjoot", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragmentRelaxed("arZic6e", "arZic6e");
      htmlTreeBuilder0.parseFragment("arZic6e", document0, "arZic6e", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Element element0 = new Element("tU");
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parseFragment("tU", element0, "tU", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Tag tag0 = Tag.valueOf("tU");
      CDataNode cDataNode0 = new CDataNode("Te+y>B^jz3UptW,@S");
      Attributes attributes0 = cDataNode0.attributes();
      Element element1 = new Element(tag0, "tU", attributes0);
      htmlTreeBuilder0.pushActiveFormattingElements(element1);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("Hi4t$p@");
      htmlTreeBuilder0.parseFragment("tjoot", document0, "Hi4t$p@", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("Hi4t$p@");
      htmlTreeBuilder0.parseFragment("tjoot", document0, "Hi4t$p@", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = Parser.parse("<a$<&%hmOfs", "<a$<&%hmOfs");
      htmlTreeBuilder0.parseFragment("<a$<&%hmOfs", document0, "applet", parser0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Tag tag0 = Tag.valueOf("th");
      Element element0 = new Element(tag0, "th");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parseFragment("href", element0, "org.jsoup.nodes.DocumentType", parser0);
      htmlTreeBuilder0.generateImpliedEndTags("`=j*oot");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("Hi4t$p@");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tjoot", document0, "Hi4t$p@", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("tjoot");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("aption", "aption");
      Elements elements0 = document0.siblingElements();
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("aption");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("tjoot");
      Element element0 = document0.createElement("tjoot");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tjoot", element0, "tjoot", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      String[] stringArray0 = new String[7];
      stringArray0[3] = "caption";
      stringArray0[5] = "caption";
      stringArray0[6] = "tjoot";
      boolean boolean0 = htmlTreeBuilder0.inScope("caption", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Tag tag0 = Tag.valueOf("center", (ParseSettings) null);
      Element element0 = new Element(tag0, "body");
      htmlTreeBuilder0.parseFragment("XH\"_ V/eL(9)>;", element0, "body", parser0);
      htmlTreeBuilder0.insertStartTag("body");
      htmlTreeBuilder0.inScope("XH\"_ V/eL(9)>;");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("head", "head");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("[4*2IC%PRa)", document0, "head", parser0);
      htmlTreeBuilder0.pop();
      boolean boolean0 = htmlTreeBuilder0.inTableScope("+Yi!g}T)j o%%X`.F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Element element0 = new Element("html");
      List<Node> list0 = Parser.parseFragment("form", element0, "html");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Element element0 = new Element("frameset");
      List<Node> list0 = Parser.parseFragment("frameset", element0, "frameset");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Element element0 = new Element("head");
      List<Node> list0 = Parser.parseFragment("head", element0, "head");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Tag tag0 = Tag.valueOf("table");
      Element element0 = new Element(tag0, "table");
      List<Node> list0 = Parser.parseFragment("table", element0, "table");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Element element0 = new Element("colgroup");
      List<Node> list0 = Parser.parseFragment("colgroup", element0, "colgroup");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Element element0 = new Element("caption");
      List<Node> list0 = Parser.parseFragment("caption", element0, "selec");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Element element0 = new Element("thead");
      List<Node> list0 = Parser.parseFragment("thead", element0, "select");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Element element0 = new Element("tbody");
      List<Node> list0 = Parser.parseFragment("tbody", element0, "tbody");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Tag tag0 = Tag.valueOf("tr");
      Element element0 = new Element(tag0, "d\r3");
      List<Node> list0 = Parser.parseFragment("tr", element0, "d\r3");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Element element0 = new Element("td");
      List<Node> list0 = Parser.parseFragment("td", element0, "tjoot");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("2kHe\"G2\"|");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("^oFt", document0, "^oFt", parser0);
      htmlTreeBuilder0.popStackToBefore("^oFt");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("     ", "     ");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("Timeout millseconds must be 0 (infinite) or greater", "applet");
      Element element0 = htmlTreeBuilder0.insertStartTag("org.jsoup.select.Selector$SelectorParseException");
      htmlTreeBuilder0.insertOnStackAfter(element0, document0);
      Element element1 = htmlTreeBuilder0.aboveOnStack(document0);
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("bgsound");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("bgsound", document0, "a", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("RF", "RF");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("httj", "httj");
      htmlTreeBuilder0.parseFragment("UF", document0, "httj", parser0);
      Element element0 = htmlTreeBuilder0.currentElement();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("httj", "httj");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Element element0 = new Element("SC");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("noframes", element0, "%jk\"ool", parser0);
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Element element0 = new Element("select");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("select", element0, "select", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.popStackToBefore("select");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("httj", "httj");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parseFragment("httj", document0, "httj", parser0);
      htmlTreeBuilder0.popStackToBefore("httj");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("bgsound");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("bgsound", document0, "bgsound", parser0);
      htmlTreeBuilder0.popStackToClose("bgsound");
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("form");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("org.jsoup.nodes.Node$1", document0, "org.jsoup.nodes.Node$1", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("tjoot");
      htmlTreeBuilder0.parseFragment("tjoot", document0, "tjoot", parser0);
      htmlTreeBuilder0.processStartTag("tjoot");
      Element element0 = htmlTreeBuilder0.getFromStack("tjoot");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("nl*|zv3pmgg.p*", "nl*|zv3pmgg.p*");
      StringReader stringReader0 = new StringReader("table");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      htmlTreeBuilder0.insert(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Element element0 = new Element("tU");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parseFragment("tU", element0, "tU", parser0);
      htmlTreeBuilder0.setFosterInserts(true);
      boolean boolean0 = htmlTreeBuilder0.processStartTag("br");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = new Document("style");
      htmlTreeBuilder0.parseFragment("}@ x0S&BYoGoO96", document0, "}@ x0S&BYoGoO96", parser0);
      htmlTreeBuilder0.processStartTag("style");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("frameset", "acrolym");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("acrolym", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, false);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Element element0 = new Element("tfoot");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Parser parser1 = parser0.setTrackErrors(100);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tfoot", element0, "tfoot", parser1);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("Hi4t$p@");
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("n5");
      FormElement formElement0 = new FormElement(tag0, "n5", (Attributes) null);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("kd?AVm", formElement0, "c?t8^|T_|:", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
      htmlTreeBuilder0.reconstructFormattingElements();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "n5";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Element element0 = new Element("plaintext");
      List<Node> list0 = Parser.parseFragment("plaintext", element0, "plaintext");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Element element0 = new Element("noscript");
      List<Node> list0 = Parser.parseFragment("noscript", element0, "noscript");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Element element0 = new Element("script");
      List<Node> list0 = Parser.parseFragment("script", element0, "script");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("08|XeFw", "bgsound");
      Element element0 = document0.createElement("noembed");
      htmlTreeBuilder0.parseFragment("noembed", element0, "noembed", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("noembed");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("bgsound");
      Parser parser0 = Parser.htmlParser();
      Element element0 = document0.createElement("textarea");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("5", element0, "k:CAuXNlCrq.i!1z", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inTableScope((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      StringReader stringReader0 = new StringReader("table");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("tjoot");
      htmlTreeBuilder0.parseFragment("tjoot", document0, "tjoot", parser0);
      htmlTreeBuilder0.processEndTag("");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("bgsound");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFosterInserts(true);
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("head", "head");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Tag tag0 = Tag.valueOf("tfoot");
      Element element0 = new Element(tag0, "tfoot");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("noembed");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Element element0 = new Element("SC");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("noframes", element0, "%jk\"ool", parser0);
      htmlTreeBuilder0.processStartTag("noframes");
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("tjoot");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("Hi4t$p@");
      htmlTreeBuilder0.parseFragment("tjoot", document0, "Hi4t$p@", parser0);
      Token.CData token_CData0 = new Token.CData("tjoot");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterHead;
      boolean boolean0 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Tag tag0 = Tag.valueOf("th");
      Element element0 = new Element(tag0, "th");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parseFragment("href", element0, "org.jsoup.nodes.DocumentType", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("th", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
      htmlTreeBuilder0.replaceOnStack(formElement0, formElement0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("caption", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }
}
