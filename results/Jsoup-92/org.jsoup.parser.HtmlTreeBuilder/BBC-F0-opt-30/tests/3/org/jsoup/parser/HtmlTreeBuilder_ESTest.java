/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:32:23 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      
      Element element0 = document0.createElement("o3`5js'b");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("o3`5js'b", element0.nodeName());
      assertEquals("o3`5js'b", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(element0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("tfoot");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tfoot", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("tfoot", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tfoot", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("tfoot", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tfoot", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("tfoot", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tfoot", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("table");
      assertNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("h4");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Data", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Data", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Data", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Data", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Data", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Data", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Data", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Data", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Data", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("t");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "t", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("t", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = Parser.parseBodyFragment("t", "ODn");
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertEquals("ODn", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("ODn", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("t", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t", document0.baseUri());
      assertFalse(document0.isBlock());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("ODn", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("ODn", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("h4");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Data", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Data", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Data", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Data", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Data", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Data", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Data", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(document1);
      assertSame(document1, document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Data", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Data", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("select", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      
      htmlTreeBuilder0.insert(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InSelectInTable;
      htmlTreeBuilder0.transition(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.newPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.framesetOk(true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("s");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "s", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("s", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("s", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("s", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("s", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("s", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("s", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("5QNL-0:w");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "5QNL-0:w", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("5QNL-0:w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("5QNL-0:w", document0.location());
      
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      String string0 = htmlTreeBuilder0.toString();
      assertNotNull(string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "q*{4SSt^/VMP5E");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("q*{4SSt^/VMP5E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q*{4SSt^/VMP5E", document0.location());
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("summary", document0, "8`", parser0);
      assertNotNull(list0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("q*{4SSt^/VMP5E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q*{4SSt^/VMP5E", document0.location());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.state();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("th");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ".(U/jc=oeN9l", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(".(U/jc=oeN9l", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(".(U/jc=oeN9l", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("h5");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("h5", element0.tagName());
      assertEquals(".(U/jc=oeN9l", element0.baseUri());
      assertEquals("h5", element0.nodeName());
      assertTrue(element0.isBlock());
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("h5", element0.tagName());
      assertEquals(".(U/jc=oeN9l", element0.baseUri());
      assertEquals("h5", element0.nodeName());
      assertTrue(element0.isBlock());
      
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(element1);
      assertSame(element1, element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("h5", element1.nodeName());
      assertEquals("h5", element1.tagName());
      assertEquals(".(U/jc=oeN9l", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("h4");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Data", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Data", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Data", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("me/nu", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      assertNotNull(element0);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("me/nu", element0.tagName());
      assertEquals("Data", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("me/nu", element0.nodeName());
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("me/nu", element0.tagName());
      assertEquals("Data", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("me/nu", element0.nodeName());
      
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(element1);
      assertSame(element1, element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("me/nu", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("me/nu", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("Data", element1.baseUri());
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = htmlTreeBuilder0.insertStartTag(":has");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(":has", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(":has", element0.nodeName());
      
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(":has", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(":has", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.Doctype token_Doctype0 = tokeniser0.doctypePending;
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InHead;
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Element element0 = new Element("pubSysKey");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("pubSysKey", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("pubSysKey", element0.tagName());
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("nav", element0, "org.jsoup.select.CombiningEvaluator$And", parser0);
      assertNotNull(list0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("pubSysKey", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("pubSysKey", element0.tagName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      boolean boolean0 = htmlTreeBuilder0.process(token_EOF0);
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("I.m1|VxzJ5_;");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Ox_CS", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ox_CS", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ox_CS", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.Tag token_Tag0 = token_StartTag0.name("tfoot");
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      boolean boolean0 = htmlTreeBuilder0.process(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("th");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "th", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("th", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("th", document0.location());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("th");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("th", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("th", element0.baseUri());
      assertEquals("th", element0.nodeName());
      
      htmlTreeBuilder0.replaceOnStack(element0, document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("th", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("th", document0.location());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("th", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("th", element0.baseUri());
      assertEquals("th", element0.nodeName());
      
      Document document1 = (Document)htmlTreeBuilder0.pop();
      assertNotNull(document1);
      assertSame(document1, document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("th", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("th", document1.location());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("col");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "j! M)Soa\"@MX}%\u0004yE", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("j! M)Soa\"@MX}%\u0004yE", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("j! M)Soa\"@MX}%\u0004yE", document0.baseUri());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("thead");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("thead", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("j! M)Soa\"@MX}%\u0004yE", element0.baseUri());
      assertEquals("thead", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = htmlTreeBuilder0.pop();
      assertNotNull(element1);
      assertSame(element1, element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("thead", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("thead", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("j! M)Soa\"@MX}%\u0004yE", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.originalState();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("`_MvA]:G^-[ch");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "`_MvA]:G^-[ch", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("`_MvA]:G^-[ch", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("`_MvA]:G^-[ch", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("h3");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals("h3", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("`_MvA]:G^-[ch", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("h3", element0.tagName());
      
      boolean boolean0 = htmlTreeBuilder0.onStack(element0);
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals("h3", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("`_MvA]:G^-[ch", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("h3", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      boolean boolean0 = htmlTreeBuilder0.onStack(document0);
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("h");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "h", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("h", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("h", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("tfoot");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tfoot", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals("tfoot", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tfoot", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("table");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, element0.siblingIndex());
      assertEquals("table", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("table", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tfoot", element0.baseUri());
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, element0.siblingIndex());
      assertEquals("table", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("table", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tfoot", element0.baseUri());
      
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertNotNull(element1);
      assertSame(element1, element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, element1.siblingIndex());
      assertEquals("tfoot", element1.baseUri());
      assertEquals("table", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("table", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("a~UdtT]*q~>_&3oJ`nCO");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "a~UdtT]*q~>_&3oJ`nCO", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a~UdtT]*q~>_&3oJ`nCO", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("a~UdtT]*q~>_&3oJ`nCO", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a~UdtT]*q~>_&3oJ`nCO", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("a~UdtT]*q~>_&3oJ`nCO", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)htmlTreeBuilder0.lastFormattingElement();
      assertNotNull(document1);
      assertSame(document1, document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("a~UdtT]*q~>_&3oJ`nCO", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("a~UdtT]*q~>_&3oJ`nCO", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("h5");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "h5", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("h5", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("h5", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("form");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("form", element0.tagName());
      assertEquals("form", element0.nodeName());
      assertEquals("h5", element0.baseUri());
      assertTrue(element0.isBlock());
      
      boolean boolean0 = htmlTreeBuilder0.isSpecial(element0);
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("form", element0.tagName());
      assertEquals("form", element0.nodeName());
      assertEquals("h5", element0.baseUri());
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      boolean boolean0 = htmlTreeBuilder0.isSpecial(document0);
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("s");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "s", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("s", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("s", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("s", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("s", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("s", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("s", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("biv");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "biv", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("biv", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("biv", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("biv", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("biv", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("jv{)+A!j#]E{5?\"", "td");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("td", document0.baseUri());
      assertEquals("td", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      Parser parser0 = new Parser(xmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("jv{)+A!j#]E{5?\"", document0, "^7k", parser0);
      assertNotNull(list0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("td", document0.baseUri());
      assertEquals("td", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("org.jsoup.select.StructuralEvaluator$PreviousSibling");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "meta");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("meta", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("meta", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("org.jsoup.select.StructuralEvaluator$PreviousSibling", document0, "6:\u0002l", parser0);
      assertNotNull(list0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("meta", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("meta", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("tfoot", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, true);
      assertNotNull(formElement0);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, formElement0.siblingIndex());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("6:\u0002l", formElement0.baseUri());
      assertEquals("tfoot", formElement0.tagName());
      assertTrue(formElement0.isBlock());
      assertEquals("tfoot", formElement0.nodeName());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("th");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "th", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("th", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("th", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("th");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("th", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("th", element0.baseUri());
      assertEquals("th", element0.nodeName());
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("select", attributes0);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, attributes0.size());
      
      Element element1 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotSame(element1, element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, attributes0.size());
      assertEquals(0, element1.siblingIndex());
      assertEquals("th", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("select", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("select", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("h4");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Data", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Data", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Data", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("menu", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      assertNotNull(element0);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("menu", element0.nodeName());
      assertEquals("Data", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("menu", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("h4");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Data", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Data", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Data", document0.baseUri());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("Data");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("Data", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Data", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("Data", element0.nodeName());
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("_1rk[1ed", attributes0);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, attributes0.size());
      
      Element element1 = htmlTreeBuilder0.insert(token_StartTag1);
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotSame(element1, element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, attributes0.size());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("Data", element1.baseUri());
      assertEquals("_1rk[1ed", element1.tagName());
      assertEquals("_1rk[1ed", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("h4");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Data", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Data", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Data", document0.location());
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("_1rk[1ed", attributes0);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, attributes0.size());
      
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertNotNull(element0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, attributes0.size());
      assertEquals("Data", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("_1rk[1ed", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("_1rk[1ed", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("h4");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Data", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("Data", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Data", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("menu", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertNotNull(element0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("menu", element0.nodeName());
      assertEquals("menu", element0.tagName());
      assertEquals("Data", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "TreeBuilder{currentToken=", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("TreeBuilder{currentToken=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("TreeBuilder{currentToken=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("base");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.childNodeSize());
      assertEquals("base", element0.nodeName());
      assertEquals("TreeBuilder{currentToken=", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("base", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("base");
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("I{?yKPp;lKA");
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("h4");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "h4", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("h4", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("h4", document0.baseUri());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("script");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("h4", element0.baseUri());
      assertEquals("script", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("script", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      
      String[] stringArray0 = new String[5];
      stringArray0[2] = "script";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = Parser.parseBodyFragment("", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("U=C", document0, "R^xtB`Gh(3/FFhcBX", parser0);
      assertNotNull(list0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.popStackToClose("G%B]+o^wP0cO");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String[] stringArray0 = new String[6];
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("`_MvA]:G^-[ch");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "`_MvA]:G^-[ch", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("`_MvA]:G^-[ch", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("`_MvA]:G^-[ch", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("link");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("`_MvA]:G^-[ch", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("link", element0.nodeName());
      assertEquals("link", element0.tagName());
      
      boolean boolean0 = htmlTreeBuilder0.inScope("link", (String[]) null);
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("tfoot");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tfoot", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals("tfoot", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tfoot", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("tfoot");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("tfoot", element0.tagName());
      assertEquals("tfoot", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("tfoot", element0.baseUri());
      assertTrue(element0.isBlock());
      
      boolean boolean0 = htmlTreeBuilder0.inScope("tfoot");
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      boolean boolean0 = htmlTreeBuilder0.inScope("");
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("th");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "th", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("th", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("th", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("th");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.childNodeSize());
      assertEquals("th", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("th", element0.baseUri());
      assertEquals("th", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("th");
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("th");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "th", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("th", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("th", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("h5");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("h5", element0.tagName());
      assertEquals("th", element0.baseUri());
      assertEquals("h5", element0.nodeName());
      assertTrue(element0.isBlock());
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("h5");
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNull(arrayList0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "q*{4SSt^/VMP5E");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("q*{4SSt^/VMP5E", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("q*{4SSt^/VMP5E", document0.location());
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("summary", document0, "8`", parser0);
      assertNotNull(list0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("q*{4SSt^/VMP5E", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("q*{4SSt^/VMP5E", document0.location());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      htmlTreeBuilder0.popStackToClose("summary");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNotNull(arrayList0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNotNull(arrayList0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNull(list0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Parser.parse("UxI{1(mtlM+>7;", "UxI{1(mtlM+>7;");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("UxI{1(mtlM+>7;", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("UxI{1(mtlM+>7;", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("#document", document0.nodeName());
      assertEquals("UxI{1(mtlM+>7;", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("UxI{1(mtlM+>7;", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)htmlTreeBuilder0.getHeadElement();
      assertNotNull(document1);
      assertSame(document1, document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("UxI{1(mtlM+>7;", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("UxI{1(mtlM+>7;", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("U<} fe=KbpMP}-]", "U<} fe=KbpMP}-]");
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("U<} fe=KbpMP}-]", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("U<} fe=KbpMP}-]", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Element element0 = htmlTreeBuilder0.getFromStack("+.}6Fj/!WE?*7!#");
      assertNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("h4");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Data", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Data", document0.baseUri());
      assertEquals("Data", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = htmlTreeBuilder0.parse(stringReader0, "h3", parser0);
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("h3", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("h3", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("h3");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.childNodeSize());
      assertEquals("h3", element0.tagName());
      assertEquals("h3", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("h3", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = htmlTreeBuilder0.getFromStack("h3");
      assertNotNull(element1);
      assertSame(element1, element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("h3", element1.baseUri());
      assertEquals("h3", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("h3", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("`_MvA]:G^-[ch");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "`_MvA]:G^-[ch", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("`_MvA]:G^-[ch", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`_MvA]:G^-[ch", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("base");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.childNodeSize());
      assertEquals("base", element0.nodeName());
      assertEquals("`_MvA]:G^-[ch", element0.baseUri());
      assertEquals("base", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      
      Element element1 = htmlTreeBuilder0.getFromStack("base");
      assertNotNull(element1);
      assertSame(element1, element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, element1.siblingIndex());
      assertEquals("base", element1.tagName());
      assertEquals("`_MvA]:G^-[ch", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("base", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("big");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tq&IMB/a`tq", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tq&IMB/a`tq", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tq&IMB/a`tq", document0.location());
      
      Element element0 = htmlTreeBuilder0.getFromStack("body");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("tq&IMB/a`tq", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      assertFalse(parseSettings0.preserveTagCase());
      
      Tag tag0 = Tag.valueOf("aD0hO;&}RG|", parseSettings0);
      assertNotNull(tag0);
      assertFalse(parseSettings0.preserveTagCase());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("ad0ho;&}rg|", tag0.getName());
      assertEquals("ad0ho;&}rg|", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      
      CDataNode cDataNode0 = new CDataNode("aD0hO;&}RG|");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "aD0hO;&}RG|", attributes0);
      assertNotNull(formElement0);
      assertFalse(parseSettings0.preserveTagCase());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("ad0ho;&}rg|", tag0.getName());
      assertEquals("ad0ho;&}rg|", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ad0ho;&}rg|", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("ad0ho;&}rg|", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("aD0hO;&}RG|", formElement0.baseUri());
      
      htmlTreeBuilder0.setFormElement(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parseSettings0.preserveTagCase());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("ad0ho;&}rg|", tag0.getName());
      assertEquals("ad0ho;&}rg|", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ad0ho;&}rg|", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("ad0ho;&}rg|", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("aD0hO;&}RG|", formElement0.baseUri());
      
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertNotNull(formElement1);
      assertSame(formElement1, formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(formElement1.isBlock());
      assertEquals("ad0ho;&}rg|", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("ad0ho;&}rg|", formElement1.tagName());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("aD0hO;&}RG|", formElement1.baseUri());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("biv");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "biv", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("biv", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("biv", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("biv", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals("biv", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertNotNull(document1);
      assertSame(document1, document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("biv", document1.baseUri());
      assertEquals("biv", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("I");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      htmlTreeBuilder0.initialiseParse(stringReader0, "I", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("I", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("I", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      assertTrue(parseSettings0.preserveTagCase());
      
      Tag tag0 = Tag.valueOf("meta", parseSettings0);
      assertNotNull(tag0);
      assertTrue(parseSettings0.preserveTagCase());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertEquals("meta", tag0.getName());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("meta", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      
      Element element0 = new Element(tag0, "UTF-");
      assertNotNull(element0);
      assertTrue(parseSettings0.preserveTagCase());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertEquals("meta", tag0.getName());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("meta", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertEquals("UTF-", element0.baseUri());
      assertEquals("meta", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("meta", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("meta", element0, "meta", parser0);
      assertNotNull(list0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertTrue(parseSettings0.preserveTagCase());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertEquals("meta", tag0.getName());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("meta", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertEquals("UTF-", element0.baseUri());
      assertEquals("meta", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("meta", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNotNull(string0);
      assertEquals("meta", string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("tfoot");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tfoot", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tfoot", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("tfoot", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("table");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals("table", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("table", element0.nodeName());
      assertEquals("tfoot", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals("table", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("table", element0.nodeName());
      assertEquals("tfoot", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("table");
      assertNotNull(element1);
      assertSame(element1, element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element1.hasParent());
      assertEquals("table", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("table", element1.nodeName());
      assertEquals("tfoot", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("^Epw0k`^j-!sf]H");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X&g%p\"0", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals("X&g%p\"0", document0.location());
      assertEquals("X&g%p\"0", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals("X&g%p\"0", document0.location());
      assertEquals("X&g%p\"0", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)htmlTreeBuilder0.getActiveFormattingElement("#root");
      assertNotNull(document1);
      assertSame(document1, document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("X&g%p\"0", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("X&g%p\"0", document1.location());
      assertEquals("#root", document1.tagName());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parseSettings0.preserveTagCase());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("`_MvA]:G^-[ch");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "`_MvA]:G^-[ch", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("`_MvA]:G^-[ch", document0.baseUri());
      assertEquals("`_MvA]:G^-[ch", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("link");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("`_MvA]:G^-[ch", element0.baseUri());
      assertEquals("link", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("link", element0.tagName());
      assertTrue(element0.hasParent());
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("`_MvA]:G^-[ch", element0.baseUri());
      assertEquals("link", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("link", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("`_MvA]:G^-[ch", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("th");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "th", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("th", document0.location());
      assertEquals("th", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("th");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("th", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("th", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("th", element0.baseUri());
      
      htmlTreeBuilder0.replaceOnStack(element0, document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("th", document0.location());
      assertEquals("th", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("th", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("th", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("th", element0.baseUri());
      
      Element element1 = htmlTreeBuilder0.insertStartTag("link");
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element1, element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element1.hasParent());
      assertEquals("link", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("th", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("link", element1.tagName());
      assertTrue(element1.isBlock());
      
      Document document1 = (Document)htmlTreeBuilder0.aboveOnStack(element1);
      assertFalse(element1.equals((Object)element0));
      assertNotNull(document1);
      assertNotSame(element1, element0);
      assertSame(document1, document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element1.hasParent());
      assertEquals("link", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("th", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("link", element1.tagName());
      assertTrue(element1.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("th", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("th", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("]h'I");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      htmlTreeBuilder0.initialiseParse(stringReader0, "(HR2l`k?=-P$!P?A", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("]h'I");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals("]h'i", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("]h'i", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("(HR2l`k?=-P$!P?A", element0.baseUri());
      
      htmlTreeBuilder0.push(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals("]h'i", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("]h'i", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("(HR2l`k?=-P$!P?A", element0.baseUri());
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals("]h'i", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("]h'i", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("(HR2l`k?=-P$!P?A", element0.baseUri());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("]h'i", element1.nodeName());
      assertEquals("(HR2l`k?=-P$!P?A", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("]h'i", element1.tagName());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("th");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "th", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("th", document0.location());
      assertEquals("th", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("th");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("th", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("th", element0.baseUri());
      assertEquals("th", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.after((Node) document0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("th", document0.location());
      assertEquals("th", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("th", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("th", element0.baseUri());
      assertEquals("th", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("th", element1.nodeName());
      assertEquals("th", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("th", element1.tagName());
      assertTrue(element1.hasParent());
      
      // Undeclared exception!
      htmlTreeBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.resetInsertionMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Parser.parse("D*z4", "+TD*k >l>1gT@*G+`V");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("+TD*k >l>1gT@*G+`V", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("+TD*k >l>1gT@*G+`V", document0.location());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeLastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      HtmlTreeBuilder htmlTreeBuilder1 = new HtmlTreeBuilder();
      assertFalse(htmlTreeBuilder1.equals((Object)htmlTreeBuilder0));
      assertNotNull(htmlTreeBuilder1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder1.removeFromStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.reconstructFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("B@oPZ)%G0!fqK", "B@oPZ)%G0!fqK");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("B@oPZ)%G0!fqK", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("B@oPZ)%G0!fqK", document0.baseUri());
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InCaption;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process((Token) null, htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilderState$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Initial;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EOF0, htmlTreeBuilderState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.EndTag;
      token_EOF0.type = token_TokenType0;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Initial;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EOF0, htmlTreeBuilderState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process((Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("I.m1|VxzJ5_;");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Ox_CS", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ox_CS", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Ox_CS", document0.baseUri());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.Tag token_Tag0 = token_StartTag0.name((String) null);
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Element element0 = new Element("pubSysKey");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("pubSysKey", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("pubSysKey", element0.tagName());
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("nav", element0, "org.jsoup.select.CombiningEvaluator$And", parser0);
      assertNotNull(list0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("pubSysKey", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("pubSysKey", element0.tagName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      Token token0 = token_EOF0.reset();
      assertNotNull(token0);
      assertSame(token_EOF0, token0);
      assertSame(token0, token_EOF0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
      token0.type = token_TokenType0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose("td");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToBefore("org.jsoup.select.Evaluator$IsFirstOfType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "q*{4SSt^/VMP5E");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("q*{4SSt^/VMP5E", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("q*{4SSt^/VMP5E", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("summary", document0, "8`", parser0);
      assertNotNull(list0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("q*{4SSt^/VMP5E", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("q*{4SSt^/VMP5E", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      htmlTreeBuilder0.popStackToClose("summary");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("h4");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Dat9", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Dat9", document0.baseUri());
      assertEquals("Dat9", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Dat9", document0.baseUri());
      assertEquals("Dat9", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Dat9", document1.baseUri());
      assertEquals("Dat9", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      
      // Undeclared exception!
      htmlTreeBuilder0.parseFragment("h2", document0, "org.jsoup.nodes.LeafNode", parser0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Document.createShell("fieldset");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("fieldset", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("fieldset", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment((String) null, document0, "H>tiT*K\">,2", parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("html");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "}RhX{M,g&.d", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("}RhX{M,g&.d", document0.baseUri());
      assertEquals("}RhX{M,g&.d", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("inert", document0, (String) null, parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.onStack((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.lastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "|nc(>,&y3iK", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|nc(>,&y3iK", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("|nc(>,&y3iK", document0.location());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Document.createShell("InCaptio");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("InCaptio", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("InCaptio", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      CDataNode cDataNode0 = new CDataNode((String) null);
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(cDataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = new Document("noscript");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("noscript", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("noscript", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.getElementsByIndexEquals(1111);
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("noscript", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("noscript", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("noscript", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("noscript", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertTrue(htmlTreeBuilder0.stack.isEmpty());
      assertEquals(0, htmlTreeBuilder0.stack.size());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("h4");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Data", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Data", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Data", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm((Token.StartTag) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("kx/4\"K.kf\\a>p7M");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "script", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("script", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("script", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("kx/4\"K.kf\\a>p7M");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("kx/4\"k.kf\\a>p7m", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("script", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("kx/4\"k.kf\\a>p7m", element0.nodeName());
      
      Document document1 = (Document)document0.text("script");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("script", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("script", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("script", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("script", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("ug");
      assertNotNull(stringReader0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "ug", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ug", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ug", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("head");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(stringReader0, "head", parser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(stringReader0, "", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "h6", parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("G");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("m=kS,pF.|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getFromStack("+.}6Fj/!WE?*7!#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getActiveFormattingElement("u_xMc<{,:vMHAZYFdK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("rt");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "B.o", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("B.o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("B.o", document0.location());
      
      htmlTreeBuilder0.popStackToBefore("B.o");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.generateImpliedEndTags("title");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTableBody;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = new Document("section");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("section", document0.location());
      assertEquals("section", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("I");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      htmlTreeBuilder0.initialiseParse(stringReader0, "I", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("I");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("i", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("I", element0.baseUri());
      assertEquals("i", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("th");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "noscript", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("noscript", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("noscript", document0.location());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("basefont");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("basefont", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("noscript", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("basefont", element0.tagName());
      
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("tfoot");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tfoot", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("tfoot", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tfoot", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      htmlTreeBuilder0.setFosterInserts(true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      CharacterReader characterReader0 = htmlTreeBuilder0.reader;
      assertNotNull(characterReader0);
      assertEquals(5, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(5, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      assertNotNull(token_Comment0);
      
      htmlTreeBuilder0.insert(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(5, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("Qf?nW{>");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Qf?nW{>", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Qf?nW{>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Qf?nW{>", document0.location());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("table");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals("Qf?nW{>", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("table", element0.nodeName());
      assertEquals("table", element0.tagName());
      
      element0.remove();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("Qf?nW{>", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("table", element0.nodeName());
      assertEquals("table", element0.tagName());
      assertFalse(element0.hasParent());
      
      htmlTreeBuilder0.insertInFosterParent(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals("Qf?nW{>", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("table", element0.nodeName());
      assertEquals("table", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("noembed");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "noembed", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("noembed", document0.location());
      assertEquals("noembed", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("noembed");
      assertNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("a~UdtT]*q~>_&3oJ`nCO");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "_8boyt{_xFjb8", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("_8boyt{_xFjb8", document0.baseUri());
      assertEquals("_8boyt{_xFjb8", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("Mn';uDFKmoi%x");
      assertNotNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("Mn';uDFKmoi%x", element0.tagName());
      assertEquals("_8boyt{_xFjb8", element0.baseUri());
      assertEquals("Mn';uDFKmoi%x", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("Mn';uDFKmoi%x", element0.tagName());
      assertEquals("_8boyt{_xFjb8", element0.baseUri());
      assertEquals("Mn';uDFKmoi%x", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("_8boyt{_xFjb8", document0.baseUri());
      assertEquals("_8boyt{_xFjb8", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("col");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "j! M)Soa\"@MX}%\u0004yE", parser0);
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("j! M)Soa\"@MX}%\u0004yE", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("j! M)Soa\"@MX}%\u0004yE", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("j! M)Soa\"@MX}%\u0004yE", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("j! M)Soa\"@MX}%\u0004yE", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("t");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "t", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("`_MvA]:G^-[ch");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "`_MvA]:G^-[ch", parser0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("jKO3K!Nih}=<s>!eI", document0, "p", parser0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ftrm");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "GC\"", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("ftrm");
      element0.attr("GC\"", "GC\"");
      Element element1 = htmlTreeBuilder0.insertStartTag("ftrm");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(1, element0.childNodeSize());
      
      htmlTreeBuilder0.pushActiveFormattingElements(element1);
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("ei*");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "ei*", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tfoot");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tfoot", parser0);
      Element element0 = document0.body();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$=5m3A<^^nFG{6k1");
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Mw7yC]f", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("th");
      htmlTreeBuilder0.parse(stringReader0, "th", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("noscript");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "noscript", parser0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("rt");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "B.o", parser0);
      htmlTreeBuilder0.insertStartTag("rt");
      htmlTreeBuilder0.generateImpliedEndTags("Data");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.parseFragment("html", document0, "89$6rd;", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("html");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "a{", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("a{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("html");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "String input must not be null", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("caption");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("button");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parse(stringReader0, "WY8", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("button");
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("WY8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("th");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "th", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inScope("th", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragment("", "");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("U=C", document0, "R^xtB`Gh(3/FFhcBX", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.popStackToClose("G%B]+o^wP0cO");
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("TreeBuilder{currentToken=org.jsoup.parser.Token$EOF@52, state=InBody, currentElement=<html>\n U=C\n</html>}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parse(stringReader0, "B2'_", parser0);
      htmlTreeBuilder0.clearStackToTableContext();
      Element element0 = htmlTreeBuilder0.currentElement();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("Data", element0, "InTableText", parser0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.insertStartTag("frameset");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Element element0 = htmlTreeBuilder0.getHeadElement();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("script", element0, "muga#0j$Fvd|?E=X,|e", parser0);
      assertEquals(1, list0.size());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = new Document("`_MvA]:G^-[ch");
      Element element0 = document0.createElement("colgroup");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("`_MvA]:G^-[ch", element0, "base", parser0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("a~UdtT]*q~>_&3oJCO");
      htmlTreeBuilder0.parse(stringReader0, "html", parser0);
      htmlTreeBuilder0.insertStartTag("caption");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tfoot");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "tfoot", parser0);
      htmlTreeBuilder0.insertStartTag("tfoot");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("col");
      htmlTreeBuilder0.parse(stringReader0, "j! M)Soa\"@MX}%\u0004yE", parser0);
      htmlTreeBuilder0.insertStartTag("thead");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("hAj{0f6A1T");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "org.jsoup.nodes.Attribute", parser0);
      htmlTreeBuilder0.insertStartTag("tbody");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = Document.createShell("tr");
      Element element0 = document0.createElement("tr");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("S.", element0, "S.", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("th");
      htmlTreeBuilder0.parse(stringReader0, "th", parser0);
      htmlTreeBuilder0.insertStartTag("th");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("th");
      htmlTreeBuilder0.parse(stringReader0, "th", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("th");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("$L=P|L(eYI0,", element0, "link", parser0);
      assertEquals(1, list0.size());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Element element0 = document0.createElement("td");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("td", element0, "'$9foO}-", parser0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Element element0 = document0.createElement("select");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("select", element0, "noscript", parser0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("noscript");
      Elements elements0 = document0.getElementsByIndexEquals(1111);
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("h4");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "mzrKS^ur%XyWZ~", parser0);
      Element element0 = htmlTreeBuilder0.currentElement();
      htmlTreeBuilder0.insertOnStackAfter(element0, (Element) null);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("noscript");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "noscript", parser0);
      Element element0 = document0.body();
      htmlTreeBuilder0.insertStartTag("}VvCK:qk");
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertEquals(2, element0.childNodeSize());
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tfoot");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "tfoot", parser0);
      htmlTreeBuilder0.insertStartTag("table");
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragment("", "");
      htmlTreeBuilder0.parseFragment("U=C", document0, "R^xtB`Gh(3/FFhcBX", parser0);
      htmlTreeBuilder0.popStackToClose("G%B]+o^wP0cO");
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.popStackToBefore("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("`_MvA]:G^-[ch");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "`_MvA]:G^-[ch", parser0);
      htmlTreeBuilder0.insertStartTag("base");
      String[] stringArray0 = new String[4];
      stringArray0[1] = "base";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.popStackToClose((String) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = new Document("");
      List<Node> list0 = htmlTreeBuilder0.parseFragment(";z${W{|H2)", document0, ".m~jCr", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tfoot");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "tfoot", parser0);
      htmlTreeBuilder0.setFosterInserts(true);
      htmlTreeBuilder0.insertStartTag("table");
      Element element0 = htmlTreeBuilder0.insertStartTag("br");
      assertEquals(2, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("<r");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      htmlTreeBuilder0.insertStartTag("style");
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.Character token_Character0 = tokeniser0.charPending;
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.insertStartTag("script");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "a{", parser0);
      Token.CData token_CData0 = new Token.CData("{&rs");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Initial;
      boolean boolean0 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("Ox_CS", (Attributes) null);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("wbr");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "wbr", parser0);
      Attributes attributes0 = new Attributes();
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      token_StartTag0.selfClosing = true;
      token_StartTag0.nameAttr("wbr", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("h4");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "h4", parser0);
      Attributes attributes0 = new Attributes();
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      token_StartTag0.selfClosing = true;
      token_StartTag0.nameAttr("l;X1TAIigW^_N", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("h4");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "h4", parser0);
      Attributes attributes0 = new Attributes();
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      token_StartTag0.selfClosing = true;
      token_StartTag0.nameAttr("h4", attributes0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InCaption;
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag0, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      parser0.setTrackErrors(100);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InRow;
      htmlTreeBuilder0.error(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.StructuralEvaluator$PreviousSibling");
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput((Reader) stringReader0, "meta");
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("2_ZHIx!^\">]");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("L", formElement0, "G%B]+o^wP0cO", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Element element0 = document0.createElement("plaintext");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("@=0whTXVAqJeD", element0, "noscript", parser0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("pubSysKey");
      Document document0 = parser0.parseInput((Reader) stringReader0, "-P/ 2`&z$nwuv(\"c#");
      Element element0 = document0.createElement("noscript");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("pubSysKey", element0, "3$g^6y|`w", parser0);
      assertEquals(1, list0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("h4");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Data", parser0);
      Element element0 = document0.createElement("script");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("time", element0, "time", parser0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = Document.createShell("BeforeAttributeValue");
      Element element0 = document0.createElement("style");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("S.", element0, "table", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("n-d");
      htmlTreeBuilder0.parse(stringReader0, "I.m1|VxzJ5_;", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("title");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("n-d", element0, "n-d", parser0);
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("noscript", (Element) null, "", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inTableScope("base");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      CharacterReader characterReader0 = htmlTreeBuilder0.reader;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isSpecial((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFosterInserts(true);
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parse("\t*U]~d-h?t)", "\t*U]~d-h?t)");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tfoot");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "tfoot", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("table");
      element0.append("td");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("th");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ftrm");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "ftrm", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("isindex", attributes0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTableBody;
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag1, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("h4");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Data", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
