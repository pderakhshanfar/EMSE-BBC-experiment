/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:57:18 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("th", document0, "th", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("aa2s8hH]:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      StringReader stringReader0 = new StringReader(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document1 = parser0.parseInput((Reader) stringReader0, ".0bW%*I:;{bm%NIl_e");
      Document document2 = document1.ownerDocument();
      htmlTreeBuilder0.push(document2);
      htmlTreeBuilder0.replaceOnStack(document2, document0);
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      StringReader stringReader0 = new StringReader(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document1 = parser0.parseInput((Reader) stringReader0, ".0bW%*I:;{bm%NIl_e");
      Document document2 = document1.ownerDocument();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document2, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("~<SU>'BeU'", document0, "th", parser0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.setTreeBuilder(htmlTreeBuilder0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTableText;
      htmlTreeBuilder0.error(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment(".0bW%*I:;{bm%NIl_e", document0, ".0bW%*I:;{bm%NIl_e", parser0);
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterAfterFrameset;
      htmlTreeBuilder0.transition(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("tfoot");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "blockquote", attributes0);
      htmlTreeBuilder0.setFormElement(formElement0);
      assertEquals(0, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.framesetOk(true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      StringReader stringReader0 = new StringReader("body");
      Document document0 = parser0.parseInput((Reader) stringReader0, "body");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("~<SU>'BeU'", document0, "th", parser0);
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("cr7So\"a:[}o5@;.", "cr7So\"a:[}o5@;.");
      String string0 = htmlTreeBuilder0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = Document.createShell("XkWI_<@ ]?");
      htmlTreeBuilder0.parseFragment("option", document0, "AfterAfterBody", parser0);
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = Parser.parse("tfody", "tfody");
      htmlTreeBuilder0.parseFragment("tfody", document0, "tfody", parser0);
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = htmlTreeBuilder0.pop();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(element1);
      assertEquals("html", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("listing");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("R0b_4IA@L@bUKI(/~", document0, "o&~w", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(1, document0.siblingIndex());
      
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("R", document0, ".0bW%*I:;{bm%NIl_e", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("a&r(=^9Afclp", "a&r(=^9Afclp");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("a&r(=^9Afclp", document0, "a&r(=^9Afclp", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.insert(document0);
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertEquals(1, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("~<S>'BeAU", (Element) null, "~<S>'BeAU", parser0);
      Token.Comment token_Comment0 = new Token.Comment();
      boolean boolean0 = htmlTreeBuilder0.process(token_Comment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>BAo7U");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("~<S>BAo7U", document0, "~<S>BAo7U", parser0);
      Token.Doctype token_Doctype0 = new Token.Doctype();
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("~<S>BAo7U", (Element) null, "~<S>BAo7U", parser0);
      htmlTreeBuilder0.push((Element) null);
      Element element0 = htmlTreeBuilder0.pop();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.originalState();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("tfoot", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "Qfql.", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("arZea", element0, "Qfql.", parser0);
      htmlTreeBuilder0.originalState();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = Document.createShell("XkWI_<@ ]?");
      htmlTreeBuilder0.parseFragment("R", document0, "R", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("XkWI_<@ ]?");
      boolean boolean0 = htmlTreeBuilder0.onStack(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("th", document0, "V", parser0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      String string0 = "N\\uD|x]f|.^W@q)Y.";
      htmlTreeBuilder0.parseFragment(string0, document0, "pre", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("big");
      Element element0 = document0.createElement("br");
      boolean boolean0 = htmlTreeBuilder0.isSpecial(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("4|Fm_IRzE<G@dGK3Vd", (Element) null, "etiYm{a4y", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("R", document0, ".0bW%*I:;{bm%NIl_e", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("embed");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("caption", document0, "caption", parser0);
      assertEquals(1, list0.size());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("header");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertNotNull(element1);
      assertEquals("header", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = Document.createShell("~<k!S>BZrBAox");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("table", document0, "table", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.processStartTag(">$:");
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("TreeBuilder{currentToken=", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment(".$9:x25Y(PUh flr,$c", (Element) null, "~<S>BeAU", parser0);
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("P", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertEquals("~<S>BeAU", formElement0.baseUri());
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("~<S>BAo7U", document0, "~<S>BAo7U", parser0);
      assertEquals(2, list0.size());
      
      htmlTreeBuilder0.processStartTag("~<S>BAo7U");
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      CDataNode cDataNode0 = new CDataNode("col");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("~<S>BAo7U", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("base");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("base", document0, "base", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("?", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals("base", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Element element0 = new Element("address");
      htmlTreeBuilder0.parseFragment("footer", element0, "address", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("html", (Attributes) null);
      Element element1 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("~<S>BAo7U", (Element) null, "~<S>BAo7U", parser0);
      htmlTreeBuilder0.processStartTag("~<S>BAo7U");
      CharacterReader characterReader0 = new CharacterReader("~<S>BAo7U");
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      CDataNode cDataNode0 = new CDataNode("~<S>BAo7U");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("~<S>BAo7U", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("section");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("section", document0, "String input must not be null", parser0);
      assertEquals(1, list0.size());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("section", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertEquals("String input must not be null", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("body");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = parser1.parseInput((Reader) stringReader0, "abbr");
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("~<S>BAo7U", (Element) null, "~<S>BAo7U", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("~<S>BAo7U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("", (Element) null, ",y^~=zw{J3<)", parser0);
      assertEquals(1, list0.size());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "su";
      stringArray0[1] = "html";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("~<SU>'BeU'", document0, "th", parser0);
      assertEquals(2, list0.size());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".0bW%*I:;{bm%NIl_e";
      stringArray0[1] = "th";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("^Kt-@v;QK$KN-.K>", (Element) null, "^Kt-@v;QK$KN-.K>", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.processStartTag("qfql.");
      String[] stringArray0 = new String[3];
      boolean boolean0 = htmlTreeBuilder0.inScope("qfql.", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("~<S>'BeAU", (Element) null, "~<S>'BeAU", parser0);
      assertEquals(1, list0.size());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "~<S>'BeAU";
      stringArray0[1] = "o<EWr#fiRX";
      stringArray0[2] = "~<S>'BeAU";
      boolean boolean0 = htmlTreeBuilder0.inScope("~<S>'BeAU", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("frameset");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("frameset", document0, "table", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.processStartTag("table");
      boolean boolean0 = htmlTreeBuilder0.inScope("table");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("f)ameset");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("f)ameset", document0, "table", parser0);
      htmlTreeBuilder0.processStartTag("table");
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("table");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("~<S>'BeAU", (Element) null, "~<S>'BeAU", parser0);
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("o<EWr#fiRX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("[p9?Mr\"Pj9iO8", (Element) null, "[p9?Mr\"Pj9iO8", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.processStartTag("button");
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("button");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("Fh7/?6Y", "bgsound");
      Elements elements0 = document0.getElementsContainingOwnText("bgsound");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("~<SU>'BeU'", document0, "th", parser0);
      assertEquals(2, list0.size());
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("cr7So\"a:[}o5@;.", "cr7So\"a:[}o5@;.");
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("etiXYma4", (Element) null, "Gmkg,qN_bD-:", parser0);
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertEquals(0, element0.siblingIndex());
      assertEquals("Gmkg,qN_bD-:", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>BAo7U");
      htmlTreeBuilder0.setHeadElement(document0);
      Document document1 = (Document)htmlTreeBuilder0.getHeadElement();
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("`~euD=<+");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("`~euD=<+", document0, "select", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack("`~euD=<+");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("embed");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("~<S>BAo7U", document0, " ", parser0);
      assertEquals(2, list0.size());
      
      htmlTreeBuilder0.insertStartTag("embed");
      Element element0 = htmlTreeBuilder0.getFromStack("embed");
      assertEquals(" ", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment(":xBsi", (Element) null, "html", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack("html");
      assertEquals("html", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("~<S>o7", "~<S>o7");
      htmlTreeBuilder0.processStartTag("form");
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("~<S>o7", "~<S>o7");
      htmlTreeBuilder0.insert(document0);
      assertEquals(1, document0.siblingIndex());
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals(1, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "~<S>BAo7U", parser0);
      Document document0 = htmlTreeBuilder0.getDocument();
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment(".0bW%*I:;{bm%NIl_e", document0, "", parser0);
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<S>B[Ao7x", (Element) null, "<S>B[Ao7x", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("t");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("t");
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<S>B[Ao7x", (Element) null, "<S>B[Ao7x", parser0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("s");
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("zfJot");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "<j^m6!Y?K", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<j^m6!Y?K", element0, "T+#jp[", parser0);
      assertEquals(0, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertFalse(parseSettings0.preserveTagCase());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>'BeAU");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("~<S>'BeAU", document0, "org.jsoup.select.Evaluator$CjsNt&Evaluaton", parser0);
      Element element0 = htmlTreeBuilder0.currentElement();
      assertFalse(element0.isBlock());
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertEquals("org.jsoup.select.Evaluator$CjsNt&Evaluaton", element0.baseUri());
      assertNotNull(element1);
      assertEquals("html", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("embed");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("~<S>BAo7U", document0, "embed", parser0);
      assertEquals(2, list0.size());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("y");
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertEquals(2, element1.childNodeSize());
      assertNotNull(element1);
      assertEquals("embed", element1.baseUri());
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = parser1.parseInput(" :W", "~<S>BAo7U");
      htmlTreeBuilder0.insert(document0);
      // Undeclared exception!
      htmlTreeBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("<S>B[Ao7x");
      htmlTreeBuilder0.parseFragment("<S>B[Ao7x", element0, "<S>B[Ao7x", parser0);
      Token.EndTag token_EndTag0 = new Token.EndTag();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Text;
      htmlTreeBuilder0.process(token_EndTag0, htmlTreeBuilderState0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.resetInsertionMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("~<S>BAo7U", "~<S>BAo7U");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("~<S>BAo7U", document0, "~<S>BAo7U", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeLastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromStack((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.reconstructFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("body");
      Element element0 = new Element(tag0, "body");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Doctype token_Doctype0 = new Token.Doctype();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InColumnGroup;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("~<S>BAo7U", (Element) null, "co mman2", parser0);
      htmlTreeBuilder0.popStackToClose("q");
      Token.CData token_CData0 = new Token.CData("q");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterHead;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      CDataNode cDataNode0 = new CDataNode("su");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", attributes0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Initial;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_StartTag1, htmlTreeBuilderState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.EOF token_EOF0 = new Token.EOF();
      Token.TokenType token_TokenType0 = Token.TokenType.EndTag;
      token_EOF0.type = token_TokenType0;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InCell;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EOF0, htmlTreeBuilderState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("R", document0, ".0bW%*I:;{bm%NIl_e", parser0);
      htmlTreeBuilder0.pop();
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.Tag token_Tag0 = tokeniser0.createTagPending(false);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Text;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Tag0, htmlTreeBuilderState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("tfookt");
      FormElement formElement0 = new FormElement(tag0, "Al", attributes0);
      htmlTreeBuilder0.parseFragment("tfookt", formElement0, "Al", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr((String) null, attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_StartTag1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("~<S>B[Ao7x", (Element) null, "~<S>B[Ao7x", parser0);
      Token.EOF token_EOF0 = new Token.EOF();
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token_EOF0.type = token_TokenType0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EOF0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose("stQyle");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToBefore("^8Q3zG#hy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW]*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("~<S>'BeAU", document0, "~<S>'BeAU", parser0);
      htmlTreeBuilder0.popStackToBefore(".0bW]*I:;{bm%NIl_e");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      document0.appendChild(document0);
      // Undeclared exception!
      htmlTreeBuilder0.parseFragment("ul", document0, "ul", parser0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment((String) null, (Element) null, (String) null, parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("aa2s8hH]:", document0, (String) null, parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("", "");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.onStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.lastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isSpecial((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag(", state=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("body");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("nemD\"ZV=Fcj +CM", parseSettings0);
      Element element0 = new Element(tag0, "");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("rg.jsoup.selct.StructuralEvaluator$ImmediatePaent", document0, "~<S>BAo7U", parser0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rg.jsoup.selct.StructuralEvaluator$ImmediatePaent";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("figcaption", (Element) null, " -R-,/S!@%G$R", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("4hl*ly^B{Uk&L3yOR", attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("tr", attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Comment token_Comment0 = new Token.Comment();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      CharacterReader characterReader0 = new CharacterReader("");
      Parser parser0 = Parser.xmlParser();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.Character token_Character0 = tokeniser0.charPending;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("k]40P)LMKmdz");
      Element element0 = new Element(tag0, "hr");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("su", (Element) null, ",y^~=zw{J3<)", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      StringReader stringReader0 = new StringReader("aside");
      stringReader0.close();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(stringReader0, "Xjk 9Vk\\", parser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "|d", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      PipedReader pipedReader0 = new PipedReader();
      Parser parser0 = Parser.xmlParser();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "td", parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("P(=y^2_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("O@]fE?n~&J(Xc\"T;^", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getFromStack((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getActiveFormattingElement("n|/9=q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("th", document0, "~<S>'BeAU", parser0);
      htmlTreeBuilder0.popStackToBefore("th");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.generateImpliedEndTags(".0bW%*I:;{bm%NIl_e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterAfterFrameset;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("<S>B[Ao7x", (Element) null, "<S>B[Ao7x", parser0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNotNull(element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("S", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("~<S>BAo7U", (Element) null, "~<S>BAo7U", parser0);
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("~<S>'BeAU", (Element) null, "Gc[qt?q", parser0);
      htmlTreeBuilder0.popStackToClose("Gc[qt?q");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~S>B");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("og.jsoup.select.StructuralEvaluator$Immediatearent", document0, "~S>B", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.processStartTag("button");
      boolean boolean1 = htmlTreeBuilder0.inButtonScope("og.jsoup.select.StructuralEvaluator$Immediatearent");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("optgroup", (Element) null, "4|Fm_IRzE<G@dGK3Vd", parser0);
      String[] stringArray0 = new String[0];
      htmlTreeBuilder0.popStackToClose(stringArray0);
      CharacterReader characterReader0 = htmlTreeBuilder0.reader;
      ParseErrorList parseErrorList0 = new ParseErrorList(100, (-229278923));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      htmlTreeBuilder0.insert(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("<![CDATA[", "su");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<![CDATA[", document0, "<![CDATA[", parser0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("pp4e", document0, "cuE", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("#root");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("details", (Element) null, "Could not parse query '%s': unexpected token at '%s'", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement((String) null);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("~<S>BAo7U", document0, "pp4e", parser0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement(":xBsi");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("~<S>BAo7U", document0, "pre", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("~<S>BAo7U", "~<S>BAo7U");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("~<S>BAo7U", document0, "~<S>BAo7U", parser0);
      assertEquals(2, list0.size());
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("~<S>BAo7x", (Element) null, "~<S>BAo7x", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("R", document0, ".0bW%*I:;{bm%NIl_e", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("~<S>BAo7U", document0, "pp4e", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.clearStackToTableBodyContext();
      boolean boolean0 = htmlTreeBuilder0.processStartTag("~<S>BAo7U");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = parser1.parseInput("Unexpected count of entities loaded", "Unexpected count of entities loaded");
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      boolean boolean0 = htmlTreeBuilder0.processStartTag("Unexpected count of entities loaded");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("~<S>BAo7U", document0, "pp4e", parser0);
      assertEquals(2, list0.size());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      boolean boolean0 = htmlTreeBuilder0.processStartTag("~<S>BAo7U");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("~<S>BAo7U", (Element) null, "~<S>BAo7U", parser0);
      htmlTreeBuilder0.processStartTag("S");
      Element element0 = htmlTreeBuilder0.pop();
      element0.addClass("plaintext");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("embed");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("~<S>BAo7U", document0, "embed", parser0);
      assertEquals(2, list0.size());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.9so.seect.Elemet", "noscript");
      htmlTreeBuilder0.parseFragment("noscript", document0, "noscript", parser0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("~<S>BAo7U", document0, "pr/", parser0);
      htmlTreeBuilder0.processStartTag("optgroup");
      htmlTreeBuilder0.generateImpliedEndTags("TikuUI");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("~<S>'BeAU", (Element) null, "org.jsoup.select.Evaluator$CjsNt&Evaluaton", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("s");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("th", document0, "th", parser0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".0bW%*I:;{bm%NIl_e";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("R^0X&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("~<S>BAo7U", document0, "pp4e", parser0);
      assertEquals(2, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inScope("iZoVb=wd|_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("rg.jsoup.selct.StructuralEvaluator$ImmediatePaent", document0, "~<S>BAo7U", parser0);
      assertEquals(1, list0.size());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rg.jsoup.selct.StructuralEvaluator$ImmediatePaent";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("~<S>BAo7U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = htmlTreeBuilder0.settings;
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      Element element0 = new Element(tag0, "area", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("script", element0, "h\"Hi5#9A~7Uq&jJ", parser0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Element element0 = new Element("frameset");
      List<Node> list0 = parser0.parseFragmentInput("thead", element0, "9}");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = Parser.xmlParser();
      Element element0 = document0.head();
      List<Node> list0 = htmlTreeBuilder0.parseFragment(".0bW%*I:;{bm%NIl_e", element0, ".0bW%*I:;{bm%NIl_e", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("section");
      Parser parser0 = Parser.htmlParser();
      Element element0 = document0.createElement("table");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("table", element0, "gS", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("colgroup");
      Parser parser0 = Parser.htmlParser();
      Element element0 = document0.createElement("colgroup");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("l/EN~_dN)Ph^]@k", element0, "`AiRYg!$#,`fY1y", parser0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("(_<TP]:~DUAH x'", "(_<TP]:~DUAH x'");
      Element element0 = document0.createElement("caption");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("caption", element0, "(_<TP]:~DUAH x'", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("tfoot", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "Qfql.", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("arZea", element0, "Qfql.", parser0);
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("Qfql.", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Document.createShell("base");
      Element element0 = document0.createElement("thead");
      List<Node> list0 = Parser.parseFragment("thead", element0, "base");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = htmlTreeBuilder0.settings;
      Tag tag0 = Tag.valueOf("tr", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "~<s>'beau", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("B ~r", pseudoTextElement0, "6 |%kx", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Tag tag0 = Tag.valueOf("th");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "thead", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("th", element0, ":parent%s", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      Element element0 = document0.createElement("td");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("caption", element0, "4xRP:gX?MC:+fLR", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("select");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("select", element0, "tfoot", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>'BeAU");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("inpu t", document0, "4fzzO?H}?Na +7s%^|l", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("inpu t");
      htmlTreeBuilder0.insertOnStackAfter(element0, document0);
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parse("tfo^t", "tfo^t");
      htmlTreeBuilder0.parseFragment("tfo^t", document0, "tfo^t", parser0);
      Element element0 = htmlTreeBuilder0.currentElement();
      htmlTreeBuilder0.insertStartTag("tfo^t");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("~<SU>'BeU'", document0, "th", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("tfo^t", "tfo^t");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("4|Fm_IRzE<G@dGK3Vd", (Element) null, "etiYm{a4y", parser0);
      htmlTreeBuilder0.popStackToClose("html");
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("R", document0, "MTe", parser0);
      htmlTreeBuilder0.popStackToBefore("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("", (Element) null, "optgroup", parser0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "html";
      stringArray0[3] = "html";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(".0bW%*I:;{bm%NIl_e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("link", (Element) null, "link", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("frameset");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("frameset", document0, "table", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.onStack(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("o\"sR@SNd|J'*", (Element) null, "o\"sR@SNd|J'*", parser0);
      htmlTreeBuilder0.processStartTag("button");
      Element element0 = htmlTreeBuilder0.insertStartTag("~<S>BAo7U");
      assertEquals(0, element0.siblingIndex());
      assertEquals("~<s>bao7u", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("frameset");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("frameset", document0, "table", parser0);
      boolean boolean0 = htmlTreeBuilder0.processStartTag("table");
      boolean boolean1 = htmlTreeBuilder0.processStartTag("Zbod");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("table", (Element) null, "table", parser0);
      htmlTreeBuilder0.processStartTag("style");
      Token.Character token_Character0 = new Token.Character();
      Token.Character token_Character1 = token_Character0.data("abs:");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InSelectInTable;
      boolean boolean0 = htmlTreeBuilder0.process(token_Character1, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("soix");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("ue", document0, "EndTagOpen", parser0);
      Token.Character token_Character0 = new Token.Character();
      boolean boolean0 = htmlTreeBuilder0.processStartTag("script");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InHeadNoscript;
      boolean boolean1 = htmlTreeBuilder0.process(token_Character0, htmlTreeBuilderState0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("%X?z};Vs*Zn");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("~<S>BAo(7U", document0, "~<S>BAo(7U", parser0);
      Token.CData token_CData0 = new Token.CData("%X?z};Vs*Zn");
      htmlTreeBuilder0.insert(token_CData0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.name("[");
      token_StartTag0.selfClosing = true;
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("W+f=D*0S.Icv-}xD", (Element) null, "W+f=D*0S.Icv-}xD", parser0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.name("s");
      token_StartTag0.selfClosing = true;
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("W+f=D*0S.Icv-}xD", (Element) null, "W+f=D*0S.Icv-}xD", parser0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("~<S>'BeAU");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Parser parser1 = parser0.setTrackErrors(100);
      htmlTreeBuilder0.parse(stringReader0, "_x`_!'$", parser1);
      Token.Doctype token_Doctype0 = new Token.Doctype();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InHead;
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Unexpected count of entities loaded", "Unexpected count of entities loaded");
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("tfokt");
      FormElement formElement0 = new FormElement(tag0, "tfokt", attributes0);
      htmlTreeBuilder0.parseFragment("ZtY.}gE+QP3{DY", formElement0, "tfokt", parser0);
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertFalse(formElement1.isBlock());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment("hpxb|F{;1fk>", ", state=");
      Element element0 = document0.createElement("plaintext");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("buttan", element0, "<!", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.9so.seect.Elemet", "noscript");
      Element element0 = document0.createElement("noscript");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("noscript", element0, "noscript", parser0);
      assertEquals(1, list0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("script", (ParseSettings) null);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "(([+-])?(d+)?)n(s*([+-])?s*d+)?", attributes0);
      htmlTreeBuilder0.parseFragment("script", element0, "xoi:D4u4:5QZQoL", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter((Element) null, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      Element element0 = document0.createElement("xmp");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("~<S>BAo7U", element0, "WM~N_%", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("`~euD=<+");
      Parser parser0 = Parser.htmlParser();
      Element element0 = document0.createElement("textarea");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("`~euD=<+", element0, "select", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inTableScope("~<S>BAo7U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("big");
      boolean boolean0 = htmlTreeBuilder0.isSpecial(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFosterInserts(true);
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("embed");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("hw~m0B33", "th");
      Element element0 = document0.createElement("tbody");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("org.9so.seect.Elemet", element0, "progress", parser0);
      assertEquals(1, list0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.newPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("table");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("~<S>BAo7U");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("~<S>BAo7U", document0, "pr/", parser0);
      boolean boolean0 = htmlTreeBuilder0.processStartTag("isindex");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("~<S>BAo7U");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("frameset");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("frameset", document0, "table", parser0);
      htmlTreeBuilder0.processStartTag("table");
      htmlTreeBuilder0.processStartTag("tbody");
  }
}
