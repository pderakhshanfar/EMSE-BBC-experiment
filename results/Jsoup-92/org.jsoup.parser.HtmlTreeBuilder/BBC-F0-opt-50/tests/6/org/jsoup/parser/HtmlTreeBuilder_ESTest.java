/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:43:50 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("hrjf");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "hrjf", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("hrjf");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader(")_X%xL&Qf_");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "bdi", parser0);
      Element element0 = document0.createElement("footer");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader(")_X%xL&Qf_");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "bdi", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("thead", "W");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("", document0, "img", parser0);
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("thead");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Element element0 = htmlTreeBuilder0.pop();
      htmlTreeBuilder0.insert(document0);
      htmlTreeBuilder0.insertOnStackAfter(document0, element0);
      assertEquals(2, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("$kUZe=Dqzs\"w");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "noscript", parser0);
      Element element0 = htmlTreeBuilder0.pop();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(element0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Token.Comment token_Comment0 = new Token.Comment();
      htmlTreeBuilder0.insert(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Initial;
      htmlTreeBuilder0.transition(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFormElement((FormElement) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.newPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.framesetOk(false);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.replaceActiveFormattingElement(document0, (Element) null);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("org.j0oup.select.Evalbator$IsunlyChild", "org.j0oup.select.Evalbator$IsunlyChild");
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      token_StartTag0.nameAttr("org.j0oup.select.Evalbator$IsunlyChild", attributes0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InCaption;
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag0, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("select", parseSettings0);
      Element element0 = new Element(tag0, ":matches");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("t#W.BAd*g~", element0, ":matches", parser0);
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      String string0 = htmlTreeBuilder0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("XJ'-]2J%");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "TagName", parser0);
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader(")_X%xL&Qf_");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "bdi", parser0);
      Element element0 = document0.createElement("footer");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals("footer", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("option");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "8D(", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("XJ'-]2J%");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "TagName", parser0);
      Token.Doctype token_Doctype0 = new Token.Doctype();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHtml;
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Token.Doctype token_Doctype0 = new Token.Doctype();
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("oip^n");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XQ?MCq5]x\"g", parser0);
      htmlTreeBuilder0.push(document0);
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.originalState();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.insert(document0);
      htmlTreeBuilder0.onStack(document0);
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("$kUZe=Dqzs\"w");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "$kUZe=Dqzs\"w", parser0);
      boolean boolean0 = htmlTreeBuilder0.onStack(document0);
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("option");
      htmlTreeBuilder0.parse(stringReader0, "8D(", parser0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Element element0 = htmlTreeBuilder0.pop();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("opton");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "opton", parser0);
      Element element0 = document0.createElement("opton");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals("opton", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNotNull(element0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("caption");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "y&q#)&i", parser0);
      Element element0 = htmlTreeBuilder0.pop();
      boolean boolean0 = htmlTreeBuilder0.isSpecial(element0);
      assertEquals(1, element0.siblingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("option");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "8D(", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertTrue(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("thead", "W");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("", document0, "img", parser0);
      assertEquals(0, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.nameAttr("km0Qe?sA_Z(5aW", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      CDataNode cDataNode0 = new CDataNode("\"33EeBLxM{$Q");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("fulZVYPqak].-C?I", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("hrjf");
      htmlTreeBuilder0.parse(stringReader0, "hrjf", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("hrjf");
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("hrjf");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("G");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "`~fM/+mJM`AEyCU", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("`~fM/+mJM`AEyCU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("opton");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "opton", parser0);
      Element element0 = document0.createElement("opton");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(1, document0.childNodeSize());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      String[] stringArray0 = new String[8];
      stringArray0[3] = "opton";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("opton");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ":matchText", parser0);
      Element element0 = document0.createElement("opton");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      String[] stringArray0 = new String[1];
      boolean boolean0 = htmlTreeBuilder0.inScope("opton", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inScope("basefont");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("option");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "option", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("SC");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "SC", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("SC");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("{I23P");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "href", parser0);
      assertEquals(1, document0.childNodeSize());
      
      htmlTreeBuilder0.popStackToClose("F.K7rc");
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("$kUZe=Dqzs\"w");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "$kUZe=Dqzs\"w", parser0);
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf(",,eFFha");
      Element element0 = new Element(tag0, "B");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("&rwAC(0`VFo)", element0, "&rwAC(0`VFo)", parser0);
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=_DeC{utlJ");
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "org.jsoup.select.evaluator$allelements", parser0);
      htmlTreeBuilder0.setHeadElement(document0);
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("SC");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "SC", parser0);
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("/*ayw8");
      htmlTreeBuilder0.parse(stringReader0, "/*ayw8", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack("/*ayw8");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Element element0 = new Element("div");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Elements elements0 = element0.getAllElements();
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      Element element1 = htmlTreeBuilder0.getFromStack("div");
      assertFalse(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack("html");
      assertEquals(2, element0.childNodeSize());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A66C|%vw?xnd>'");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parse(stringReader0, "A66C|%vw?xnd>'", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.nameAttr("A66C|%vw?xnd>'", (Attributes) null);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, true);
      FormElement formElement1 = htmlTreeBuilder0.insertForm(token_StartTag0, true);
      formElement1.replaceWith(formElement0);
      assertEquals(1, formElement0.childNodeSize());
      
      FormElement formElement2 = htmlTreeBuilder0.getFormElement();
      assertEquals(0, formElement2.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tfoot");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parse(stringReader0, "tfoot", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("tfoot", attributes0);
      htmlTreeBuilder0.insertForm(token_StartTag0, true);
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=_DeC{utlJ");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "=_DeC{utlJ", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("=_DeC{utlJ", attributes0);
      htmlTreeBuilder0.insertForm(token_StartTag0, true);
      htmlTreeBuilder0.reconstructFormattingElements();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(2, document0.siblingIndex());
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals(2, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.insert(document0);
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals(0, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Document document0 = htmlTreeBuilder0.getDocument();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("w^E+Xu9.ik02OS@");
      Element element0 = new Element(tag0, ",,eFFha");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("B", element0, "w^E+Xu9.ik02OS@", parser0);
      assertEquals(1, list0.size());
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("w^E+Xu9.ik02OS@", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("hrjf");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "hrjf", parser0);
      Element element0 = document0.createElement("frameset");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("frameset");
      assertEquals("hrjf", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("opton");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "opton", parser0);
      Element element0 = document0.createElement("opton");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("opton");
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("option");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "8D(", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("#root");
      assertNotNull(element0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertFalse(parseSettings0.preserveTagCase());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("option");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "8D(", parser0);
      htmlTreeBuilder0.push(document0);
      ParseErrorList parseErrorList0 = new ParseErrorList(3399, 8240);
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("=Dh,oGz", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertEquals(2, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("href");
      htmlTreeBuilder0.parse(stringReader0, "org.jsoup.parser.ParseSettings", parser0);
      CDataNode cDataNode0 = new CDataNode("href");
      Attributes attributes0 = cDataNode0.attributes();
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      token_StartTag0.nameAttr("table", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertEquals(2, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.insert(document0);
      // Undeclared exception!
      htmlTreeBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Text;
      htmlTreeBuilder0.process(token_StartTag0, htmlTreeBuilderState0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.resetInsertionMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("w\"E6`*mKQ");
      Element element0 = new Element(tag0, "w\"E6`*mKQ");
      Document document0 = new Document("Wr");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(element0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("Hjr8.");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "Hjr8.", parser0);
      Document document0 = htmlTreeBuilder0.getDocument();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeLastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("I\fsTDyu{?", "O+nqcsE9]q`?S");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("", "noscript");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.reconstructFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("8RHL/|5Ho|rrozc{", "8RHL/|5Ho|rrozc{");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTable;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Character0, htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilderState$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      CharacterReader characterReader0 = new CharacterReader("CJN#L{i\"fQ");
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Initial;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token0, htmlTreeBuilderState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Doctype token_Doctype0 = new Token.Doctype();
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token_Doctype0.type = token_TokenType0;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InBody;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      Token.EndTag token_EndTag0 = tokeniser0.endPending;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EndTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("hrjf");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parse(stringReader0, "hrjf", parser0);
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 100);
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr((String) null, attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_StartTag1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("VJ^D[p?;S$U{Z.-");
      htmlTreeBuilder0.parse(stringReader0, "VJ^D[p?;S$U{Z.-", parser0);
      Token.Character token_Character0 = new Token.Character();
      Token.Character token_Character1 = token_Character0.data("VJ^D[p?;S$U{Z.-");
      Token.TokenType token_TokenType0 = Token.TokenType.EndTag;
      token_Character1.type = token_TokenType0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Character1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Character cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose(",,ffha");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToBefore("=<rC]9wuKBJWyk#CG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("$kUZe=Dqzs\"w");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "$kUZe=Dqzs\"w", parser0);
      htmlTreeBuilder0.popStackToBefore("t,>B!h");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("$kUZe=Dqzs\"w");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "noscript", parser0);
      htmlTreeBuilder0.insert(document0);
      // Undeclared exception!
      htmlTreeBuilder0.parseFragment("4Gy;ImahV]", document0, "noscript", parser0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment((String) null, (Element) null, (String) null, parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.nodes.Comment");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "org.jsoup.nodes.Comment", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("ol", document0, (String) null, parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf(",,eFFha");
      Element element0 = new Element(tag0, "H#");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.onStack(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.lastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isSpecial((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag(",,FFha");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document("'5PFqo^");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("8RHL/|5Ho|rrozc{", "8RHL/|5Ho|rrozc{");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      String[] stringArray0 = new String[0];
      htmlTreeBuilder0.popStackToClose(stringArray0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm((Token.StartTag) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("q+qP2dAD7w[sl{kPY.", (Attributes) null);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Comment token_Comment0 = new Token.Comment();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Character token_Character0 = new Token.Character();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("href");
      stringReader0.close();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(stringReader0, "href", parser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "BgA?{xvT MD>X\"k", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "option", parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("<", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getFromStack("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getActiveFormattingElement("]^$Q|.#aG53@mnEI[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHtml;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("tbody", "KxUgzu)+{vU'");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("<q%w-&Q_");
      htmlTreeBuilder0.parse(stringReader0, "qR(", parser0);
      htmlTreeBuilder0.pop();
      Element element0 = htmlTreeBuilder0.currentElement();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      // Undeclared exception!
      try { 
        parser1.parseInput("xmp", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ovtie ");
      Parser parser0 = Parser.xmlParser();
      parser0.parseInput((Reader) stringReader0, "wfWph");
      htmlTreeBuilder0.parse(stringReader0, "wfWph", parser0);
      htmlTreeBuilder0.insertStartTag("style");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("$kUZe=Dqzs\"w");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "$kUZe=Dqzs\"w", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("option");
      htmlTreeBuilder0.parse(stringReader0, "8D(", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("VJ^D[p?;S$U{Z.-");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "VJ^D[p?;S$U{Z.-", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("XJ'-]2J%");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XJ'-]2J%", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.push(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("org.joup.select.Evalbator$IsnlyChild", "org.joup.select.Evalbator$IsnlyChild");
      Document document1 = parser0.parseInput("org.joup.select.Evalbator$IsnlyChild", "org.joup.select.Evalbator$IsnlyChild");
      document1.attr("org.joup.select.Evalbator$IsnlyChild", (String) null);
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader(")_X%xL&Qf_");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "nD(", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("opton");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ":matchText", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("option");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "8D(", parser0);
      Element element0 = document0.createElement("option");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.generateImpliedEndTags("8D(");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("option");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "8D(", parser0);
      Element element0 = document0.createElement("option");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.generateImpliedEndTags("option");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.generateImpliedEndTags("option");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("option");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ":matchText", parser0);
      Element element0 = document0.createElement("option");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("       ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("option");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ":matchText", parser0);
      Element element0 = document0.createElement("option");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(1, document0.childNodeSize());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("option");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("$kUZe=Dqzs\"w");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "$kUZe=Dqzs\"w", parser0);
      htmlTreeBuilder0.popStackToBefore("$kUZe=Dqzs\"w");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("cpKRV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("option");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "8D(", parser0);
      Element element0 = document0.createElement("option");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(1, document0.childNodeSize());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      String[] stringArray0 = new String[8];
      stringArray0[3] = "option";
      boolean boolean0 = htmlTreeBuilder0.inScope("v^=:VHV503r", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("objec");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "va#f$f<", parser0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "objec";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.nodes.Comment");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "org.jsoup.nodes.Comment", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("html");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("XJ'-]2J%", parseSettings0);
      Element element0 = new Element(tag0, "J*S|c/qpXS.r0)X");
      htmlTreeBuilder0.parseFragment(">/Yey*w.\b^Wb.qC", element0, "head", parser0);
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("J*S|c/qpXS.r0)X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      String[] stringArray0 = new String[0];
      htmlTreeBuilder0.popStackToClose(stringArray0);
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("meta");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("/*ayw8");
      htmlTreeBuilder0.parse(stringReader0, "/*ayw8", parser0);
      htmlTreeBuilder0.insertStartTag("/*ayw8");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("O5KGYb7~", parseSettings0);
      Element element0 = new Element(tag0, "O5KGYb7~");
      htmlTreeBuilder0.parseFragment("O5KGYb7~", element0, "O5KGYb7~", parser0);
      Element element1 = htmlTreeBuilder0.currentElement();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("o->#{@r#=", element1, "o->#{@r#=", parser0);
      assertEquals(2, list0.size());
      assertEquals("html", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("frameset");
      Element element0 = new Element(tag0, "H|+aHi,$8RjIjiwa");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("TreeBuilder{currentToken=", element0, "D[/bllju0d", parser0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.nodes.Comment");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "org.jsoup.nodes.Comment", parser0);
      Element element0 = htmlTreeBuilder0.getHeadElement();
      List<Node> list0 = Parser.parseFragment(":matchesOwn(", element0, "org.jsoup.nodes.Comment");
      assertEquals(1, list0.size());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("colgroup", parseSettings0);
      Element element0 = new Element(tag0, "object");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("colgroup", element0, "B7duHp8", parser0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("caption", parseSettings0);
      Element element0 = new Element(tag0, "o@#KJq-;az6.%6wda7");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      List<Node> list0 = Parser.parseFragment("o@#KJq-;az6.%6wda7", element0, "caption", parseErrorList0);
      assertEquals(1, list0.size());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("tfoot", parseSettings0);
      Element element0 = new Element(tag0, "tfoot");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("pHY[", element0, "tfoot", parser0);
      htmlTreeBuilder0.originalState();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("thead", parseSettings0);
      Element element0 = new Element(tag0, "head");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("head", element0, "MqPmuEh<T](o-HaU6~", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Tag tag0 = Tag.valueOf("select");
      Element element0 = new Element(tag0, "select");
      element0.tagName("tbody");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("select", element0, "select", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("tr", parseSettings0);
      Element element0 = new Element(tag0, "]CsWI<N=P8");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("table", element0, "FJ", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("th");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("EBG;{6j9't;&m;@,gY'", element0, "CbER/%'TL,ce#{W!+t|", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.insert(document0);
      htmlTreeBuilder0.replaceOnStack(document0, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("<q%w-&Q_");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "qR(", parser0);
      Element element0 = document0.createElement("<q%w-&Q_");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.push(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.aboveOnStack(document0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("$kUZe=Dqzs\"w");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "$kUZe=Dqzs\"w", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("template");
      htmlTreeBuilder0.parse(stringReader0, "template", parser0);
      htmlTreeBuilder0.insertStartTag("template");
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("_%x-&Q_");
      htmlTreeBuilder0.parse(stringReader0, "nD(", parser0);
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("$kUZe=Dqzs\"w");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "$kUZe=Dqzs\"w", parser0);
      htmlTreeBuilder0.popStackToBefore("$kUZe=Dqzs\"w");
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("option");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "8D(", parser0);
      Element element0 = document0.createElement("option");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.popStackToBefore("option");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("tz*m,-2,%iwWa&=E8<");
      htmlTreeBuilder0.parse(stringReader0, "body", parser0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "body";
      stringArray0[1] = "tz*m,-2,%iwWa&=E8<";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("href");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "href", parser0);
      htmlTreeBuilder0.popStackToClose("body");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("hrjf");
      htmlTreeBuilder0.parse(stringReader0, "hrjf", parser0);
      htmlTreeBuilder0.popStackToClose("hrjf");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("option");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "8D(", parser0);
      htmlTreeBuilder0.push(document0);
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertTrue(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("/*ayw8");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "/*ayw8", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.removeFromStack((Element) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("option");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "8D(", parser0);
      Element element0 = document0.createElement("option");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      Element element1 = htmlTreeBuilder0.getFromStack("option");
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("select");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("select", element0, "7p>|1UF'w:R9v", parser0);
      assertEquals(1, list0.size());
      
      Element element1 = htmlTreeBuilder0.insertStartTag("select");
      assertEquals("7p>|1UF'w:R9v", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("objec");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "va#f$f<", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("select", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("opton");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "opton", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.setFosterInserts(true);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringReader stringReader0 = new StringReader("script");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parse(stringReader0, "script", parser0);
      htmlTreeBuilder0.insertStartTag("script");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Token.CData token_CData0 = new Token.CData("");
      htmlTreeBuilder0.insert(token_CData0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("tz", "tz");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("tz", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, false);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("org.j0oup.select.Evalbator$IsunlyChild", "org.j0oup.select.Evalbator$IsunlyChild");
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      token_StartTag0.nameAttr("org.j0oup.select.Evalbator$IsunlyChild", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.nodes.Comment");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "org.jsoup.nodes.Comment", parser0);
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 100);
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("td", (Attributes) null);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("org.jsoup.nodes.Comment", element0, "html", parser0);
      assertEquals(1, list0.size());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterBody;
      parser0.setTrackErrors(100);
      htmlTreeBuilder0.error(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("$kUZe=Dqzs\"w");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "$kUZe=Dqzs\"w", parser0);
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("$kUZe=Dqzs\"w", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("plaintext", (ParseSettings) null);
      Element element0 = new Element(tag0, "listing");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("header", element0, "Unexpected token type: ", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("noscript");
      Element element0 = new Element(tag0, "\"rI~s!");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("f+a-}4", element0, "            ", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("script", parseSettings0);
      Element element0 = new Element(tag0, "tfoot");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("head", element0, "strong", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("style", parseSettings0);
      Element element0 = new Element(tag0, "pre");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("", element0, "style", parser0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("title");
      Element element0 = new Element(tag0, "title");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<Fkz;{", element0, "<Fkz;{", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      List<Node> list0 = Parser.parseFragment("$kUZe=Dqzs\"w", (Element) null, "qbd(");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inTableScope("hrjf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Token.Comment token_Comment0 = new Token.Comment();
      boolean boolean0 = htmlTreeBuilder0.process(token_Comment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.isSpecial(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("i&A");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "nD(", parser0);
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("_%x-&Q_");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "nD(", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("J*S|c/qpXS.r0)X");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("table");
      Element element0 = new Element(tag0, "bg(ud");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("table", element0, "html", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inScope("html");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("SC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("_%x-&Q_");
      htmlTreeBuilder0.parse(stringReader0, "nD(", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("_%x-&Q_", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("_%x-&Q_", formElement0, "_%x-&Q_", parser0);
      assertEquals(1, formElement0.siblingIndex());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.nodes.Comment");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "org.jsoup.nodes.Comment", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("html");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }
}
