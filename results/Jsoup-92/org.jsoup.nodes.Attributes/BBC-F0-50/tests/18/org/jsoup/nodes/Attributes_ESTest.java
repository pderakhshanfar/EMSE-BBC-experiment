/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 02:26:29 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Iterator;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.Attributes", "org.jsoup.nodes.Attributes");
      attributes0.put(attribute0);
      attributes0.hashCode();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes0.clone();
      boolean boolean0 = attributes2.equals(attributes1);
      assertNotSame(attributes2, attributes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      assertEquals(0, attributes1.size());
      
      attributes1.putIgnoreCase("", (String) null);
      Attributes attributes2 = attributes1.clone();
      boolean boolean0 = attributes0.equals(attributes2);
      assertEquals(1, attributes1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("8r2)", "8r2)", attributes0);
      attributes0.put(attribute0);
      attributes0.put("K714", "K714");
      attributes0.removeIgnoreCase("K714");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("`t-7dI>&hd++2Y", "[t<~Ftr./>NjJj");
      attributes1.clone();
      attributes0.remove("`t-7dI>&hd++2Y");
      attributes0.put("org.jsoup.nodes.Attributes", "D/zP-)\"g5qb/vm");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("inert", true);
      int int0 = attributes1.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("inert", true);
      int int0 = attributes0.indexOfKey("inert");
      assertEquals(1, attributes0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("S<)v^", "S<)v^");
      Attribute attribute0 = Attribute.createFromEncoded("XH1![3x@_lL}uW9xk|", "");
      attributes1.put(attribute0);
      int int0 = attributes0.indexOfKey("XH1![3x@_lL}uW9xk|");
      assertEquals(2, attributes0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      int int0 = attributes0.indexOfKey("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("[mEum2odn;", "[mEum2odn;");
      attributes0.get("[mEum2odn;");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = Attributes.checkNotNull("iE*QavN@@*");
      assertEquals("iE*QavN@@*", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = Attributes.checkNotNull("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("F$/sw.&<G{8c-1Yz0,", "F$/sw.&<G{8c-1Yz0,", attributes0);
      attributes0.put(attribute0);
      attributes0.keys = null;
      // Undeclared exception!
      try { 
        attributes0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("f!qp:c", "f!qp:c");
      attributes0.put(attribute0);
      Attributes attributes1 = attributes0.clone();
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      // Undeclared exception!
      try { 
        attributes1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("'", "'");
      attributes1.vals = null;
      // Undeclared exception!
      try { 
        attributes0.removeIgnoreCase("'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.removeIgnoreCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("CV*O", "HI(1C");
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      // Undeclared exception!
      try { 
        attributes1.removeIgnoreCase("CV*O");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("O", true);
      Attributes attributes2 = attributes1.put("", "");
      attributes2.vals = null;
      // Undeclared exception!
      try { 
        attributes1.remove("O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.remove((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("?A(aKF3", "public");
      Attribute attribute0 = Attribute.createFromEncoded("<L$jA|(r", ":");
      Attributes attributes2 = attributes1.put(attribute0);
      String[] stringArray0 = new String[1];
      attributes2.vals = stringArray0;
      // Undeclared exception!
      try { 
        attributes2.remove("?A(aKF3");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.vals = null;
      // Undeclared exception!
      try { 
        attributes0.putIgnoreCase("8r2)", "8r2)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.putIgnoreCase((String) null, "QJ+fE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      String[] stringArray0 = new String[2];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attributes1.putIgnoreCase("inert", "defer");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("O", "O", attributes0);
      attributes0.vals = null;
      // Undeclared exception!
      try { 
        attributes0.put(attribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.put((Attribute) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[8];
      attributes0.keys = stringArray0;
      Attribute attribute0 = new Attribute("a>;n", "", attributes0);
      // Undeclared exception!
      try { 
        attributes0.put(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.vals = null;
      // Undeclared exception!
      try { 
        attributes0.put("org.jsoup.nodes.Attributes$Dataset$EntrySet", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.put((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[5];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        attributes0.put("org.jsoup.select.Evaluator$AllElements", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.put((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[5];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        attributes0.put("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", "org.jsoup.nodes.Entities$1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", "Cf(&[\"");
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        attributes1.normalize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("O", "O");
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attributes0.normalize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("I4VTO_5A9[s6BCNyo", "G");
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        attributes1.indexOfKey("link");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.indexOfKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("[mEum2odn;", true);
      Attribute attribute0 = new Attribute("%$5(", "yAw|,c98L V`0|S", attributes1);
      Attributes attributes2 = attributes0.put(attribute0);
      String[] stringArray0 = new String[1];
      attributes2.keys = stringArray0;
      // Undeclared exception!
      try { 
        attributes1.indexOfKey("%$5(");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("</", "]xPd}{=zDJV");
      Attributes attributes1 = attributes0.put(attribute0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "A]pMNYhLs'");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attributes1.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("P", " O=\"O\"");
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attributes0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("emXT~ay1%xc^", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        attributes1.html((Appendable) mockPrintWriter0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("O", "O");
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      MockFile mockFile0 = new MockFile("O", "k`A($/S+_2+$q6J?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attributes0.html((Appendable) mockPrintWriter0, document_OutputSettings0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      PipedWriter pipedWriter0 = new PipedWriter();
      attributes0.put("zq|Op{f&", "3]zr66uv~e");
      try { 
        attributes0.html((Appendable) pipedWriter0, (Document.OutputSettings) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("O", "O");
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        attributes1.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("f!qp:c", "f!qp:c");
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      // Undeclared exception!
      try { 
        attributes0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("jlN{FymS~ vx@yr ", "org.jsoup.nodes.Attributes");
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        attributes0.hasKeyIgnoreCase("j#<?Es(#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        attributes0.hasKeyIgnoreCase(stringArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", "org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attributes0.hasKeyIgnoreCase("link");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("O", "O");
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        attributes1.hasKey("P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.hasKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("O", "O");
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attributes1.hasKey("P");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("O", "O");
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        attributes0.getIgnoreCase("P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.getIgnoreCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("pc\"yQ", "pc\"yQ", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.clone();
      Attributes attributes3 = attributes2.put("D~J*`dv=gWZ$B<J;E1", "pc\"yQ");
      String[] stringArray0 = new String[1];
      attributes2.keys = stringArray0;
      // Undeclared exception!
      try { 
        attributes3.getIgnoreCase("D~J*`dv=gWZ$B<J;E1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("iXy}-", "P");
      attributes0.keys = null;
      // Undeclared exception!
      try { 
        attributes0.get("P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.get((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("P", "P");
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attributes0.get("textarea");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes$1", "org.jsoup.nodes.Attributes$1");
      attributes1.vals = null;
      // Undeclared exception!
      try { 
        attributes1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("9 j", true);
      String[] stringArray0 = new String[5];
      attributes1.vals = stringArray0;
      attributes1.vals = null;
      // Undeclared exception!
      try { 
        attributes0.asList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("'N-[d=g;%=]", "", attributes0);
      attributes0.put("", true);
      // Undeclared exception!
      try { 
        attribute0.parent.asList();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("}EEF=nN_(04GI(", "}EEF=nN_(04GI(");
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        attributes0.asList();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.addAll((Attributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = new Attributes();
      String[] stringArray0 = new String[9];
      attributes0.keys = stringArray0;
      Attributes attributes2 = attributes1.put("c", (String) null);
      // Undeclared exception!
      try { 
        attributes0.addAll(attributes2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("QJ+fE", "QJ+fE");
      StringWriter stringWriter0 = new StringWriter(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attributes0.html((Appendable) stringWriter0, document_OutputSettings0);
      assertEquals(" QJ+fE=\"QJ+fE\"", stringWriter0.toString());
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes$1", true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      attributes1.html((Appendable) charArrayWriter0, document_OutputSettings0);
      assertEquals(1, attributes0.size());
      assertEquals(" org.jsoup.nodes.Attributes$1", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.remove("l/X;");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("FA'TF:oCcWZKagn", ")");
      attributes1.put("FA'TF:oCcWZKagn", "FA'TF:oCcWZKagn");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      int int0 = attributes0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Iterator<Attribute> iterator0 = attributes0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("O", "Cf(&[\"");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.normalize();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      
      String[] stringArray0 = new String[2];
      attributes1.keys = stringArray0;
      boolean boolean0 = attributes0.equals(attributes1);
      assertFalse(boolean0);
      assertFalse(attributes1.equals((Object)attributes0));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put("3#^f4nGuS+)_", true);
      boolean boolean0 = attributes2.equals(attributes0);
      assertEquals(1, attributes1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attributes0.equals(document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals(attributes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("   ", true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      attributes1.html((Appendable) mockFileWriter0, document_OutputSettings1);
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("   ", true);
      String string0 = attributes1.toString();
      assertEquals(1, attributes0.size());
      assertEquals("    ", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("P7F yFvs')m^", "");
      Attributes attributes1 = attributes0.put(attribute0);
      String string0 = attributes1.html();
      assertEquals(1, attributes0.size());
      assertEquals(" P7F yFvs')m^=\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("QJ+fE", "QJ+fE");
      attributes0.asList();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.addAll(attributes0);
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("[mEum2odn;", "[mEum2odn;");
      boolean boolean0 = attributes0.hasKeyIgnoreCase("[mEum2odn;");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKeyIgnoreCase("Xyc7A5n\"I^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", "");
      boolean boolean0 = attributes1.hasKey("");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKey("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("&5?n%pjw--<wkg", false);
      attributes1.vals = null;
      // Undeclared exception!
      try { 
        attributes1.put("Cp{5AZg(?j!EVSQLX", "&5?n%pjw--<wkg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("S<)v^", "S<)v^");
      attributes0.put("S<)v^", true);
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("|aqrtb.'2", "|aqrtb.'2", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.putIgnoreCase("|aQrtB.'2", "=\"");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.getIgnoreCase("P");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("QJ+fE", "QJ+fE");
      attributes0.getIgnoreCase("QJ+fE");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.get("P");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("O", "O");
      attributes0.removeIgnoreCase("0[l.4agm");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("'5Du&nSqoz", "");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("", "");
      Attributes attributes3 = attributes2.clone();
      Attributes attributes4 = attributes3.put("+uS5,dmC_S!", " SEv");
      // Undeclared exception!
      try { 
        attributes0.addAll(attributes4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("FA'TF:oCcWZKagn", ")");
      Attribute attribute0 = new Attribute("there is an unread token pending!", "(5u$6p)[Hn<vH", attributes0);
      attributes1.put(attribute0);
      Attributes attributes2 = attributes1.put(")", "(5u$6p)[Hn<vH");
      attributes0.addAll(attributes2);
      Attributes attributes3 = attributes0.put("frameset", true);
      attributes3.addAll(attributes1);
      assertEquals(4, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hashCode();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.html();
  }
}
