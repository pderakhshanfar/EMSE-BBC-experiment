/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:02:45 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      attributes0.putIgnoreCase("org.jsoup.nodes.Attributes$Dataset", "h6");
      assertEquals(1, attributes0.size());
      
      attributes0.keys = null;
      assertEquals(1, attributes0.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertEquals(1, attributes0.size());
      assertNotNull(map0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        attributes0.indexOfKey("k,u4hyh+d-ak");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = "w{qO^=D^Xa`i`AmB\"2";
      Attributes attributes1 = attributes0.put("w{qO^=D^Xa`i`AmB\"2", "w{qO^=D^Xa`i`AmB\"2");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string1 = attributes1.toString();
      assertEquals(" w{qO^=D^Xa`i`AmB\"2=\"w{qO^=D^Xa`i`AmB&quot;2\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(string1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Map<String, String> map0 = attributes1.dataset();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes1.addAll(attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.clone();
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      assertEquals(1, attributes0.size());
      
      attributes2.keys = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      // Undeclared exception!
      try { 
        attributes2.get("org.jsoup.nodes.Attributes$1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Iterator<Attribute> iterator0 = attributes0.iterator();
      assertEquals(0, attributes0.size());
      assertNotNull(iterator0);
      
      Attributes attributes1 = attributes0.put("U", "U");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes1.keys = null;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      String string0 = "3]XYiy";
      // Undeclared exception!
      try { 
        attributes1.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Iterator<Attribute> iterator0 = attributes0.iterator();
      assertEquals(0, attributes0.size());
      assertNotNull(iterator0);
      
      Attributes attributes1 = attributes0.put("U", "U");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes1.keys = null;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
      try { 
        attributes1.hasKey("3]XYiy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = "U";
      Attributes attributes1 = attributes0.put("U", "U");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
      try { 
        attributes1.normalize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = "SPuv}Q,";
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Attributes attributes1 = attributes0.put("SPuv}Q,", true);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attribute attribute0 = Attribute.createFromEncoded("SPuv}Q,", "SPuv}Q,");
      assertEquals("SPuv}Q,", attribute0.getKey());
      assertEquals("SPuv}Q,", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("SPuv}Q,", attribute0.getKey());
      assertEquals("SPuv}Q,", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      String string1 = attributes0.getIgnoreCase("x,qn6wsx+0hv(5$y");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, attributes0.size());
      assertNotNull(string1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      
      Attributes attributes3 = attributes1.put("SPuv}Q,", "x,qn6wsx+0hv(5$y");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      
      Attributes attributes4 = attributes3.put("device", "x,qn6wsx+0hv(5$y");
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes3.size());
      assertEquals(2, attributes4.size());
      assertNotNull(attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes3, attributes4);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "device";
      String string2 = attributes2.get("frameset");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("SPuv}Q,", attribute0.getKey());
      assertEquals("SPuv}Q,", attribute0.getValue());
      assertEquals(2, attributes2.size());
      assertNotNull(string2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      
      int int0 = attributes4.indexOfKey("frameset");
      assertEquals((-1), int0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes3.size());
      assertEquals(2, attributes4.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes3, attributes4);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes0);
      
      attributes3.vals = stringArray0;
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes3.size());
      
      Spliterator<Attribute> spliterator0 = attributes3.spliterator();
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes3.size());
      assertNotNull(spliterator0);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes3, attributes4);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      
      // Undeclared exception!
      try { 
        attributes4.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      attributes0.removeIgnoreCase("Wsff6Sbt}mP!");
      assertEquals(0, attributes0.size());
      
      String string0 = "Li";
      Attributes attributes1 = attributes0.put("Li", "Li");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes0.vals = null;
      assertEquals(1, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put(">", "z4>xX!Dg");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("z4>xX!Dg", true);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      
      String string0 = "EndTag";
      String string1 = "fUX?";
      List<Attribute> list0 = attributes2.asList();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      
      Attribute attribute0 = Attribute.createFromEncoded("EndTag", "fUX?");
      assertEquals("fUX?", attribute0.getValue());
      assertEquals("EndTag", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      assertEquals("fUX?", attribute0.getValue());
      assertEquals("EndTag", attribute0.getKey());
      assertEquals("fUX?", attribute1.getValue());
      assertEquals("EndTag", attribute1.getKey());
      assertNotNull(attribute1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      
      Attributes attributes4 = attributes3.put(attribute1);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes1));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(3, attributes3.size());
      assertEquals("fUX?", attribute0.getValue());
      assertEquals("EndTag", attribute0.getKey());
      assertEquals("fUX?", attribute1.getValue());
      assertEquals("EndTag", attribute1.getKey());
      assertEquals(3, attributes4.size());
      assertNotNull(attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes1);
      assertSame(attributes4, attributes3);
      
      String string2 = "((50<f'M(Fx8";
      attributes4.removeIgnoreCase("((50<f'M(Fx8");
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes1));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(3, attributes3.size());
      assertEquals("fUX?", attribute0.getValue());
      assertEquals("EndTag", attribute0.getKey());
      assertEquals("fUX?", attribute1.getValue());
      assertEquals("EndTag", attribute1.getKey());
      assertEquals(3, attributes4.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes1);
      assertSame(attributes4, attributes3);
      
      boolean boolean0 = attributes4.hasKey("3iOa2hWE7");
      assertFalse(boolean0);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes1));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(3, attributes3.size());
      assertEquals("fUX?", attribute0.getValue());
      assertEquals("EndTag", attribute0.getKey());
      assertEquals("fUX?", attribute1.getValue());
      assertEquals("EndTag", attribute1.getKey());
      assertEquals(3, attributes4.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes1);
      assertSame(attributes4, attributes3);
      
      Attributes attributes5 = attributes1.put(attribute0);
      assertTrue(attributes0.equals((Object)attributes4));
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes1.equals((Object)attributes3));
      assertTrue(attributes1.equals((Object)attributes4));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attributes5.equals((Object)attributes3));
      assertTrue(attributes5.equals((Object)attributes4));
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals("fUX?", attribute0.getValue());
      assertEquals("EndTag", attribute0.getKey());
      assertEquals(3, attributes5.size());
      assertNotNull(attributes5);
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes5);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes5, attributes2);
      assertNotSame(attributes5, attributes3);
      assertSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes4);
      assertSame(attributes5, attributes0);
      
      String[] stringArray0 = new String[0];
      attributes5.keys = stringArray0;
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals("fUX?", attribute0.getValue());
      assertEquals("EndTag", attribute0.getKey());
      assertEquals(3, attributes5.size());
      
      // Undeclared exception!
      try { 
        attributes1.indexOfKey("fUX?");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = new Attributes();
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      Attribute attribute0 = new Attribute("m!g<edbgK3`IbuW/", "I@D[g}5Uhc&f:");
      assertEquals("I@D[g}5Uhc&f:", attribute0.getValue());
      assertEquals("m!g<edbgK3`IbuW/", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(1, attributes1.size());
      assertEquals("I@D[g}5Uhc&f:", attribute0.getValue());
      assertEquals("m!g<edbgK3`IbuW/", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "I@D[g}5Uhc&f:";
      stringArray0[1] = "m!g<edbgK3`IbuW/";
      stringArray0[2] = "I@D[g}5Uhc&f:";
      stringArray0[3] = "I@D[g}5Uhc&f:";
      stringArray0[4] = "m!g<edbgK3`IbuW/";
      stringArray0[5] = "I@D[g}5Uhc&f:";
      Map<String, String> map0 = attributes1.dataset();
      assertFalse(attributes1.equals((Object)attributes0));
      assertEquals(1, attributes1.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      
      attributes0.keys = stringArray0;
      assertEquals(0, attributes0.size());
      
      attributes2.keys = stringArray0;
      assertEquals(1, attributes1.size());
      assertEquals("I@D[g}5Uhc&f:", attribute0.getValue());
      assertEquals("m!g<edbgK3`IbuW/", attribute0.getKey());
      assertEquals(1, attributes2.size());
      
      // Undeclared exception!
      try { 
        attributes0.addAll(attributes2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes0.put("abs:", true);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      Attributes attributes3 = attributes2.put("p!*pj=Eik<|na", "org.jsoup.internal.StringUtil");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes1));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      
      String[] stringArray0 = new String[1];
      String string0 = "^6a:";
      stringArray0[0] = "^6a:";
      boolean boolean0 = attributes3.hasKey("abs:");
      assertTrue(boolean0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes1));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      
      attributes3.keys = stringArray0;
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      // Undeclared exception!
      try { 
        attributes3.getIgnoreCase("org.jsoup.internal.StringUtil");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = "org.jsoup.parser.Token";
      Attributes attributes1 = attributes0.put("org.jsoup.parser.Token", "");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes0.addAll(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string1 = attributes0.toString();
      assertEquals(" org.jsoup.parser.Token=\"\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, attributes0.size());
      assertNotNull(string1);
      assertSame(attributes0, attributes1);
      
      Attributes attributes2 = attributes0.put("org.jsoup.parser.Token", true);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      String string2 = "9\"n";
      String string3 = attributes2.getIgnoreCase("9\"n");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes2.size());
      assertNotNull(string3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " org.jsoup.parser.Token=\"\"");
      assertFalse(charBuffer0.hasArray());
      assertEquals(26, charBuffer0.limit());
      assertEquals(26, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(26, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(26, charBuffer0.remaining());
      assertEquals(" org.jsoup.parser.Token=\"\"", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(415);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(415, document_OutputSettings0.indentAmount());
      assertEquals(415, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(415, document_OutputSettings0.indentAmount());
      assertEquals(415, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(415, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(415, document_OutputSettings0.indentAmount());
      assertEquals(415, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(415, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(415, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      assertEquals(415, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(415, document_OutputSettings0.indentAmount());
      assertEquals(415, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(415, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(415, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertNotNull(document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      
      // Undeclared exception!
      try { 
        attributes2.html((Appendable) charBuffer0, document_OutputSettings4);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("U", "U");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes0.putIgnoreCase("U", "U");
      assertEquals(1, attributes0.size());
      assertSame(attributes0, attributes1);
      
      attributes1.keys = null;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
      try { 
        attributes0.removeIgnoreCase("U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = "Li";
      Attributes attributes1 = attributes0.put("Li", "Li");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes0.vals = null;
      assertEquals(1, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes0.asList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("p", true);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string0 = attributes1.getIgnoreCase("p");
      assertEquals("", string0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(string0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes0.remove(" +3PT-1Hf");
      assertEquals(1, attributes0.size());
      assertSame(attributes0, attributes1);
      
      String string1 = attributes1.get("");
      assertEquals("", string1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(string1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      List<Attribute> list0 = attributes1.asList();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Map<String, String> map0 = attributes1.dataset();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      List<Attribute> list1 = attributes0.asList();
      assertTrue(list1.equals((Object)list0));
      assertEquals(1, attributes0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      assertSame(attributes0, attributes1);
      assertNotSame(list1, list0);
      
      attributes0.keys = null;
      assertEquals(1, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes1.hasKeyIgnoreCase("$AJslK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      attributes0.putIgnoreCase(":te CV2We", ":te CV2We");
      assertEquals(1, attributes0.size());
      
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      assertEquals(1, attributes0.size());
      
      String string0 = "org.jsoup.nodes.Entities";
      // Undeclared exception!
      try { 
        attributes0.hasKeyIgnoreCase("org.jsoup.nodes.Entities");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attribute attribute0 = new Attribute("org.jsoup.parser.Tokeniser", "cvHg_A0cJA1", attributes0);
      assertEquals(0, attributes0.size());
      assertEquals("cvHg_A0cJA1", attribute0.getValue());
      assertEquals("org.jsoup.parser.Tokeniser", attribute0.getKey());
      assertNotNull(attribute0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte) (-98), (byte) (-1), (byte)8, (byte)2, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.jsoup.parser.Tokeniser");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertEquals(1, attributes0.size());
      assertEquals("cvHg_A0cJA1", attribute0.getValue());
      assertEquals("org.jsoup.parser.Tokeniser", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("org.jsoup.parser.Tokeniser", "cvHg_A0cJA1");
      assertEquals(1, attributes0.size());
      assertEquals("cvHg_A0cJA1", attribute0.getValue());
      assertEquals("org.jsoup.parser.Tokeniser", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      Attributes attributes3 = attributes2.put("cvHg_A0cJA1", true);
      assertEquals(2, attributes0.size());
      assertEquals("cvHg_A0cJA1", attribute0.getValue());
      assertEquals("org.jsoup.parser.Tokeniser", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      
      String string0 = attribute0.html();
      assertEquals("org.jsoup.parser.Tokeniser=\"cvHg_A0cJA1\"", string0);
      assertEquals(2, attributes0.size());
      assertEquals("cvHg_A0cJA1", attribute0.getValue());
      assertEquals("org.jsoup.parser.Tokeniser", attribute0.getKey());
      assertNotNull(string0);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      
      String[] stringArray0 = new String[1];
      Comparator<Map.Entry<String, Attributes>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      stringArray0[0] = "org.jsoup.parser.Tokeniser";
      String string1 = attributes3.html();
      assertEquals(" org.jsoup.parser.Tokeniser=\"cvHg_A0cJA1\" cvHg_A0cJA1", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, attributes0.size());
      assertEquals("cvHg_A0cJA1", attribute0.getValue());
      assertEquals("org.jsoup.parser.Tokeniser", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotNull(string1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      
      attributes3.keys = stringArray0;
      assertEquals(2, attributes0.size());
      assertEquals("cvHg_A0cJA1", attribute0.getValue());
      assertEquals("org.jsoup.parser.Tokeniser", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      Iterator<Attribute> iterator0 = attributes3.iterator();
      assertEquals(2, attributes0.size());
      assertEquals("cvHg_A0cJA1", attribute0.getValue());
      assertEquals("org.jsoup.parser.Tokeniser", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotNull(iterator0);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      
      // Undeclared exception!
      try { 
        attributes1.remove("org.jsoup.parser.Tokeniser=\"cvHg_A0cJA1\"");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      assertEquals(0, attributes0.size());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Attributes attributes1 = attributes0.put("z+~HRF=", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string0 = attributes1.toString();
      assertEquals(" z+~HRF==\"org.jsoup.nodes.Attributes$Dataset$EntrySet\"", string0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(string0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Iterator<Attribute> iterator0 = attributes1.iterator();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(iterator0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes1.keys = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
      try { 
        attributes1.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("`&cCWv7cNj?D;2_g 8", false);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`&cCWv7cNj?D;2_g 8";
      stringArray0[1] = "`&cCWv7cNj?D;2_g 8";
      attributes0.vals = stringArray0;
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("{Iaz_Xt?5$ARw}P*", "");
      assertEquals("", attribute0.getValue());
      assertEquals("{Iaz_Xt?5$ARw}P*", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("", attribute0.getValue());
      assertEquals("{Iaz_Xt?5$ARw}P*", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      int int0 = attributes1.indexOfKey("");
      assertEquals((-1), int0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      assertEquals("", attribute0.getValue());
      assertEquals("{Iaz_Xt?5$ARw}P*", attribute0.getKey());
      assertEquals("", attribute1.getValue());
      assertEquals("{Iaz_Xt?5$ARw}P*", attribute1.getKey());
      assertNotNull(attribute1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      
      Iterator<Attribute> iterator0 = attributes1.iterator();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(iterator0);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      
      Attributes attributes3 = attributes0.clone();
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      
      String string0 = attributes3.toString();
      assertEquals(" {Iaz_Xt?5$ARw}P*=\"\"", string0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes3.size());
      assertNotNull(string0);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      
      String string1 = attributes0.getIgnoreCase("s0)G6V>OUU");
      assertEquals("", string1);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, attributes0.size());
      assertNotNull(string1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      
      int int1 = attributes1.size();
      assertEquals(1, int1);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(int1 == int0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      
      boolean boolean0 = attributes1.hasKeyIgnoreCase(":::+!_]l6+.%tTu");
      assertFalse(boolean0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      
      Map<String, String> map0 = attributes1.dataset();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(map0);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      
      attributes1.removeIgnoreCase("|Q");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      attributes2.normalize();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(attributes2.equals((Object)attributes3));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("", attribute0.getValue());
      assertEquals("{Iaz_Xt?5$ARw}P*", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      
      Map<String, String> map1 = attributes1.dataset();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertTrue(map1.equals((Object)map0));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertNotNull(map1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(map1, map0);
      
      Map<String, String> map2 = attributes2.dataset();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertTrue(map2.equals((Object)map0));
      assertTrue(map2.equals((Object)map1));
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(attributes2.equals((Object)attributes3));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      assertEquals("", attribute0.getValue());
      assertEquals("{Iaz_Xt?5$ARw}P*", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertNotNull(map2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(map2, map1);
      assertNotSame(map2, map0);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      attributes0.vals = stringArray1;
      assertEquals(1, attributes0.size());
      
      int int2 = attributes0.indexOfKey("");
      assertEquals((-1), int2);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, attributes0.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      
      attributes2.remove("org.jsoup.nodes.Attributes$Dataset$EntrySet");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(attributes2.equals((Object)attributes3));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("", attribute0.getValue());
      assertEquals("{Iaz_Xt?5$ARw}P*", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = attributes3.equals(object0);
      assertFalse(boolean1);
      assertFalse(attributes0.equals((Object)attributes3));
      assertTrue(boolean1 == boolean0);
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes3.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      
      boolean boolean2 = attributes3.hasKeyIgnoreCase("");
      assertFalse(boolean2);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes3.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      
      PipedReader pipedReader0 = new PipedReader(1);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        attributes1.html((Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      attributes0.putIgnoreCase("org.jsoup.nodes.Attributes$Dataset", "h6");
      assertEquals(1, attributes0.size());
      
      attributes0.keys = null;
      assertEquals(1, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes0.get("org.jsoup.nodes.Attributes$Dataset");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      attributes0.vals = null;
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes0.put("&quot;", "Y~5B?6.>OZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String[] stringArray0 = new String[8];
      String string0 = "org.jsoup.select.Evaluator$Class";
      stringArray0[0] = "org.jsoup.select.Evaluator$Class";
      stringArray0[1] = "p-lx0oyr|VNn$hw*-$";
      stringArray0[2] = "V";
      stringArray0[3] = "L";
      stringArray0[4] = "F)o'ccZ'qHbr~";
      stringArray0[5] = "10\"&1[rJ?6>Q\"8Zlo{";
      stringArray0[6] = "hidden";
      stringArray0[7] = "b[+<2$.YOe:}5RPSU>";
      attributes0.keys = stringArray0;
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("Y\"F&?+lJ&Vg<9>\"O).", "Y\"F&?+lJ&Vg<9>\"O).");
      assertEquals("Y\"F&?+lJ&Vg<9>\"O).", attribute0.getValue());
      assertEquals("Y\"F&?+lJ&Vg<9>\"O).", attribute0.getKey());
      assertNotNull(attribute0);
      
      // Undeclared exception!
      try { 
        attributes0.put(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("Li", "Li");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes1.keys = null;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
      try { 
        attributes1.normalize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      attributes0.vals = null;
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("Li", "Li");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes0.vals = null;
      assertEquals(1, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes1.remove("Li");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Attributes attributes1 = attributes0.put("erw\"9", "t+E }f|^mDd-.");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Map<String, String> map0 = attributes1.dataset();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attribute attribute0 = new Attribute("t+E }f|^mDd-.", "t+E }f|^mDd-.", attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("t+E }f|^mDd-.", attribute0.getKey());
      assertEquals("t+E }f|^mDd-.", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("t+E }f|^mDd-.", attribute0.getKey());
      assertEquals("t+E }f|^mDd-.", attribute0.getValue());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      String string0 = ";cu!~b.d=!zbb1ph";
      Attributes attributes3 = attributes1.put(";cu!~b.d=!zbb1ph", true);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes3.size());
      assertNotNull(attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      
      int int0 = attributes3.indexOfKey(";cu!~b.d=!zbb1ph");
      assertEquals(2, int0);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes3.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      
      attributes0.addAll(attributes1);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = 'w';
      charArray0[2] = '&';
      charArray0[3] = '7';
      charArray0[4] = 'B';
      charArray0[5] = 'D';
      charArray0[6] = '>';
      charArray0[7] = 'w';
      charArray0[8] = 'd';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 2, 2);
      assertArrayEquals(new char[] {'&', 'w', '&', '7', 'B', 'D', '>', 'w', 'd'}, charArray0);
      assertEquals(2, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("&7", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertNotNull(charBuffer0);
      assertEquals(9, charArray0.length);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(0, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertNotNull(document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      
      // Undeclared exception!
      try { 
        attributes1.html((Appendable) charBuffer0, document_OutputSettings4);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      attributes0.keys = null;
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes0.putIgnoreCase("z+~RF=", "z+~RF=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = "org.jsoup.nodes.Attributes$Dataset";
      EvoSuiteFile evoSuiteFile0 = null;
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      assertEquals(0, attributes0.size());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      String string1 = "z+~HRF=";
      String string2 = "org.jsoup.nodes.Attributes$Dataset$EntrySet";
      Attributes attributes1 = attributes0.put("z+~HRF=", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string3 = attributes1.toString();
      assertEquals(" z+~HRF==\"org.jsoup.nodes.Attributes$Dataset$EntrySet\"", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(string3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = true;
      attributes1.keys = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
      try { 
        attributes0.asList();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      attributes0.putIgnoreCase("org.jsoup.nodes.Attributes$Dataset", "h6");
      assertEquals(1, attributes0.size());
      
      attributes0.keys = null;
      assertEquals(1, attributes0.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertEquals(1, attributes0.size());
      assertNotNull(map0);
      
      // Undeclared exception!
      try { 
        attributes0.put("F~9", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      attributes0.putIgnoreCase(":te CV2We", ":te CV2We");
      assertEquals(1, attributes0.size());
      
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      assertEquals(1, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes0.removeIgnoreCase("org.jsoup.nodes.Entities");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("declare", true);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      Attribute attribute0 = new Attribute("DoctypePublicIdentifier_doubleQuoted", "l\"");
      assertEquals("l\"", attribute0.getValue());
      assertEquals("DoctypePublicIdentifier_doubleQuoted", attribute0.getKey());
      assertNotNull(attribute0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(5);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('J');
      assertEquals(1, charArrayWriter0.size());
      assertEquals("J", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("J", charArrayWriter1.toString());
      assertNotNull(charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "declare");
      assertEquals(8, charArrayWriter0.size());
      assertEquals("Jdeclare", charArrayWriter0.toString());
      assertEquals(8, charArrayWriter1.size());
      assertEquals("Jdeclare", charArrayWriter1.toString());
      assertEquals(8, charArrayWriter2.size());
      assertEquals("Jdeclare", charArrayWriter2.toString());
      assertNotNull(charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(5);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(5, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(5, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(5, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(5, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(5, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(5, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(5, document_OutputSettings3.indentAmount());
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(5, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(5, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(5, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(5, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(5, document_OutputSettings4.indentAmount());
      assertNotNull(document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      
      attributes1.html((Appendable) charArrayWriter2, document_OutputSettings4);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(16, charArrayWriter0.size());
      assertEquals("Jdeclare declare", charArrayWriter0.toString());
      assertEquals(16, charArrayWriter1.size());
      assertEquals("Jdeclare declare", charArrayWriter1.toString());
      assertEquals("Jdeclare declare", charArrayWriter2.toString());
      assertEquals(16, charArrayWriter2.size());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(5, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(5, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(5, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(5, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(5, document_OutputSettings4.indentAmount());
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      
      Attributes attributes3 = attributes2.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("l\"", attribute0.getValue());
      assertEquals("DoctypePublicIdentifier_doubleQuoted", attribute0.getKey());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      
      attributes3.normalize();
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("l\"", attribute0.getValue());
      assertEquals("DoctypePublicIdentifier_doubleQuoted", attribute0.getKey());
      assertEquals(2, attributes3.size());
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = attributes0.getIgnoreCase("Ps%^Hq&TS;A~");
      assertEquals("", string0);
      assertEquals(0, attributes0.size());
      assertNotNull(string0);
      
      String string1 = attributes0.getIgnoreCase("Ps%^Hq&TS;A~");
      assertEquals("", string1);
      assertEquals(0, attributes0.size());
      assertNotNull(string1);
      
      attributes0.removeIgnoreCase("Ps%^Hq&TS;A~");
      assertEquals(0, attributes0.size());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Ps%^Hq&TS;A~";
      stringArray0[1] = "ruby";
      stringArray0[2] = "";
      attributes0.keys = stringArray0;
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes0.put("Ps%^Hq&TS;A~", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      attributes0.normalize();
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      Map<String, String> map0 = attributes0.dataset();
      assertTrue(attributes0.equals((Object)attributes1));
      assertEquals(0, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertNotSame(attributes0, attributes1);
      
      String string0 = attributes1.toString();
      assertEquals("", string0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(string0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      attributes0.normalize();
      assertTrue(attributes0.equals((Object)attributes1));
      assertEquals(0, attributes0.size());
      assertNotSame(attributes0, attributes1);
      
      Attributes attributes2 = attributes1.put("", true);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      Attributes attributes3 = attributes2.put("big", "big");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      
      Attributes attributes4 = attributes2.clone();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes1));
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes4.size());
      assertNotNull(attributes4);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes1);
      
      attributes3.normalize();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes4));
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes4);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^6uk$:6clzb'lw8)~zr");
      assertFalse(boolean0);
      
      Attributes attributes5 = attributes0.put("E!J*dlUdq-}SMe", "DoctypePublicIdentifier_doubleQuoted");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes3));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes5.size());
      assertNotNull(attributes5);
      assertSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes2);
      assertNotSame(attributes5, attributes3);
      
      attributes4.putIgnoreCase("big", "org.jsoup.nodes.Attributes$1");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes5));
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes4.size());
      assertSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes5);
      
      Attributes attributes6 = attributes0.clone();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes6.equals((Object)attributes0));
      assertFalse(attributes6.equals((Object)attributes1));
      assertFalse(attributes6.equals((Object)attributes2));
      assertFalse(attributes6.equals((Object)attributes5));
      assertFalse(attributes6.equals((Object)attributes4));
      assertFalse(attributes6.equals((Object)attributes3));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes6.size());
      assertNotNull(attributes6);
      assertSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes6);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes6, attributes0);
      assertNotSame(attributes6, attributes1);
      assertNotSame(attributes6, attributes2);
      assertNotSame(attributes6, attributes5);
      assertNotSame(attributes6, attributes4);
      assertNotSame(attributes6, attributes3);
      
      attributes0.addAll(attributes6);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes4));
      assertTrue(attributes0.equals((Object)attributes6));
      assertTrue(attributes6.equals((Object)attributes0));
      assertFalse(attributes6.equals((Object)attributes1));
      assertFalse(attributes6.equals((Object)attributes2));
      assertFalse(attributes6.equals((Object)attributes4));
      assertTrue(attributes6.equals((Object)attributes5));
      assertFalse(attributes6.equals((Object)attributes3));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes6.size());
      assertSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes6);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes6, attributes0);
      assertNotSame(attributes6, attributes1);
      assertNotSame(attributes6, attributes2);
      assertNotSame(attributes6, attributes5);
      assertNotSame(attributes6, attributes4);
      assertNotSame(attributes6, attributes3);
      
      boolean boolean1 = attributes2.equals(attributes6);
      assertFalse(boolean1);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes4));
      assertTrue(attributes0.equals((Object)attributes6));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes1.equals((Object)attributes6));
      assertFalse(attributes2.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes6));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertTrue(attributes6.equals((Object)attributes0));
      assertFalse(attributes6.equals((Object)attributes1));
      assertFalse(attributes6.equals((Object)attributes2));
      assertFalse(attributes6.equals((Object)attributes4));
      assertTrue(attributes6.equals((Object)attributes5));
      assertFalse(attributes6.equals((Object)attributes3));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(1, attributes6.size());
      assertSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes6);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes6);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes6);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes6, attributes0);
      assertNotSame(attributes6, attributes1);
      assertNotSame(attributes6, attributes2);
      assertNotSame(attributes6, attributes5);
      assertNotSame(attributes6, attributes4);
      assertNotSame(attributes6, attributes3);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = attributes0.toString();
      assertEquals("", string0);
      assertEquals(0, attributes0.size());
      assertNotNull(string0);
      
      Attributes attributes1 = attributes0.put("", "");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.clone();
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      String string1 = Attributes.dataPrefix;
      assertEquals("data-", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Attributes attributes3 = new Attributes();
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertEquals(0, attributes3.size());
      assertNotNull(attributes3);
      
      // Undeclared exception!
      try { 
        attributes3.addAll(attributes1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      attributes0.normalize();
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      Map<String, String> map0 = attributes0.dataset();
      assertTrue(attributes0.equals((Object)attributes1));
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertNotSame(attributes0, attributes1);
      
      String string0 = attributes1.toString();
      assertEquals("", string0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(string0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      attributes0.normalize();
      assertTrue(attributes0.equals((Object)attributes1));
      assertEquals(0, attributes0.size());
      assertNotSame(attributes0, attributes1);
      
      String string1 = attributes1.html();
      assertEquals("", string1);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(string1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      attributes0.normalize();
      assertTrue(attributes0.equals((Object)attributes1));
      assertEquals(0, attributes0.size());
      assertNotSame(attributes0, attributes1);
      
      String string2 = attributes0.getIgnoreCase("PMEbGj~");
      assertEquals("", string2);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(0, attributes0.size());
      assertNotNull(string2);
      assertNotSame(attributes0, attributes1);
      
      Attributes attributes2 = attributes0.put("PMEbGj~", "");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append(')');
      assertEquals(")", stringWriter0.toString());
      assertEquals(")", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertEquals(")", stringWriter0.toString());
      assertEquals(")", stringWriter1.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals(")", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(585);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(585, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(585, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(585, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      attributes2.html((Appendable) stringBuffer0, document_OutputSettings2);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes1));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(585, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes2.size());
      assertEquals(") PMEbGj~=\"\"", stringWriter0.toString());
      assertEquals(") PMEbGj~=\"\"", stringWriter1.toString());
      assertEquals(") PMEbGj~=\"\"", stringBuffer0.toString());
      assertEquals(12, stringBuffer0.length());
      assertEquals(585, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(585, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      attributes0.putIgnoreCase("org.jsoup.nodes.Document", "#3\"a!%IJ^-6eaDmKpC");
      assertFalse(attributes0.equals((Object)attributes1));
      assertEquals(2, attributes0.size());
      assertNotSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      
      Attributes attributes3 = attributes0.clone();
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      
      int int0 = attributes1.size();
      assertEquals(0, int0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertEquals(2, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", "tbody");
      assertEquals("tbody", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      assertEquals("tbody", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", attribute0.getKey());
      assertEquals("tbody", attribute1.getValue());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", attribute1.getKey());
      assertNotNull(attribute1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      
      Attributes attributes1 = attributes0.put(attribute1);
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertEquals(1, attributes0.size());
      assertEquals("tbody", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", attribute0.getKey());
      assertEquals("tbody", attribute1.getValue());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", attribute1.getKey());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("bh9 5>be+(dub", "r_huxl");
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertEquals(2, attributes0.size());
      assertEquals("tbody", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", attribute0.getKey());
      assertEquals("tbody", attribute1.getValue());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", attribute1.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      int int0 = attributes2.indexOfKey("bh9 5>be+(dub");
      assertEquals(1, int0);
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertEquals(2, attributes0.size());
      assertEquals("tbody", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", attribute0.getKey());
      assertEquals("tbody", attribute1.getValue());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", attribute1.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      String string0 = attributes2.html();
      assertEquals(" org.jsoup.nodes.Attributes$Dataset$DatasetIterator=\"tbody\" bh9 5>be+(dub=\"r_huxl\"", string0);
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertEquals(2, attributes0.size());
      assertEquals("tbody", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", attribute0.getKey());
      assertEquals("tbody", attribute1.getValue());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", attribute1.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotNull(string0);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("]Q*{h-e[", true);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("org.jsoup.nodes.Attributes$Dataset", "org.jsoup.nodes.Attributes$Dataset");
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      attributes1.normalize();
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      
      Attributes attributes3 = attributes2.put("org.jso1p.nodes.Attributes$Dataset$EntrySet", "org.jsoup.nodes.Attributes$Dataset");
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertEquals(3, attributes3.size());
      assertNotNull(attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      
      Attributes attributes4 = attributes0.clone();
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes0));
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes4.size());
      assertNotNull(attributes4);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      
      String string0 = Attributes.dataPrefix;
      assertEquals("data-", string0);
      assertNotNull(string0);
      
      Attributes attributes5 = new Attributes();
      assertFalse(attributes5.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes0));
      assertEquals(0, attributes5.size());
      assertNotNull(attributes5);
      
      attributes0.addAll(attributes1);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes4));
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      attributes0.keys = null;
      assertEquals(0, attributes0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = attributes0.hasKeyIgnoreCase("'?O[WDZd12(upn\u0002");
      assertFalse(boolean0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("+7.<?", "4Soz;Gr#|4ExzE.");
      assertEquals("+7.<?", attribute0.getKey());
      assertEquals("4Soz;Gr#|4ExzE.", attribute0.getValue());
      assertNotNull(attribute0);
      
      // Undeclared exception!
      try { 
        attributes0.put(attribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes$Dat!set$EntrySet", true);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "DoctypePublicIdentifier_doubleQuoted";
      stringArray0[1] = "DoctypePublicIdentifier_doubleQuoted";
      stringArray0[2] = "_HUXL";
      stringArray0[3] = "DoctypePublicIdentifier_doubleQuoted";
      stringArray0[4] = "org.jsoup.nodes.Attributes$Dat!set$EntrySet";
      attributes1.keys = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes0.put("DoctypePublicIdentifier_doubleQuoted", "org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      Attributes attributes3 = attributes2.put("org.jsoup.nodes.Attributes$Dataset", "ScriptDataEscapedDashDash");
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      
      attributes1.putIgnoreCase("ScriptDataEscapedDashDash", "V8}Z]K ojQm|~");
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      
      boolean boolean0 = attributes2.hasKeyIgnoreCase("org.jsoup.nodes.Attributes$Dat!set$EntrySet");
      assertFalse(boolean0);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes2.size());
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      
      int int0 = attributes0.size();
      assertEquals(3, int0);
      assertEquals(3, attributes0.size());
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      
      attributes2.addAll(attributes0);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes2.size());
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("'P", "&An{+aVar)UYB:");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.clone();
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      Attribute attribute0 = new Attribute("'P", "&An{+aVar)UYB:");
      assertEquals("'P", attribute0.getKey());
      assertEquals("&An{+aVar)UYB:", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes3 = attributes2.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("'P", attribute0.getKey());
      assertEquals("&An{+aVar)UYB:", attribute0.getValue());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      
      String string0 = attributes3.get("'P");
      assertEquals("&An{+aVar)UYB:", string0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("'P", attribute0.getKey());
      assertEquals("&An{+aVar)UYB:", attribute0.getValue());
      assertEquals(1, attributes3.size());
      assertNotNull(string0);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      
      int int0 = attributes1.indexOfKey("&An{+aVar)UYB:");
      assertEquals((-1), int0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      
      Comparator<Map.Entry<String, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      attributes2.remove("^'U$WC%oh9");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      
      int int1 = attributes1.indexOfKey("^'U$WC%oh9");
      assertEquals((-1), int1);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertTrue(int1 == int0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      assertEquals("'P", attribute0.getKey());
      assertEquals("&An{+aVar)UYB:", attribute0.getValue());
      assertEquals("&An{+aVar)UYB:", attribute1.getValue());
      assertEquals("'P", attribute1.getKey());
      assertNotNull(attribute1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      
      Attributes attributes4 = attributes1.put(attribute1);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("'P", attribute0.getKey());
      assertEquals("&An{+aVar)UYB:", attribute0.getValue());
      assertEquals("&An{+aVar)UYB:", attribute1.getValue());
      assertEquals("'P", attribute1.getKey());
      assertEquals(1, attributes4.size());
      assertNotNull(attributes4);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes4);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "^'U$WC%oh9";
      stringArray0[1] = "^'U$WC%oh9";
      stringArray0[2] = "&An{+aVar)UYB:";
      stringArray0[3] = "&An{+aVar)UYB:";
      stringArray0[4] = "&An{+aVar)UYB:";
      stringArray0[5] = "^'U$WC%oh9";
      attributes4.keys = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("'P", attribute0.getKey());
      assertEquals("&An{+aVar)UYB:", attribute0.getValue());
      assertEquals("&An{+aVar)UYB:", attribute1.getValue());
      assertEquals("'P", attribute1.getKey());
      assertEquals(1, attributes4.size());
      
      attributes3.normalize();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes1));
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("'P", attribute0.getKey());
      assertEquals("&An{+aVar)UYB:", attribute0.getValue());
      assertEquals(1, attributes3.size());
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes4);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      
      Iterator<Attribute> iterator0 = attributes4.iterator();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("'P", attribute0.getKey());
      assertEquals("&An{+aVar)UYB:", attribute0.getValue());
      assertEquals("&An{+aVar)UYB:", attribute1.getValue());
      assertEquals("'P", attribute1.getKey());
      assertEquals(1, attributes4.size());
      assertNotNull(iterator0);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes4);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      
      // Undeclared exception!
      try { 
        attributes0.put("w[vG;r8B;m@-", "'P");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("]Q*{h-e[", true);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("org.jsoup.nodes.Attributes$Dataset", "nGq-n8:[C%");
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      Attributes attributes3 = attributes0.clone();
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      
      String string0 = attributes3.html();
      assertEquals(" ]Q*{h-e[ org.jsoup.nodes.Attributes$Dataset=\"nGq-n8:[C%\"", string0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes3.size());
      assertNotNull(string0);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      
      attributes3.normalize();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes3.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      
      Map<String, String> map0 = attributes2.dataset();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      
      attributes3.remove("org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes3.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      
      Attributes attributes4 = attributes2.clone();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertTrue(attributes4.equals((Object)attributes2));
      assertTrue(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertTrue(attributes4.equals((Object)attributes0));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes4.size());
      assertNotNull(attributes4);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes1);
      
      // Undeclared exception!
      try { 
        attributes4.html((Appendable) null, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("yl=WdtY:$H-:Lofp", "yl=WdtY:$H-:Lofp");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      Attributes attributes3 = attributes2.put("disabled", true);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      
      String string0 = "MS8y(NV6U}l{K\"yU[AY";
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Document$OutputSettings$Syntax", "MS8y(NV6U}l{K\"yU[AY", attributes1);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("MS8y(NV6U}l{K\"yU[AY", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attributes attributes4 = attributes3.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertEquals(3, attributes3.size());
      assertEquals("MS8y(NV6U}l{K\"yU[AY", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", attribute0.getKey());
      assertEquals(3, attributes4.size());
      assertNotNull(attributes4);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes2);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      
      try { 
        attributes4.html((Appendable) pipedWriter0, document_OutputSettings1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1M/%{7s");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Attribute attribute0 = new Attribute("m/r.9@tfizi=", "m/r.9@tfizi=");
      assertEquals("m/r.9@tfizi=", attribute0.getKey());
      assertEquals("m/r.9@tfizi=", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("m/r.9@tfizi=", attribute0.getKey());
      assertEquals("m/r.9@tfizi=", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      Attributes attributes3 = attributes2.put("m/r.9@tfizi=", true);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("m/r.9@tfizi=", attribute0.getKey());
      assertEquals("m/r.9@tfizi=", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3170);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(3170);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(3170, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(3170, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(3170, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(3170, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(3170, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(3170, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(3170, document_OutputSettings3.indentAmount());
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(3170, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(3170, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(3170, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(3170, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(3170, document_OutputSettings4.indentAmount());
      assertNotNull(document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(3170, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(3170, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(3170, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(3170, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertTrue(document_OutputSettings5.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertEquals(3170, document_OutputSettings5.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertNotNull(document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings5);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertNotSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      
      attributes2.removeIgnoreCase("{qk^odC^");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("m/r.9@tfizi=", attribute0.getKey());
      assertEquals("m/r.9@tfizi=", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      attributes3.html((Appendable) charArrayWriter0, document_OutputSettings5);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("m/r.9@tfizi=", attribute0.getKey());
      assertEquals("m/r.9@tfizi=", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals(" m/r.9@tfizi==\"\"", charArrayWriter0.toString());
      assertEquals(16, charArrayWriter0.size());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(3170, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(3170, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(3170, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(3170, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertTrue(document_OutputSettings5.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertEquals(3170, document_OutputSettings5.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings5);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertNotSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      
      Attributes attributes4 = attributes3.put("doctypesystemidentifier_doublequoted", "a");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes4.size());
      assertEquals(2, attributes1.size());
      assertEquals("m/r.9@tfizi=", attribute0.getKey());
      assertEquals("m/r.9@tfizi=", attribute0.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes4);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes4);
      
      Attributes attributes5 = attributes4.put("data-", "doctypesystemidentifier_doublequoted");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(3, attributes4.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes5.size());
      assertEquals("m/r.9@tfizi=", attribute0.getKey());
      assertEquals("m/r.9@tfizi=", attribute0.getValue());
      assertEquals(3, attributes2.size());
      assertEquals(3, attributes3.size());
      assertNotNull(attributes5);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes5);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes5);
      assertNotSame(attributes5, attributes0);
      assertSame(attributes5, attributes2);
      assertSame(attributes5, attributes4);
      assertSame(attributes5, attributes1);
      assertSame(attributes5, attributes3);
      assertSame(attributes2, attributes5);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes5);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes4);
      
      String string0 = attributes4.getIgnoreCase("data-");
      assertEquals("doctypesystemidentifier_doublequoted", string0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(3, attributes4.size());
      assertEquals(3, attributes1.size());
      assertEquals("m/r.9@tfizi=", attribute0.getKey());
      assertEquals("m/r.9@tfizi=", attribute0.getValue());
      assertEquals(3, attributes2.size());
      assertEquals(3, attributes3.size());
      assertNotNull(string0);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes5);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes5);
      assertSame(attributes2, attributes5);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes5);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes4);
      
      // Undeclared exception!
      try { 
        attributes2.remove((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = Attributes.dataPrefix;
      assertEquals("data-", string0);
      assertNotNull(string0);
      
      Iterator<Attribute> iterator0 = attributes0.iterator();
      assertEquals(0, attributes0.size());
      assertNotNull(iterator0);
      
      Attributes attributes1 = attributes0.put("data-", false);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Map<String, String> map0 = attributes1.dataset();
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes1.remove(" aS}q3NC");
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string1 = attributes1.html();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(string1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes1.html((Appendable) null, (Document.OutputSettings) null);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("Ps%^Hq&TS;A~", true);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes0.put("l9cF-~9}", "Ps%^Hq&TS;A~");
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      int int0 = attributes2.indexOfKey("]@dm-E8");
      assertEquals((-1), int0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      Attributes attributes3 = attributes2.put("`scm+a!4aqu..b", "Ps%^Hq&TS;A~");
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes2.size());
      assertEquals(3, attributes3.size());
      assertNotNull(attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      
      Attributes attributes4 = attributes1.clone();
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes4.size());
      assertNotNull(attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      
      attributes4.normalize();
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes4.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      
      Attributes attributes5 = attributes4.put(",=jXZN^&8", "l9cF-~9}");
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes3));
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(4, attributes4.size());
      assertEquals(4, attributes5.size());
      assertNotNull(attributes5);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes5);
      assertSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes2);
      assertNotSame(attributes5, attributes3);
      
      Attributes attributes6 = attributes4.put("AFAAJ%X", true);
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes6.equals((Object)attributes2));
      assertFalse(attributes6.equals((Object)attributes3));
      assertFalse(attributes6.equals((Object)attributes0));
      assertFalse(attributes6.equals((Object)attributes1));
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(5, attributes4.size());
      assertEquals(5, attributes6.size());
      assertNotNull(attributes6);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes6);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes1, attributes6);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes6);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes5);
      assertNotSame(attributes6, attributes2);
      assertSame(attributes6, attributes5);
      assertNotSame(attributes6, attributes3);
      assertSame(attributes6, attributes4);
      assertNotSame(attributes6, attributes0);
      assertNotSame(attributes6, attributes1);
      
      Attributes attributes7 = attributes2.put("]VJXI1:b", "l9cF-~9}");
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes6));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes6));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes7.equals((Object)attributes5));
      assertFalse(attributes7.equals((Object)attributes6));
      assertFalse(attributes7.equals((Object)attributes4));
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes7.size());
      assertNotNull(attributes7);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes7);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes6);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes7);
      assertNotSame(attributes2, attributes6);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes7, attributes5);
      assertSame(attributes7, attributes2);
      assertSame(attributes7, attributes3);
      assertSame(attributes7, attributes0);
      assertSame(attributes7, attributes1);
      assertNotSame(attributes7, attributes6);
      assertNotSame(attributes7, attributes4);
      
      String string0 = attributes0.html();
      assertEquals(" Ps%^Hq&TS;A~ l9cF-~9}=\"Ps%^Hq&amp;TS;A~\" `scm+a!4aqu..b=\"Ps%^Hq&amp;TS;A~\" ]VJXI1:b=\"l9cF-~9}\"", string0);
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes6));
      assertFalse(attributes0.equals((Object)attributes4));
      assertEquals(4, attributes0.size());
      assertNotNull(string0);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes7);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes6);
      assertNotSame(attributes0, attributes4);
      
      String string1 = attributes7.toString();
      assertEquals(" Ps%^Hq&TS;A~ l9cF-~9}=\"Ps%^Hq&amp;TS;A~\" `scm+a!4aqu..b=\"Ps%^Hq&amp;TS;A~\" ]VJXI1:b=\"l9cF-~9}\"", string1);
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes6));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes6));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes7.equals((Object)attributes5));
      assertFalse(attributes7.equals((Object)attributes6));
      assertFalse(attributes7.equals((Object)attributes4));
      assertTrue(string1.equals((Object)string0));
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes7.size());
      assertNotNull(string1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes7);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes6);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes7);
      assertNotSame(attributes2, attributes6);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes7, attributes5);
      assertSame(attributes7, attributes2);
      assertSame(attributes7, attributes3);
      assertSame(attributes7, attributes0);
      assertSame(attributes7, attributes1);
      assertNotSame(attributes7, attributes6);
      assertNotSame(attributes7, attributes4);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      attributes1.addAll(attributes0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Attributes attributes2 = attributes1.put("r&>+/|b", "r&>+/|b");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      attributes1.putIgnoreCase("r&>+/|b", "r&>+/|b");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      
      int int0 = attributes0.size();
      assertEquals(0, int0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertEquals(0, attributes0.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("]Q*{h-e[", true);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("org.jsoup.nodes.Attributes$Dataset", "nGq-n8:[C%");
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      Attributes attributes3 = attributes0.clone();
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      
      String string0 = attributes3.html();
      assertEquals(" ]Q*{h-e[ org.jsoup.nodes.Attributes$Dataset=\"nGq-n8:[C%\"", string0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes3.size());
      assertNotNull(string0);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      
      attributes3.normalize();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes3.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      
      Attributes attributes4 = attributes0.put("DoctypePublicIdentifier_doubleQuoted", "DoctypePublicIdentifier_doubleQuoted");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes3));
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes4.size());
      assertNotNull(attributes4);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes2);
      
      Attributes attributes5 = attributes4.put("|bb9xe/cys6{|\"wzn", true);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes3));
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes4.size());
      assertEquals(4, attributes5.size());
      assertNotNull(attributes5);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes5);
      assertSame(attributes4, attributes2);
      assertSame(attributes5, attributes1);
      assertSame(attributes5, attributes2);
      assertSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes3);
      assertSame(attributes5, attributes4);
      
      Attributes attributes6 = attributes1.put("nGq-n8:[C%", "]Q*{h-e[");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes6.equals((Object)attributes3));
      assertEquals(5, attributes0.size());
      assertEquals(5, attributes1.size());
      assertEquals(5, attributes6.size());
      assertNotNull(attributes6);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes6);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes6);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes6, attributes3);
      assertSame(attributes6, attributes5);
      assertSame(attributes6, attributes1);
      assertSame(attributes6, attributes2);
      assertSame(attributes6, attributes0);
      assertSame(attributes6, attributes4);
      
      String string1 = attributes6.getIgnoreCase(">D=H%p;+m");
      assertEquals("", string1);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes6.equals((Object)attributes3));
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, attributes0.size());
      assertEquals(5, attributes1.size());
      assertEquals(5, attributes6.size());
      assertNotNull(string1);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes6);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes6);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes6, attributes3);
      assertSame(attributes6, attributes5);
      assertSame(attributes6, attributes1);
      assertSame(attributes6, attributes2);
      assertSame(attributes6, attributes0);
      assertSame(attributes6, attributes4);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("Ps%^Hq&TS;A~", true);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Attribute attribute0 = new Attribute("Ps%^Hq&TS;A~", "Ps%^Hq&TS;A~");
      assertEquals("Ps%^Hq&TS;A~", attribute0.getKey());
      assertEquals("Ps%^Hq&TS;A~", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("Ps%^Hq&TS;A~", attribute0.getKey());
      assertEquals("Ps%^Hq&TS;A~", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      Attributes attributes3 = attributes2.put("Ps%^Hq&TS;A~", true);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("Ps%^Hq&TS;A~", attribute0.getKey());
      assertEquals("Ps%^Hq&TS;A~", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      
      Comparator<Map.Entry<Attributes, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Attributes attributes4 = attributes2.clone();
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("Ps%^Hq&TS;A~", attribute0.getKey());
      assertEquals("Ps%^Hq&TS;A~", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes4.size());
      assertNotNull(attributes4);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes2);
      
      String string0 = ".?To";
      attributes0.remove(".?To");
      assertFalse(attributes0.equals((Object)attributes4));
      assertEquals(1, attributes0.size());
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      
      attributes1.normalize();
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      
      String[] stringArray0 = new String[0];
      attributes2.keys = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("Ps%^Hq&TS;A~", attribute0.getKey());
      assertEquals("Ps%^Hq&TS;A~", attribute0.getValue());
      assertEquals(1, attributes2.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = attributes2.equals("Ps%^Hq&TS;A~");
      assertFalse(boolean1);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("Ps%^Hq&TS;A~", attribute0.getKey());
      assertEquals("Ps%^Hq&TS;A~", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      // Undeclared exception!
      try { 
        attributes2.hasKey("org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attribute attribute0 = new Attribute("*<px^%Xg&a1", "*<px^%Xg&a1");
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals("*<px^%Xg&a1", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertEquals(1, attributes0.size());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals("*<px^%Xg&a1", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("*<px^%Xg&a1", "*<px^%Xg&a1");
      assertEquals(1, attributes0.size());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals("*<px^%Xg&a1", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      String string0 = attribute0.toString();
      assertEquals("*<px^%Xg&a1=\"*<px^%Xg&amp;a1\"", string0);
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals("*<px^%Xg&a1", attribute0.getValue());
      assertNotNull(string0);
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertEquals(1, attributes0.size());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals("*<px^%Xg&a1", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      
      Attributes attributes4 = attributes1.clone();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertTrue(attributes4.equals((Object)attributes0));
      assertTrue(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertTrue(attributes4.equals((Object)attributes2));
      assertEquals(1, attributes0.size());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals("*<px^%Xg&a1", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes4.size());
      assertNotNull(attributes4);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes1);
      
      String string1 = attribute0.setValue("");
      assertEquals("*<px^%Xg&a1", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertNotNull(string1);
      
      String string2 = attributes0.toString();
      assertEquals(" *<px^%Xg&a1=\"\"", string2);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, attributes0.size());
      assertNotNull(string2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      
      attributes4.remove("org.jsoup.nodes.Attributes");
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes4.size());
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes1);
      
      String string3 = attributes1.toString();
      assertEquals(" *<px^%Xg&a1=\"\"", string3);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertNotNull(string3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      
      String string4 = attributes3.get("");
      assertEquals("", string4);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotNull(string4);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      
      Attributes attributes5 = attributes4.put("*<px^%Xg&a1", true);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes4.size());
      assertEquals(1, attributes5.size());
      assertNotNull(attributes5);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes4, attributes5);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes1);
      assertSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes2);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = attributes5.equals(attributes1);
      assertFalse(boolean0);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes4.size());
      assertEquals(1, attributes5.size());
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes4, attributes5);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes1);
      assertSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes2);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes1);
      
      boolean boolean1 = attributes1.hasKey("");
      assertFalse(boolean1);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes3));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("Ps%^Hq&TS;A~", true);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attribute attribute0 = new Attribute("Ps%^Hq&TS;A~", "Ps%^Hq&TS;A~");
      assertEquals("Ps%^Hq&TS;A~", attribute0.getKey());
      assertEquals("Ps%^Hq&TS;A~", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("Ps%^Hq&TS;A~", attribute0.getKey());
      assertEquals("Ps%^Hq&TS;A~", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      String string0 = "org.jsoup.nodes.Attributes$Dataset$EntrySet";
      String string1 = null;
      // Undeclared exception!
      try { 
        attributes1.remove((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attribute attribute0 = new Attribute("*<px^%Xg&a1", "*<px^%Xg&a1");
      assertEquals("*<px^%Xg&a1", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertEquals(1, attributes0.size());
      assertEquals("*<px^%Xg&a1", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("*<px^%Xg&a1", "*<px^%Xg&a1");
      assertEquals(1, attributes0.size());
      assertEquals("*<px^%Xg&a1", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      String string0 = attribute0.toString();
      assertEquals("*<px^%Xg&a1=\"*<px^%Xg&amp;a1\"", string0);
      assertEquals("*<px^%Xg&a1", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertNotNull(string0);
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals("*<px^%Xg&a1", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      
      Attributes attributes4 = attributes1.clone();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertTrue(attributes4.equals((Object)attributes2));
      assertTrue(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertTrue(attributes4.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals("*<px^%Xg&a1", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes4.size());
      assertNotNull(attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      
      String string1 = attribute0.setValue("");
      assertEquals("*<px^%Xg&a1", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertNotNull(string1);
      
      String string2 = attributes0.toString();
      assertEquals(" *<px^%Xg&a1=\"\"", string2);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, attributes0.size());
      assertNotNull(string2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      
      attributes4.remove("org.jsoup.nodes.Attributes");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes4.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      
      String string3 = attributes1.toString();
      assertEquals(" *<px^%Xg&a1=\"\"", string3);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertNotNull(string3);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      
      String string4 = attributes3.get("");
      assertEquals("", string4);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotNull(string4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      
      Attributes attributes5 = attributes4.put("*<px^%Xg&a1", true);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes2));
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes4.size());
      assertEquals(1, attributes5.size());
      assertNotNull(attributes5);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes5);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes0);
      assertSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes2);
      
      Attributes attributes6 = attributes5.put("*<px^%Xg&a1", "");
      assertFalse(attributes0.equals((Object)attributes3));
      assertTrue(attributes0.equals((Object)attributes4));
      assertTrue(attributes0.equals((Object)attributes5));
      assertTrue(attributes1.equals((Object)attributes4));
      assertTrue(attributes1.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes3));
      assertTrue(attributes4.equals((Object)attributes2));
      assertTrue(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertTrue(attributes4.equals((Object)attributes1));
      assertTrue(attributes5.equals((Object)attributes2));
      assertTrue(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes3));
      assertTrue(attributes5.equals((Object)attributes0));
      assertTrue(attributes6.equals((Object)attributes0));
      assertTrue(attributes6.equals((Object)attributes1));
      assertTrue(attributes6.equals((Object)attributes2));
      assertFalse(attributes6.equals((Object)attributes3));
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes4.size());
      assertEquals(1, attributes5.size());
      assertEquals(1, attributes6.size());
      assertNotNull(attributes6);
      assertNotSame(attributes0, attributes6);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes6);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertSame(attributes4, attributes6);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes5);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes0);
      assertSame(attributes5, attributes6);
      assertSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes2);
      assertSame(attributes6, attributes4);
      assertNotSame(attributes6, attributes2);
      assertNotSame(attributes6, attributes1);
      assertNotSame(attributes6, attributes3);
      assertNotSame(attributes6, attributes0);
      assertSame(attributes6, attributes5);
      
      String string5 = attributes6.html();
      assertEquals(" *<px^%Xg&a1=\"\"", string5);
      assertFalse(attributes0.equals((Object)attributes3));
      assertTrue(attributes0.equals((Object)attributes4));
      assertTrue(attributes0.equals((Object)attributes5));
      assertTrue(attributes0.equals((Object)attributes6));
      assertTrue(attributes1.equals((Object)attributes4));
      assertTrue(attributes1.equals((Object)attributes6));
      assertTrue(attributes1.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes3));
      assertTrue(attributes4.equals((Object)attributes2));
      assertTrue(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertTrue(attributes4.equals((Object)attributes1));
      assertTrue(attributes5.equals((Object)attributes2));
      assertTrue(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes3));
      assertTrue(attributes5.equals((Object)attributes0));
      assertTrue(attributes6.equals((Object)attributes0));
      assertTrue(attributes6.equals((Object)attributes1));
      assertTrue(attributes6.equals((Object)attributes2));
      assertFalse(attributes6.equals((Object)attributes3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes4.size());
      assertEquals(1, attributes5.size());
      assertEquals(1, attributes6.size());
      assertNotNull(string5);
      assertNotSame(attributes0, attributes6);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes6);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertSame(attributes4, attributes6);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes5);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes0);
      assertSame(attributes5, attributes6);
      assertSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes2);
      assertSame(attributes6, attributes4);
      assertNotSame(attributes6, attributes2);
      assertNotSame(attributes6, attributes1);
      assertNotSame(attributes6, attributes3);
      assertNotSame(attributes6, attributes0);
      assertSame(attributes6, attributes5);
      
      boolean boolean0 = attributes3.equals(attributes5);
      assertFalse(boolean0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertTrue(attributes0.equals((Object)attributes4));
      assertTrue(attributes0.equals((Object)attributes5));
      assertTrue(attributes0.equals((Object)attributes6));
      assertTrue(attributes1.equals((Object)attributes4));
      assertTrue(attributes1.equals((Object)attributes6));
      assertTrue(attributes1.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes3));
      assertTrue(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes3));
      assertTrue(attributes2.equals((Object)attributes5));
      assertTrue(attributes2.equals((Object)attributes6));
      assertFalse(attributes3.equals((Object)attributes6));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes5));
      assertFalse(attributes3.equals((Object)attributes1));
      assertTrue(attributes4.equals((Object)attributes2));
      assertTrue(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertTrue(attributes4.equals((Object)attributes1));
      assertTrue(attributes5.equals((Object)attributes2));
      assertTrue(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes3));
      assertTrue(attributes5.equals((Object)attributes0));
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals(1, attributes4.size());
      assertEquals(1, attributes5.size());
      assertNotSame(attributes0, attributes6);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes6);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes6);
      assertNotSame(attributes3, attributes6);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes5);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertSame(attributes4, attributes6);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes5);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes0);
      assertSame(attributes5, attributes6);
      assertSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes2);
      
      Attribute attribute1 = Attribute.createFromEncoded("data-", "F@yHy(JE#@ea'cb");
      assertFalse(attribute1.equals((Object)attribute0));
      assertEquals("F@yHy(JE#@ea'cb", attribute1.getValue());
      assertEquals("data-", attribute1.getKey());
      assertNotNull(attribute1);
      assertNotSame(attribute1, attribute0);
      
      Attributes attributes7 = attributes6.put(attribute1);
      assertFalse(attribute1.equals((Object)attribute0));
      assertFalse(attributes0.equals((Object)attributes6));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes7.equals((Object)attributes0));
      assertFalse(attributes7.equals((Object)attributes3));
      assertFalse(attributes7.equals((Object)attributes1));
      assertFalse(attributes7.equals((Object)attributes2));
      assertFalse(attribute0.equals((Object)attribute1));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes6));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes2));
      assertFalse(attributes6.equals((Object)attributes2));
      assertFalse(attributes6.equals((Object)attributes1));
      assertFalse(attributes6.equals((Object)attributes3));
      assertFalse(attributes6.equals((Object)attributes0));
      assertEquals("F@yHy(JE#@ea'cb", attribute1.getValue());
      assertEquals("data-", attribute1.getKey());
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes7.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(2, attributes4.size());
      assertEquals(2, attributes5.size());
      assertEquals(2, attributes6.size());
      assertNotNull(attributes7);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attributes0, attributes6);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes7);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes7, attributes0);
      assertNotSame(attributes7, attributes3);
      assertSame(attributes7, attributes5);
      assertSame(attributes7, attributes6);
      assertNotSame(attributes7, attributes1);
      assertNotSame(attributes7, attributes2);
      assertSame(attributes7, attributes4);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes7);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes6);
      assertNotSame(attributes4, attributes1);
      assertSame(attributes4, attributes7);
      assertNotSame(attributes4, attributes2);
      assertSame(attributes4, attributes6);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes5);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes0);
      assertSame(attributes5, attributes6);
      assertSame(attributes5, attributes7);
      assertSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes2);
      assertSame(attributes6, attributes4);
      assertSame(attributes6, attributes7);
      assertNotSame(attributes6, attributes2);
      assertNotSame(attributes6, attributes1);
      assertNotSame(attributes6, attributes3);
      assertNotSame(attributes6, attributes0);
      assertSame(attributes6, attributes5);
      
      Attributes attributes8 = attributes2.put(" *<px^%Xg&a1=\"\"", true);
      assertFalse(attributes0.equals((Object)attributes6));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes7));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attribute0.equals((Object)attribute1));
      assertFalse(attributes8.equals((Object)attributes7));
      assertFalse(attributes8.equals((Object)attributes3));
      assertFalse(attributes8.equals((Object)attributes6));
      assertFalse(attributes8.equals((Object)attributes4));
      assertFalse(attributes8.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes7));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes6));
      assertFalse(attributes2.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes7));
      assertFalse(attributes2.equals((Object)attributes6));
      assertEquals(2, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(2, attributes8.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes8);
      assertNotSame(attributes0, attributes6);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes8);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes7);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attributes8, attributes7);
      assertSame(attributes8, attributes0);
      assertSame(attributes8, attributes1);
      assertNotSame(attributes8, attributes3);
      assertNotSame(attributes8, attributes6);
      assertNotSame(attributes8, attributes4);
      assertSame(attributes8, attributes2);
      assertNotSame(attributes8, attributes5);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes8);
      assertNotSame(attributes1, attributes7);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes6);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes7);
      assertSame(attributes2, attributes8);
      assertNotSame(attributes2, attributes6);
      
      Attributes attributes9 = attributes0.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes6));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes7));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attribute0.equals((Object)attribute1));
      assertFalse(attributes9.equals((Object)attributes7));
      assertFalse(attributes9.equals((Object)attributes6));
      assertFalse(attributes9.equals((Object)attributes5));
      assertFalse(attributes9.equals((Object)attributes3));
      assertFalse(attributes9.equals((Object)attributes4));
      assertEquals(2, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(2, attributes9.size());
      assertNotNull(attributes9);
      assertNotSame(attributes0, attributes6);
      assertSame(attributes0, attributes9);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes8);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes7);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attributes9, attributes7);
      assertSame(attributes9, attributes0);
      assertNotSame(attributes9, attributes6);
      assertNotSame(attributes9, attributes5);
      assertNotSame(attributes9, attributes3);
      assertSame(attributes9, attributes8);
      assertNotSame(attributes9, attributes4);
      assertSame(attributes9, attributes2);
      assertSame(attributes9, attributes1);
      
      boolean boolean1 = attributes9.equals((Object) null);
      assertFalse(boolean1);
      assertFalse(attributes0.equals((Object)attributes6));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes7));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attribute0.equals((Object)attribute1));
      assertFalse(attributes9.equals((Object)attributes7));
      assertFalse(attributes9.equals((Object)attributes6));
      assertFalse(attributes9.equals((Object)attributes5));
      assertFalse(attributes9.equals((Object)attributes3));
      assertFalse(attributes9.equals((Object)attributes4));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertEquals(2, attributes9.size());
      assertNotSame(attributes0, attributes6);
      assertSame(attributes0, attributes9);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes8);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes7);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attributes9, attributes7);
      assertSame(attributes9, attributes0);
      assertNotSame(attributes9, attributes6);
      assertNotSame(attributes9, attributes5);
      assertNotSame(attributes9, attributes3);
      assertSame(attributes9, attributes8);
      assertNotSame(attributes9, attributes4);
      assertSame(attributes9, attributes2);
      assertSame(attributes9, attributes1);
      
      List<Attribute> list0 = attributes0.asList();
      assertFalse(attributes0.equals((Object)attributes6));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes7));
      assertFalse(attributes0.equals((Object)attributes4));
      assertEquals(2, attributes0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(attribute1));
      assertTrue(list0.contains(attribute0));
      assertNotSame(attributes0, attributes6);
      assertSame(attributes0, attributes9);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes8);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes7);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes0.clone();
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes2.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes1));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes2.size());
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      attributes2.addAll(attributes1);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(attributes1.equals((Object)attributes2));
      assertTrue(attributes2.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes1));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      Attributes attributes3 = attributes2.put("", "00s7BxVf$0y#G>");
      assertTrue(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = attributes3.hasKeyIgnoreCase("nv`Xcn}'-F9ny0::");
      assertFalse(boolean0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      
      boolean boolean1 = attributes3.hasKeyIgnoreCase("");
      assertTrue(boolean1);
      assertTrue(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      
      Attribute attribute0 = Attribute.createFromEncoded("7/[aOo@Ew", "7/[aOo@Ew");
      assertEquals("7/[aOo@Ew", attribute0.getKey());
      assertEquals("7/[aOo@Ew", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes4 = attributes1.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("7/[aOo@Ew", attribute0.getKey());
      assertEquals("7/[aOo@Ew", attribute0.getValue());
      assertEquals(1, attributes4.size());
      assertNotNull(attributes4);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      
      boolean boolean2 = attributes4.equals("7/[aOo@Ew");
      assertFalse(boolean2);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("7/[aOo@Ew", attribute0.getKey());
      assertEquals("7/[aOo@Ew", attribute0.getValue());
      assertEquals(1, attributes4.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      
      Map<String, String> map0 = attributes4.dataset();
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("7/[aOo@Ew", attribute0.getKey());
      assertEquals("7/[aOo@Ew", attribute0.getValue());
      assertEquals(1, attributes4.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      
      String string0 = attributes2.get("7/[aOo@Ew");
      assertEquals("", string0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes2.size());
      assertNotNull(string0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      int int0 = attributes2.size();
      assertEquals(1, int0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes2.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("code", "b~?");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string0 = "RpY:l[fTUKSFB0A";
      Attributes attributes2 = attributes1.put("RpY:l[fTUKSFB0A", true);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      List<Attribute> list0 = attributes2.asList();
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      String string1 = "V~}?D.RqL[$JU>ka,";
      boolean boolean0 = attributes1.hasKey("V~}?D.RqL[$JU>ka,");
      assertFalse(boolean0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      
      boolean boolean1 = attributes0.equals("RpY:l[fTUKSFB0A");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, attributes0.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      
      attributes1.vals = null;
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      
      // Undeclared exception!
      try { 
        attributes1.addAll(attributes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Iterator<Attribute> iterator0 = attributes0.iterator();
      assertEquals(0, attributes0.size());
      assertNotNull(iterator0);
      
      boolean boolean0 = attributes0.hasKeyIgnoreCase("");
      assertFalse(boolean0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("", false);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Spliterator<Attribute> spliterator0 = attributes0.spliterator();
      assertEquals(0, attributes0.size());
      assertNotNull(spliterator0);
      assertSame(attributes0, attributes1);
      
      boolean boolean1 = attributes0.hasKey("^uMz9B*GBZ)&|W3l%r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, attributes0.size());
      assertSame(attributes0, attributes1);
      
      attributes1.remove("  ");
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes0.clone();
      assertTrue(attributes2.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes1));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      Attributes attributes3 = attributes2.put(".![Gb\"2!*Dx_3,ME", "n!-{[I5i{~4f#TPJ/^");
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      
      attributes3.normalize();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Attribute attribute0 = Attribute.createFromEncoded("n!-{[I5i{~4f#TPJ/^", "Z8#D");
      assertEquals("Z8#D", attribute0.getValue());
      assertEquals("n!-{[I5i{~4f#TPJ/^", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attributes attributes4 = attributes2.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes2.size());
      assertEquals("Z8#D", attribute0.getValue());
      assertEquals("n!-{[I5i{~4f#TPJ/^", attribute0.getKey());
      assertEquals(2, attributes4.size());
      assertNotNull(attributes4);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes3);
      
      boolean boolean2 = attributes0.equals(attributes4);
      assertFalse(boolean2);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes2.size());
      assertEquals("Z8#D", attribute0.getValue());
      assertEquals("n!-{[I5i{~4f#TPJ/^", attribute0.getKey());
      assertEquals(2, attributes4.size());
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes3);
      
      boolean boolean3 = attributes2.hasKey("^uMz9B*GBZ)&|W3l%r");
      assertFalse(boolean3);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes2.size());
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = "org.jsoup.nodes.Attributes";
      String string1 = "org.jsoup.nodes.Attributes$Dataset$EntrySet";
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("L\"7BfD.$z", true);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      
      Attributes attributes4 = attributes2.put("m", "m");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes3));
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertEquals(3, attributes4.size());
      assertNotNull(attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes2);
      
      String string2 = attributes2.html();
      assertEquals(" org.jsoup.nodes.Attributes=\"org.jsoup.nodes.Attributes$Dataset$EntrySet\" L\"7BfD.$z m=\"m\"", string2);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertNotNull(string2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      
      boolean boolean0 = attributes0.equals(" org.jsoup.nodes.Attributes=\"org.jsoup.nodes.Attributes$Dataset$EntrySet\" L\"7BfD.$z m=\"m\"");
      assertFalse(boolean0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertEquals(3, attributes0.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      
      String string3 = null;
      String string4 = attributes2.get(" org.jsoup.nodes.Attributes=\"org.jsoup.nodes.Attributes$Dataset$EntrySet\" L\"7BfD.$z m=\"m\"");
      assertEquals("", string4);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertNotNull(string4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      
      // Undeclared exception!
      try { 
        attributes4.hasKeyIgnoreCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("]Q*{h-e[", false);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes0.put("]Q*{h-e[", "2'sm!");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      String string0 = attributes2.getIgnoreCase("");
      assertEquals("", string0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes2.size());
      assertNotNull(string0);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Attributes$Dataset", "org.jsoup.nodes.Attributes$Dataset");
      assertEquals("org.jsoup.nodes.Attributes$Dataset", attribute0.getKey());
      assertEquals("org.jsoup.nodes.Attributes$Dataset", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      
      // Undeclared exception!
      try { 
        attributes0.removeIgnoreCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        attributes0.getIgnoreCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = "org.jsoup.nodes.Attributes$Dataset$EntrySet";
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string1 = "L\"7BfD\\.$z";
      boolean boolean0 = true;
      Attributes attributes2 = attributes1.put("L\"7BfD.$z", true);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      
      List<Attribute> list0 = attributes3.asList();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      
      attributes1.addAll(attributes3);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      List<Attribute> list0 = attributes0.asList();
      assertEquals(0, attributes0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Attributes attributes1 = attributes0.put("AMi]qb\"", "org.jsoup.nodes.Attributes");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string0 = attributes1.get("AMi]qb\"");
      assertEquals("org.jsoup.nodes.Attributes", string0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(string0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attribute attribute0 = Attribute.createFromEncoded("&nbsp;", "org.jsoup.nodes.Attributes");
      assertEquals("org.jsoup.nodes.Attributes", attribute0.getValue());
      assertEquals("&nbsp;", attribute0.getKey());
      assertNotNull(attribute0);
      
      String string1 = attribute0.setValue("AMi]qb\"");
      assertEquals("org.jsoup.nodes.Attributes", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("AMi]qb\"", attribute0.getValue());
      assertEquals("&nbsp;", attribute0.getKey());
      assertNotNull(string1);
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("AMi]qb\"", attribute0.getValue());
      assertEquals("&nbsp;", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      attributes2.remove("org.jsoup.nodes.Attributes$Dataset$EntrySet");
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("AMi]qb\"", attribute0.getValue());
      assertEquals("&nbsp;", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      attributes2.addAll(attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("AMi]qb\"", attribute0.getValue());
      assertEquals("&nbsp;", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      boolean boolean0 = attributes2.hasKeyIgnoreCase("T:dT3a`lK");
      assertFalse(boolean0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("AMi]qb\"", attribute0.getValue());
      assertEquals("&nbsp;", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      attributes1.remove("&nbsp;");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      
      attributes1.normalize();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      
      int int0 = attributes1.indexOfKey("r>q- 0,KZ2g*0!]kSW8");
      assertEquals((-1), int0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      
      Attributes attributes3 = attributes0.put("&nbsp;", true);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      
      Iterator<Attribute> iterator0 = attributes3.iterator();
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes3.size());
      assertNotNull(iterator0);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      
      Attributes attributes4 = attributes2.put("org.jsoup.nodes.Attributes$Dataset$EntrySet", "");
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals("AMi]qb\"", attribute0.getValue());
      assertEquals("&nbsp;", attribute0.getKey());
      assertEquals(3, attributes2.size());
      assertEquals(3, attributes4.size());
      assertNotNull(attributes4);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      
      Attributes attributes5 = attributes4.put("org.jsoup.nodes.Attributes", true);
      assertEquals(4, attributes5.size());
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals("AMi]qb\"", attribute0.getValue());
      assertEquals("&nbsp;", attribute0.getKey());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes4.size());
      assertNotNull(attributes5);
      assertSame(attributes5, attributes2);
      assertSame(attributes5, attributes4);
      assertSame(attributes5, attributes1);
      assertSame(attributes5, attributes0);
      assertSame(attributes5, attributes3);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes5);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes5);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes5);
      
      Attributes attributes6 = attributes3.clone();
      assertTrue(attributes6.equals((Object)attributes3));
      assertTrue(attributes6.equals((Object)attributes0));
      assertTrue(attributes6.equals((Object)attributes2));
      assertTrue(attributes6.equals((Object)attributes5));
      assertTrue(attributes6.equals((Object)attributes4));
      assertTrue(attributes6.equals((Object)attributes1));
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes6.size());
      assertEquals(4, attributes3.size());
      assertNotNull(attributes6);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes6);
      assertNotSame(attributes6, attributes4);
      assertNotSame(attributes6, attributes5);
      assertNotSame(attributes6, attributes1);
      assertNotSame(attributes6, attributes2);
      assertNotSame(attributes6, attributes0);
      assertNotSame(attributes6, attributes3);
      assertSame(attributes3, attributes5);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes6);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes4);
      assertSame(attributes3, attributes1);
      
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      attributes6.forEach(consumer0);
      assertTrue(attributes0.equals((Object)attributes6));
      assertTrue(attributes6.equals((Object)attributes3));
      assertTrue(attributes6.equals((Object)attributes0));
      assertTrue(attributes6.equals((Object)attributes2));
      assertTrue(attributes6.equals((Object)attributes5));
      assertTrue(attributes6.equals((Object)attributes4));
      assertTrue(attributes6.equals((Object)attributes1));
      assertTrue(attributes3.equals((Object)attributes6));
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes6.size());
      assertEquals(4, attributes3.size());
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes6);
      assertNotSame(attributes6, attributes4);
      assertNotSame(attributes6, attributes5);
      assertNotSame(attributes6, attributes1);
      assertNotSame(attributes6, attributes2);
      assertNotSame(attributes6, attributes0);
      assertNotSame(attributes6, attributes3);
      assertSame(attributes3, attributes5);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes6);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes4);
      assertSame(attributes3, attributes1);
      
      Attributes attributes7 = attributes2.put("org.jsoup.nodes.Attributes$Dataset$EntrySet", "{!E_dGn");
      assertFalse(attributes0.equals((Object)attributes6));
      assertFalse(attributes1.equals((Object)attributes6));
      assertFalse(attributes7.equals((Object)attributes6));
      assertFalse(attributes2.equals((Object)attributes6));
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals(4, attributes7.size());
      assertEquals("AMi]qb\"", attribute0.getValue());
      assertEquals("&nbsp;", attribute0.getKey());
      assertEquals(4, attributes2.size());
      assertNotNull(attributes7);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes6);
      assertSame(attributes0, attributes7);
      assertNotSame(attributes1, attributes6);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes7);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes7, attributes2);
      assertSame(attributes7, attributes3);
      assertSame(attributes7, attributes1);
      assertSame(attributes7, attributes4);
      assertNotSame(attributes7, attributes6);
      assertSame(attributes7, attributes5);
      assertSame(attributes7, attributes0);
      assertSame(attributes2, attributes5);
      assertNotSame(attributes2, attributes6);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes7);
      
      String string2 = Attributes.checkNotNull("org.jsoup.nodes.Attributes");
      assertEquals("org.jsoup.nodes.Attributes", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("", "z+~HRF=");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.clone();
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      String string0 = attributes1.html();
      assertEquals(" =\"z+~HRF=\"", string0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(string0);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      
      String string1 = attributes1.html();
      assertEquals(" =\"z+~HRF=\"", string1);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(string1);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      
      String string2 = ".EhHc";
      String string3 = attributes0.getIgnoreCase(".EhHc");
      assertEquals("", string3);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, attributes0.size());
      assertNotNull(string3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      
      int int0 = attributes0.indexOfKey("");
      assertEquals(0, int0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertEquals(1, attributes0.size());
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      
      String string4 = Attributes.checkNotNull("");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = attributes2.hashCode();
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(int1 == int0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      String string5 = attributes0.getIgnoreCase("");
      assertEquals("z+~HRF=", string5);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(1, attributes0.size());
      assertNotNull(string5);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      
      Attribute attribute0 = new Attribute(".EhHc", "6(JifkWVi?c<(Mxw");
      assertEquals("6(JifkWVi?c<(Mxw", attribute0.getValue());
      assertEquals(".EhHc", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attributes attributes3 = attributes2.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("6(JifkWVi?c<(Mxw", attribute0.getValue());
      assertEquals(".EhHc", attribute0.getKey());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      
      attributes3.remove("z+~HRF=");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("6(JifkWVi?c<(Mxw", attribute0.getValue());
      assertEquals(".EhHc", attribute0.getKey());
      assertEquals(2, attributes3.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes0.clone();
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes2.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes1));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes2.size());
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      attributes2.addAll(attributes1);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(attributes1.equals((Object)attributes2));
      assertTrue(attributes2.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes1));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      Attributes attributes3 = attributes2.put("", "00s7BxVf$0y#G>");
      assertFalse(attributes0.equals((Object)attributes2));
      assertTrue(attributes0.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      
      Attributes attributes4 = attributes1.put("00s7BxVf$0y#G>", "00s7BxVf$0y#G>");
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes4.size());
      assertNotNull(attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "00s7BxVf$0y#G>";
      stringArray0[1] = "";
      stringArray0[2] = "00s7BxVf$0y#G>";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "org.jsoup.nodes.Attributes$Dataset$EntrySet";
      stringArray0[8] = "00s7BxVf$0y#G>";
      attributes0.keys = stringArray0;
      assertEquals(0, attributes0.size());
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "00s7BxVf$0y#G>";
      attributes0.vals = stringArray1;
      assertEquals(0, attributes0.size());
      
      attributes4.remove("00s7BxVf$0y#G>");
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes4.size());
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      
      attributes2.normalize();
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes2.size());
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = attributes1.equals(object0);
      assertFalse(boolean0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes0);
      
      boolean boolean1 = attributes2.hasKey("");
      assertTrue(boolean1);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes2.size());
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = attributes0.html();
      assertEquals("", string0);
      assertEquals(0, attributes0.size());
      assertNotNull(string0);
      
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      attributes0.forEach(consumer0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("", "Tq|IN> HU&3m");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Spliterator<Attribute> spliterator0 = attributes1.spliterator();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(spliterator0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Spliterator<Attribute> spliterator1 = attributes0.spliterator();
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertEquals(1, attributes0.size());
      assertNotNull(spliterator1);
      assertSame(attributes0, attributes1);
      assertNotSame(spliterator1, spliterator0);
      
      String string1 = "BQ/AIY?rF%";
      // Undeclared exception!
      try { 
        attributes0.putIgnoreCase((String) null, "BQ/AIY?rF%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        attributes0.indexOfKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attribute attribute0 = new Attribute("*<px^%Xg&a1", "*<px^%Xg&a1");
      assertEquals("*<px^%Xg&a1", attribute0.getValue());
      assertEquals("*<px^%Xg&a1", attribute0.getKey());
      assertNotNull(attribute0);
      
      boolean boolean0 = attributes0.hasKeyIgnoreCase("S,r!&");
      assertFalse(boolean0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = new Attributes();
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.put("zIV<+QJbrOe.`ngg3/", true);
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      Spliterator<Attribute> spliterator0 = attributes0.spliterator();
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertEquals(0, attributes0.size());
      assertNotNull(spliterator0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      
      // Undeclared exception!
      try { 
        attributes1.hasKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Attributes.checkNotNull((String) null);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("6}IhU .t4lK2XE:_M", "                  ", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.html();
      attributes1.hasKeyIgnoreCase("`n#sgK4-t4YinVZ1}");
      attributes1.addAll(attributes0);
      attributes1.asList();
      attributes1.addAll(attributes0);
      attributes0.hasKey("org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      // Undeclared exception!
      try { 
        attributes0.putIgnoreCase((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("1iUr", "");
      String[] stringArray0 = new String[1];
      attributes0.getIgnoreCase("2E{MM");
      attributes0.removeIgnoreCase("2tzAH`");
      stringArray0[0] = "2tzAH`";
      attributes0.dataset();
      attributes0.vals = stringArray0;
      attributes0.html();
      attributes0.dataset();
      attributes0.normalize();
      attributes0.getIgnoreCase("&@+h8UWe4%blU^{");
      attributes0.get("2tzAH`");
      attributes0.hashCode();
      attributes0.dataset();
      String string0 = "/e `H-28S#$I>&|*%";
      attributes0.get("/e `H-28S#$I>&|*%");
      attributes0.remove("org.jsoup.UncheckedIOException");
      // Undeclared exception!
      try { 
        attributes0.putIgnoreCase(",jo\"Kyr]", "K'h{K;Z8}g?qq(ek)[$");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      String string0 = "gxNR}OHoh!j#j(!";
      Attribute attribute0 = Attribute.createFromEncoded("gxNR}OHoh!j#j(!", "gxNR}OHoh!j#j(!");
      attributes1.put(attribute0);
      attributes1.addAll(attributes0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "=\"";
      Attribute attribute0 = new Attribute("=\"", "=\"");
      attribute0.setValue("=\"");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.iterator();
      Attribute attribute1 = attribute0.clone();
      attribute1.parent = attributes0;
      attribute1.parent.putIgnoreCase("inert", "");
      Map.Entry.comparingByValue();
      attributes1.equals(attribute1);
      attributes1.getIgnoreCase("=\"");
      attributes1.html();
      String string1 = "";
      String string2 = "data-";
      Map.Entry.comparingByValue();
      Attributes attributes2 = attributes1.put("", "data-");
      attributes1.removeIgnoreCase("=\"");
      attributes0.equals(attributes2);
      Object object0 = new Object();
      attributes2.equals(object0);
      String string3 = null;
      // Undeclared exception!
      try { 
        attributes2.put((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "dw";
      attributes0.hasKey("dw");
      attributes0.normalize();
      attributes0.get("dw");
      attributes0.normalize();
      attributes0.indexOfKey("");
      attributes0.toString();
      String string1 = ".";
      attributes0.getIgnoreCase(".");
      boolean boolean0 = false;
      Attributes attributes1 = attributes0.put(" />", false);
      attributes1.get("");
      attributes0.hashCode();
      attributes0.normalize();
      String string2 = "[XHd6{!rn--;/";
      Attribute.createFromEncoded("[XHd6{!rn--;/", "");
      String string3 = ")v`S-O=";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.jsoup.internal.StringUtil");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("dw");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // dw
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes$1", true);
      attributes0.addAll(attributes1);
      Attributes attributes2 = attributes0.clone();
      Attributes attributes3 = attributes2.put(",ut5%'e(U", false);
      attributes2.clone();
      attributes3.asList();
      attributes3.asList();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",ut5%'e(U";
      attributes3.vals = stringArray0;
      attributes3.hasKeyIgnoreCase("");
      attributes0.hasKey("N9W!KK3");
      Attributes attributes4 = attributes2.put("1.P;rtS_RX6v+@7", "org.jsoup.nodes.Attributes$1");
      Attributes.checkNotNull("N9W!KK3");
      attributes2.clone();
      attributes0.put("org.jsoup.nodes.Attributes$1", "org.jsoup.nodes.Attributes$1");
      attributes4.hasKeyIgnoreCase("");
      attributes3.hasKeyIgnoreCase(",ut5%'e(U");
      attributes0.dataset();
      int int0 = attributes4.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.put((Attribute) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", "");
      Attributes attributes2 = attributes1.put("", true);
      Attribute attribute0 = Attribute.createFromEncoded("fce(i@H&3(", "fce(i@H&3(");
      Attributes attributes3 = attributes2.put(attribute0);
      Attributes attributes4 = attributes3.clone();
      attributes4.put(attribute0);
      // Undeclared exception!
      try { 
        attributes1.asList();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("Ps%^Hq&TS;A~", true);
      Attribute attribute0 = new Attribute("Ps%^Hq&TS;A~", "Ps%^Hq&TS;A~");
      Attributes attributes2 = attributes1.put(attribute0);
      attributes2.put("Ps%^Hq&TS;A~", true);
      Attributes attributes3 = attributes2.clone();
      Attributes attributes4 = attributes3.put(attribute0);
      attributes0.normalize();
      attributes0.put("Ps%^Hq&TS;A~", "Ps%^Hq&TS;A~");
      attributes0.putIgnoreCase("Ps%^Hq&TS;A~", "w");
      attributes4.getIgnoreCase("data-");
      int int0 = attributes0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = new Attribute("=\"", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      Attribute attribute1 = attribute0.clone();
      attribute0.clone();
      Map.Entry.comparingByValue();
      Attributes attributes2 = attributes1.put(attribute1);
      attributes2.size();
      // Undeclared exception!
      try { 
        attributes0.put((String) null, "org.jsoup.nodes.Attributes$Dataset$EntrySet");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Object object0 = new Object();
      attributes0.hasKeyIgnoreCase("nv`;Xcn|}'-9ny0::");
      attributes0.equals(object0);
      Map<String, String> map0 = attributes0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("7Ifs", "      ");
      Attributes attributes2 = attributes1.put("7Ifs", true);
      Attributes attributes3 = attributes2.clone();
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Attributes$Dataset$EntrySet", "Z^c\"qUy_j");
      Attributes attributes4 = attributes3.put(attribute0);
      attributes4.remove("Z^c\"qUy_j");
      attributes4.getIgnoreCase("");
      attributes0.getIgnoreCase("");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.iterator();
      attributes0.hasKeyIgnoreCase("");
      attributes0.put("", false);
      attributes0.spliterator();
      attributes0.hasKey("^uMz9B*GBZ)&|W3l%r");
      // Undeclared exception!
      try { 
        attributes0.put((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "*<px^%Xg&a1";
      Attribute attribute0 = new Attribute("*<px^%Xg&a1", "*<px^%Xg&a1");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("*<px^%Xg&a1", "*<px^%Xg&a1");
      attribute0.toString();
      Attributes attributes3 = attributes2.clone();
      Attributes attributes4 = attributes1.clone();
      String string1 = "";
      attribute0.setValue("");
      attributes0.toString();
      attributes4.remove("org.jsoup.nodes.Attributes");
      attributes1.toString();
      String string2 = "";
      attributes3.get("");
      Attributes attributes5 = attributes4.put("*<px^%Xg&a1", true);
      Attributes attributes6 = attributes5.put("*<px^%Xg&a1", "");
      attributes6.html();
      attributes3.equals(attributes5);
      // Undeclared exception!
      try { 
        attributes6.get((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "";
      Attributes attributes1 = attributes0.put("}WI", "");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        attributes1.put((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hasKey("H9,(c?@5g,");
      attributes0.get("H9,(c?@5g,");
      Attributes attributes1 = attributes0.clone();
      attributes0.indexOfKey("H9,(c?@5g,");
      attributes0.dataset();
      attributes0.dataset();
      Attributes.checkNotNull("@6~aVsQt+");
      attributes0.clone();
      attributes0.putIgnoreCase("%z]b<*LT:|e}Rqk", "org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      attributes1.asList();
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "@6~aVsQt+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = ",Ujx%!//";
      attributes0.remove(" ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UTF-";
      attributes0.vals = stringArray0;
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded(" ", ",Ujx%!//");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.clone();
      Attributes attributes1 = attributes0.put(":Uq3", true);
      attributes1.hasKeyIgnoreCase("DiiXktqcO@G3><al");
      attributes1.html();
      attributes1.html();
      attributes0.hasKeyIgnoreCase(" :Uq3");
      attributes1.toString();
      attributes0.get(">");
      attributes0.normalize();
      attributes1.indexOfKey("");
      Attributes.checkNotNull("Must be false");
      Attributes attributes2 = attributes1.put("DiiXktqcO@G3><al", true);
      attributes2.put("68;'8", "Hb6J1");
      try { 
        MockURI.URI("Hb6J1", "DLt?{=?.`}x", "Hb6J1", (-1), "DiiXktqcO@G3><al", "DLt?{=?.`}x", "org.jsoup.nodes.Attributes$1");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: Hb6J1://DLt%3F%7B=%3F.%60%7Dx@Hb6J1DiiXktqcO@G3%3E%3Cal?DLt?%7B=?.%60%7Dx#org.jsoup.nodes.Attributes$1
         //
         verifyException("java.net.URI", e);
      }
  }
}
