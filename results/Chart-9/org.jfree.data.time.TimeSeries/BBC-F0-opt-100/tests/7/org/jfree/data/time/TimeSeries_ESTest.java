/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 16:06:54 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeListener;
import java.math.BigInteger;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahEra;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.JScrollBar;
import javax.swing.plaf.metal.MetalComboBoxUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.OHLCDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(108L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      timeSeries0.add((RegularTimePeriod) hour0, 1.0);
      TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", "", class0);
      Object object0 = timeSeries0.clone();
      timeSeries0.setMaximumItemCount(5);
      boolean boolean0 = timeSeries0.equals(object0);
      assertEquals(5, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      timeSeries1.setMaximumItemAge(4189L);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(4189L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      timeSeries0.createCopy((RegularTimePeriod) hour0, regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(108L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      Date date0 = fixedMillisecond0.getStart();
      Hour hour1 = new Hour(date0, fixedMillisecond0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) hour1, 1.0);
      Quarter quarter0 = new Quarter(date0, fixedMillisecond0.DEFAULT_TIME_ZONE);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) quarter0);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      Date date0 = fixedMillisecond0.getStart();
      timeSeries0.add((RegularTimePeriod) hour0, (double) 53L);
      Hour hour1 = new Hour(date0);
      timeSeries0.add((RegularTimePeriod) hour1, (-591.9368));
      timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      timeSeries0.add((RegularTimePeriod) hour0, (double) 53L);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((int) integer0, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Hour hour0 = new Hour();
      MockDate mockDate0 = new MockDate(23);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 0);
      Hour hour1 = new Hour(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour1, (double) 23);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.delete((RegularTimePeriod) hour0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      timeSeries0.setMaximumItemCount(1);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      timeSeries0.add((RegularTimePeriod) hour0, (double) 53L);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 23);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      Date date0 = fixedMillisecond0.getStart();
      timeSeries0.add((RegularTimePeriod) hour0, (-211.8367));
      Hour hour1 = new Hour(date0);
      timeSeries0.add((RegularTimePeriod) hour1, (-591.9368));
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Hour hour0 = new Hour();
      MockDate mockDate0 = new MockDate(23);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 0);
      Hour hour1 = new Hour(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour1, (double) 23);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.update((RegularTimePeriod) hour0, (Number) 23);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4374L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      Date date0 = fixedMillisecond0.getStart();
      timeSeries0.add((RegularTimePeriod) hour0, (-1.0));
      Hour hour1 = new Hour(date0);
      timeSeries0.add((RegularTimePeriod) hour1, (-591.9368));
      timeSeries0.getValue((RegularTimePeriod) hour0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Hour hour0 = new Hour();
      MockDate mockDate0 = new MockDate(23, 23, 0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 0);
      Hour hour1 = new Hour(mockDate0);
      timeSeries0.add((RegularTimePeriod) hour1, (double) 0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(108L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      Date date0 = fixedMillisecond0.getStart();
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
      Hour hour1 = new Hour(date0);
      timeSeries0.add((RegularTimePeriod) hour1, (-591.9368));
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Hour hour0 = new Hour();
      MockDate mockDate0 = new MockDate(23);
      Class<Hour> class0 = Hour.class;
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance(class0, mockDate0, hour0.DEFAULT_TIME_ZONE);
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 0);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<JScrollBar> class0 = JScrollBar.class;
      TimeSeries timeSeries0 = new TimeSeries("Negative 'periods' argument.", "Negative 'periods' argument.", "", class0);
      assertEquals("", timeSeries0.getRangeDescription());
      
      timeSeries0.setRangeDescription("Negative 'periods' argument.");
      assertEquals("Negative 'periods' argument.", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries("Time", "X Value", "4^k x}?.bo*#}?", class0);
      timeSeries0.setDomainDescription("");
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      Day day0 = new Day();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 999);
      timeSeries0.add(timeSeriesDataItem0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      timeSeries0.update(0, (Number) 0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) hour0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Year year0 = quarter0.getYear();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) bigInteger0);
      Number number0 = timeSeries0.getValue((RegularTimePeriod) quarter0);
      assertNotNull(number0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries("Time", "X Value", "4^k x}?.bo*#}?", class0);
      timeSeries0.add(regularTimePeriod0, (Number) null);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 1);
      assertEquals(2, timeSeries0.getItemCount());
      
      timeSeries0.getValue(1);
      assertEquals("X Value", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, " but the series already contains an observation", "]!NT}i-o2f.DK2C", (Class) null);
      timeSeries0.getTimePeriodClass();
      assertEquals(" but the series already contains an observation", timeSeries0.getDomainDescription());
      assertEquals("]!NT}i-o2f.DK2C", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<HijrahEra> class0 = HijrahEra.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, (String) null, class0);
      timeSeries0.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4374L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      timeSeries0.add((RegularTimePeriod) hour0, (-1.0));
      timeSeries0.getTimePeriod(0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2664);
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "", "", class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      timeSeries0.add((RegularTimePeriod) hour0, 1.0);
      timeSeries0.getNextTimePeriod();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.getMaximumItemAge();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      timeSeries0.add((RegularTimePeriod) hour0, 1.0);
      timeSeries0.getItemCount();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      timeSeries0.getIndex(hour0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Hour hour0 = new Hour();
      MockDate mockDate0 = new MockDate(0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
      Hour hour1 = new Hour(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour1, (double) 23);
      timeSeries0.add(timeSeriesDataItem0, true);
      int int0 = timeSeries0.getIndex(hour0);
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4124), (-2501), 999);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, (String) null, (String) null, class0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.setDomainDescription("");
      timeSeries0.getDomainDescription();
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(108L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      timeSeries0.add((RegularTimePeriod) hour0, 1.0);
      timeSeries0.getDataItem(0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(108L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      timeSeries0.setMaximumItemCount(0);
      Week week0 = new Week();
      timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(2, 2138);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(0, 23);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy(999, 999);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-2406), (Number) 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockDate mockDate0 = new MockDate(23);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "", "VY~&te)`Z,ke_3at", class0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount(29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge(13935254L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      PropertyChangeListener propertyChangeListener0 = metalComboBoxUI0.createPropertyChangeListener();
      timeSeries0.addPropertyChangeListener(propertyChangeListener0);
      // Undeclared exception!
      try { 
        timeSeries0.setDomainDescription(">3K{1Rs8Fg");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeries cannot be cast to javax.swing.JComboBox
         //
         verifyException("javax.swing.plaf.basic.BasicComboBoxUI$Handler", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(310L, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      ArrayList<Hour> arrayList0 = new ArrayList<Hour>();
      Hour hour0 = new Hour();
      arrayList0.add(hour0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      ArrayList<Hour> arrayList0 = new ArrayList<Hour>();
      Hour hour0 = new Hour();
      arrayList0.add(hour0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.getValue(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      LinkedList<Year> linkedList0 = new LinkedList<Year>();
      timeSeries0.data = (List) linkedList0;
      Year year0 = new Year();
      linkedList0.add(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockDate mockDate0 = new MockDate(23, 23, 23);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(305);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 305, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getIndex(hour0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.equals(timeSeries1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) hour0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 1327, 10);
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("|UVPlU%?");
      List list0 = timeSeries0.getItems();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.delete(1114, 1114);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "A@", "A@", class0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete(23, 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(999, 2305);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Integer> class0 = Integer.TYPE;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-3890), (-3890));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(999, 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("|UVPlU%?");
      List list0 = timeSeries0.getItems();
      timeSeries0.data = list0;
      try { 
        timeSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Year year0 = new Year();
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries(year0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (-1312.49));
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of java.lang.Integer.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockDate mockDate0 = new MockDate(23, 23, 23, 23, 23, 23);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries1 = new TimeSeries(mockDate0, class0);
      ArrayList<Millisecond> arrayList0 = new ArrayList<Millisecond>();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      arrayList0.add(millisecond0);
      timeSeries1.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, " but the series already contains an observation", "]!NT}i-o2f.DK2C", (Class) null);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, 0.0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      timeSeries0.add((RegularTimePeriod) hour0, (-211.8367));
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Quarter quarter0 = new Quarter();
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of java.lang.Integer.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Hour hour0 = new Hour();
      MockDate mockDate0 = new MockDate(23);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "", "VY~&te)`Z,ke_3at", class0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, (Number) millisecond0.LAST_MILLISECOND_IN_SECOND);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (Class) null);
      Week week0 = new Week((-860), (-860));
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (Number) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, " but the series already contains an observation", "]!NT}i-o2f.DK2C", (Class) null);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, 1112.5729, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (Class) null);
      Hour hour0 = new Hour();
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (-636.9371656901));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (-790.76724827593));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      ArrayList<Week> arrayList0 = new ArrayList<Week>();
      timeSeries0.data = (List) arrayList0;
      Week week0 = new Week(23, 0);
      arrayList0.add(week0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "_E9v6F6*irX[fX>bJ:", "_E9v6F6*irX[fX>bJ:", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      timeSeries0.add((RegularTimePeriod) hour0, (-2.147483648E9));
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(108L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      Date date0 = fixedMillisecond0.getStart();
      timeSeries0.add((RegularTimePeriod) hour0, 1.0);
      Hour hour1 = new Hour(date0);
      timeSeries0.add((RegularTimePeriod) hour1, (-591.9368));
      timeSeries0.removeAgedItems(true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.removeAgedItems(true);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.getValue(0);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Hour hour0 = new Hour();
      MockDate mockDate0 = new MockDate(23, 23, 23);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      timeSeries0.setMaximumItemCount(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      MockDate mockDate0 = new MockDate(32, 32, (-115));
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 999);
      timeSeries0.add(timeSeriesDataItem0, true);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 8-May-1934 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.getIndex(hour0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer integer0 = new Integer(829);
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(integer0, "Range", (String) null, class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Range", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-3255));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", string0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      timeSeries0.getItemCount();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Hour hour0 = new Hour();
      MockDate mockDate0 = new MockDate(23, 23, 0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 0);
      Hour hour1 = new Hour(mockDate0);
      timeSeries0.add((RegularTimePeriod) hour1, (double) 0);
      RegularTimePeriod regularTimePeriod0 = hour1.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 23);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.hashCode();
      assertEquals(3, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      Date date0 = fixedMillisecond0.getStart();
      timeSeries0.add((RegularTimePeriod) hour0, (double) 53L);
      Hour hour1 = new Hour(date0);
      timeSeries0.add((RegularTimePeriod) hour1, (-591.9368));
      timeSeries0.hashCode();
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 999);
      timeSeries0.hashCode();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, " but the series already contains an observation", "]!NT}i-o2f.DK2C", (Class) null);
      timeSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("]!NT}i-o2f.DK2C", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(" but the series already contains an observation", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 999, 999, 999, 29, 23);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, (String) null, (String) null, class0);
      timeSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 999);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.addOrUpdate((RegularTimePeriod) millisecond0, (-1371.195));
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1, timeSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 999);
      Object object0 = timeSeries0.clone();
      boolean boolean0 = timeSeries0.equals(object0);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 0);
      Class<Integer> class1 = Integer.class;
      TimeSeries timeSeries1 = new TimeSeries(hour0, class1);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(timeSeries0.equals((Object)timeSeries1));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      timeSeries1.setMaximumItemCount(0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(0, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.setMaximumItemAge(2095204L);
      TimeSeries timeSeries1 = new TimeSeries(millisecond0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(2095204L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      timeSeries1.setRangeDescription((String) null);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(boolean0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Class<TimeSeries> class1 = TimeSeries.class;
      TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0, "Ji@\"XdwKq?kUUQ", "Ji@\"XdwKq?kUUQ", class1);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Ji@\"XdwKq?kUUQ", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Ji@\"XdwKq?kUUQ", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "A@", "A@", class0);
      Year year0 = new Year();
      boolean boolean0 = timeSeries0.equals(year0);
      assertEquals("A@", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
      assertEquals("A@", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      Date date0 = fixedMillisecond0.getStart();
      timeSeries0.add((RegularTimePeriod) hour0, (double) 53L);
      Hour hour1 = new Hour(date0);
      timeSeries0.createCopy((RegularTimePeriod) hour1, (RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2664);
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(7, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3502.889773196031), 2778.30618958301, false, true);
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-8), (-3643));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Week week0 = new Week();
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(Integer.MAX_VALUE, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Integer> class0 = Integer.TYPE;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 1365.0);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Year year0 = new Year();
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries(year0, class0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 0.5);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.clear();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.clear();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      MockDate mockDate0 = new MockDate(32, 32, (-115));
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 999);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.setMaximumItemAge(3023L);
      timeSeries0.removeAgedItems((long) 999, false);
      assertEquals(3023L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      MockDate mockDate0 = new MockDate(32, 32, (-115));
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 999);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.setMaximumItemAge(3023L);
      timeSeries0.removeAgedItems((long) 999, true);
      assertEquals(3023L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      MockDate mockDate0 = new MockDate(32, 32, (-115));
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 999);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.removeAgedItems((long) 999, true);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(108L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      timeSeries0.removeAgedItems((long) 23, true);
      timeSeries0.removeAgedItems((long) 23, false);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4374L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      Date date0 = fixedMillisecond0.getStart();
      timeSeries0.add((RegularTimePeriod) hour0, (-1.0));
      Hour hour1 = new Hour(date0);
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.add((RegularTimePeriod) hour1, (Number) 0, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4374L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      Date date0 = fixedMillisecond0.getStart();
      timeSeries0.add((RegularTimePeriod) hour0, (-1.0));
      Hour hour1 = new Hour(date0);
      timeSeries0.add((RegularTimePeriod) hour1, (-591.9368));
      timeSeries0.setMaximumItemAge(0L);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(108L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
      timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (-1312.49));
      timeSeries0.addAndOrUpdate(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 0, true);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      Hour hour0 = new Hour();
      Date date0 = hour0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "w?vol6D:b", "w?vol6D:b", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 0, true);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) hour0, (Number) 0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      timeSeries0.add((RegularTimePeriod) hour0, 3519.5227973);
      timeSeries0.delete(0, 0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      timeSeries0.add((RegularTimePeriod) hour0, (-211.8367));
      timeSeries0.setMaximumItemCount(1);
      timeSeries0.add(regularTimePeriod0, (-211.8367), false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Hour hour0 = new Hour();
      MockDate mockDate0 = new MockDate(23);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 0);
      Hour hour1 = new Hour(mockDate0);
      timeSeries0.add((RegularTimePeriod) hour1, 0.0);
      timeSeries0.getDataItem((RegularTimePeriod) hour0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (-328.455));
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.getValue((RegularTimePeriod) millisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Class<Second> class1 = Second.class;
      TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0, "qiZP6ZcVc~efy", "qiZP6ZcVc~efy", class1);
      timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 53L);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      Vector<Month> vector0 = new Vector<Month>(0, 370);
      Month month0 = new Month();
      vector0.add(month0);
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (-584.091));
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.getDataItem((RegularTimePeriod) millisecond0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(date0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      Year year0 = new Year();
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, (-1), (-1), 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0.0, (-416.576431114), (-416.576431114), (-276.314479788));
      TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 23, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, (-2.147483648E9), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Null 'period' argument.", (String) null, class0);
      Class class1 = timeSeries0.getTimePeriodClass();
      assertNotNull(class1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Null 'period' argument.", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.update(0, (Number) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(53L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }
}
