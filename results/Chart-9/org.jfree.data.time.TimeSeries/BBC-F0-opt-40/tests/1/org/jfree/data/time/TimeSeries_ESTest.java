/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 16:03:26 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.TextField;
import java.math.BigInteger;
import java.time.Instant;
import java.time.chrono.ChronoLocalDate;
import java.time.format.TextStyle;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.setRangeDescription("Invalid day-of-the-week code.");
      timeSeries0.hashCode();
      assertEquals("Invalid day-of-the-week code.", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Day day0 = new Day();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, class0);
      timeSeries0.setDomainDescription("Invalid day-of-the-week code.");
      timeSeries0.hashCode();
      assertEquals("Invalid day-of-the-week code.", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (-0.44576711909272404));
      TimeSeries timeSeries1 = new TimeSeries(day0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.setMaximumItemCount(2304);
      TimeSeries timeSeries1 = new TimeSeries(day0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(2304, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.setMaximumItemAge(25L);
      TimeSeries timeSeries1 = new TimeSeries(day0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(25L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "The 'row' argument is out of bounds.", "The 'row' argument is out of bounds.", class0);
      timeSeries0.add((RegularTimePeriod) day0, 2228.0);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals("The 'row' argument is out of bounds.", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("The 'row' argument is out of bounds.", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries("", "SmPQ\"06n|u_ X", "SmPQ\"06n|u_ X", class0);
      timeSeries0.add((RegularTimePeriod) day0, (-1923.0));
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, (double) 1392409281320L);
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) week0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries("", " but the series already contains an observation", "", class0);
      timeSeries0.add((RegularTimePeriod) day0, (-1.0));
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 2147483646);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Quarter> class0 = Quarter.class;
      Instant instant0 = MockInstant.now();
      TimeSeries timeSeries0 = new TimeSeries(instant0, "=3irt:VXDJ6ZZt2k~$u", (String) null, class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(2147483646, Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("=3irt:VXDJ6ZZt2k~$u", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries("", "SmPQ\"06n|u_ X", "SmPQ\"06n|u_ X", class0);
      timeSeries0.add((RegularTimePeriod) day0, (-1923.0));
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, (double) 1392409281320L);
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (-1.0));
      SerialDate serialDate0 = SerialDate.createInstance(3);
      Day day1 = new Day(serialDate0);
      timeSeries0.add((RegularTimePeriod) day1, (-433.24466));
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (double) 41684L);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, (double) 41684L);
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 41684L);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (double) 41684L);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, (double) 41684L);
      timeSeries0.update(regularTimePeriod0, (Number) null);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, 1714.5826953851404);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, (double) 1392409281320L);
      timeSeries0.getValue(regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (double) 41684L);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (double) 41684L);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, (double) 41684L);
      timeSeries0.getDataItem(regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, 1714.5826953851404);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, (double) 1392409281320L);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, 0.0);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, 0.0);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "i;3", "i;3", class0);
      timeSeries0.setRangeDescription("D?Q");
      assertEquals("D?Q", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (-1.7976931348623157E308));
      Float float0 = new Float((double) 0);
      timeSeries0.update(0, (Number) float0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      Long long0 = new Long(2L);
      timeSeries0.add((RegularTimePeriod) day0, (Number) long0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2088L));
      Year year0 = new Year(mockDate0);
      Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries(year0, "1968", "1968", class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) null);
      timeSeries0.getValue(0);
      assertEquals("1968", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("1968", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2088L));
      Year year0 = new Year(mockDate0);
      Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "", class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) bigInteger0);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.getValue(0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Day day0 = new Day();
      Class<Integer> class0 = Integer.TYPE;
      TimeSeries timeSeries0 = new TimeSeries(day0, "org.jfree.data.ComparableObjectItem", "org.jfree.data.ComparableObjectItem", class0);
      timeSeries0.getTimePeriodClass();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("org.jfree.data.ComparableObjectItem", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.data.ComparableObjectItem", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Day day0 = new Day();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, class0);
      timeSeries0.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Day day0 = new Day();
      Class<TextStyle> class0 = TextStyle.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, class0);
      timeSeries0.getTimePeriodClass();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) day0, (double) 41684L);
      timeSeries0.getTimePeriod(0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      Year year0 = new Year(date0);
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null, class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Year year0 = new Year();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(year0, ".6YPypYtEBJ", ".6YPypYtEBJ", class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(".6YPypYtEBJ", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(".6YPypYtEBJ", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "i;3", "i;3", class0);
      timeSeries0.add((RegularTimePeriod) day0, 2228.0);
      timeSeries0.getNextTimePeriod();
      assertEquals("i;3", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("i;3", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.getMaximumItemAge();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, 0.0);
      timeSeries0.getItemCount();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, (String) null, "", class0);
      timeSeries0.add((RegularTimePeriod) day0, 2228.0);
      timeSeries0.getIndex(day0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries("", "SmPQ\"06n|u_ X", "SmPQ\"06n|u_ X", class0);
      timeSeries0.add((RegularTimePeriod) day0, (-1923.0));
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, (double) 1392409281320L);
      int int0 = timeSeries0.getIndex(regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, (String) null, "", class0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "", class0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, 3052.3421);
      timeSeries0.getDataItem(0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(0, 0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.createCopy(92, 92);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        timeSeries0.update(305, (Number) bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0, "Requires start >= 0.", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-2147483613), (Number) 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount(23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge(1392409281320L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      ArrayList<Day> arrayList0 = new ArrayList<Day>();
      timeSeries0.data = (List) arrayList0;
      timeSeries0.add((RegularTimePeriod) day0, (-20.0655635717));
      arrayList0.add(day0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge(1L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "Overwritten values from: ", class0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(2145L, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      ArrayList<Week> arrayList0 = new ArrayList<Week>();
      timeSeries0.data = (List) arrayList0;
      Week week0 = new Week();
      arrayList0.add(week0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems((-1875L), true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      TreeSet<TimeSeries> treeSet0 = new TreeSet<TimeSeries>();
      Vector<TimeSeries> vector0 = new Vector<TimeSeries>(treeSet0);
      vector0.add(timeSeries0);
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) day0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries(textStyle0, class0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-1858));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "(wmpi&M<}O!a3o*f", "(wmpi&M<}O!a3o*f", class0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-1513));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Quarter> class0 = Quarter.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "=3irt:VXDJ6ZZt2k~$u", "Month outside valid range.", class1);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      Stack<Day> stack0 = new Stack<Day>();
      stack0.add(day0);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      Stack<TimeSeries> stack0 = new Stack<TimeSeries>();
      stack0.add(timeSeries0);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(305);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Day day0 = new Day();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-617));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(1603, 1603);
      timeSeries1.data = null;
      // Undeclared exception!
      try { 
        timeSeries1.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries(textStyle0, class0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries("$");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getIndex(day0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) day0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Day day0 = new Day();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-197));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeries timeSeries1 = new TimeSeries(day0);
      timeSeries1.data = null;
      // Undeclared exception!
      try { 
        timeSeries1.equals(timeSeries0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) day0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete((-3), (-3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(45, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      LinkedList<TimeSeries> linkedList0 = new LinkedList<TimeSeries>();
      linkedList0.add(timeSeries0);
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(1778, 1778);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      Stack<Object> stack0 = new Stack<Object>();
      timeSeries0.data = (List) stack0;
      timeSeries0.add((RegularTimePeriod) day0, (-1.7976931348623157E308));
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2147483647
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      List list0 = timeSeries0.getItems();
      timeSeries0.data = list0;
      try { 
        timeSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (-1426.4832179525415));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Quarter> class0 = Quarter.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, (String) null, (String) null, class1);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Day day0 = new Day();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "@", "@", class0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) integer0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Day day0 = new Day();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) day0, 2228.0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) day0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      MockDate mockDate0 = new MockDate(1900);
      Week week0 = new Week(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      Float float0 = new Float((double) 1392409281320L);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) float0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries("", class0);
      Short short0 = new Short((short)8);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) short0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, (String) null, "", class0);
      timeSeries0.add((RegularTimePeriod) day0, 2228.0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      JList<String> jList0 = new JList<String>();
      List<String> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      Float float0 = new Float((-394.53918F));
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "(wmpi&M<}O!a3o*f", "(wmpi&M<}O!a3o*f", class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 0.0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Millisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (-1.0), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, (String) null, "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 2228.0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(556, day0);
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (double) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of java.lang.Object.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      JList<String> jList0 = new JList<String>();
      List<String> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, 3651.743419912);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (-1.7976931348623157E308));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0, "permitted.  Try using the addOrUpdate() method.", "permitted.  Try using the addOrUpdate() method.", class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      timeSeries0.data = (List) arrayList0;
      arrayList0.add((Object) day0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, 0.0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "bzPk92{,wchod", "Month outside valid range.", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, 0.0);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Day day0 = new Day();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "@", "@", class0);
      timeSeries0.delete((-551), Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("@", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("@", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-3), (-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) day0, 2228.0);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, 2228.0);
      timeSeries0.removeAgedItems(false);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.removeAgedItems(true);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Day day0 = new Day();
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries("Invalid day-of-the-week code.", class0);
      timeSeries0.setMaximumItemCount(0);
      Integer integer0 = new Integer(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) integer0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "", class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(0, hour0);
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, "]P/kNPO6!Yys%fFj>^~", "]P/kNPO6!Yys%fFj>^~", class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, 2024.5160436065712);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Day day0 = new Day();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, class0);
      timeSeries0.getIndex(day0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, long0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (-2386.9702075), false);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "", class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Minute minute0 = new Minute(1725, 1725, 3, 3, 2856);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(1725);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1725, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Day day0 = new Day();
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "Invalid day-of-the-week code.", "Invalid day-of-the-week code.", class0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Invalid day-of-the-week code.", string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Invalid day-of-the-week code.", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (-1730.7));
      timeSeries0.add(timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(2175, 2175);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2175, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (-1.7976931348623157E308));
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, (-1.7976931348623157E308));
      timeSeries0.hashCode();
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Week week0 = new Week(1, 1);
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, (String) null, (String) null, class0);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, (String) null, "", class0);
      timeSeries0.add((RegularTimePeriod) day0, 2228.0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      timeSeries1.addOrUpdate((RegularTimePeriod) day0, (double) (-12219292800000L));
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, (String) null, "", class0);
      timeSeries0.add((RegularTimePeriod) day0, 2228.0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) integer0);
      timeSeries0.add(timeSeriesDataItem0, true);
      TimeSeries timeSeries1 = new TimeSeries(day0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeries timeSeries1 = new TimeSeries(month0);
      timeSeries0.setRangeDescription("|R6'M{@L'km)ff");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("|R6'M{@L'km)ff", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries1 = new TimeSeries(day0, "", "", class0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Day day0 = new Day();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, class0);
      TimeSeries timeSeries1 = new TimeSeries("Invalid day-of-the-week code.", "", "", class0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getDomainDescription());
      assertFalse(boolean0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Week week0 = new Week(1, 1);
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, (String) null, (String) null, class0);
      boolean boolean0 = timeSeries0.equals(week0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(boolean0);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Day day0 = new Day();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, class0);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, 0.0);
      timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, (String) null, "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Day day0 = new Day();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Day day0 = new Day();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(Integer.MAX_VALUE, (-999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      Year year0 = new Year(date0);
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null, class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-814), 1624);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Week week0 = new Week(1, 1);
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, (String) null, (String) null, class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) day0, 2228.0);
      timeSeries0.delete((RegularTimePeriod) day0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.delete((RegularTimePeriod) day0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, (String) null, "", class0);
      timeSeries0.add((RegularTimePeriod) day0, 2212.298032488327);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.clear();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (-3958.9661358720423));
      Class<Minute> class0 = Minute.class;
      timeSeries0.timePeriodClass = class0;
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.removeAgedItems(1392409281320L, true);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (-3958.96613587204));
      Class<Minute> class0 = Minute.class;
      timeSeries0.timePeriodClass = class0;
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.removeAgedItems(1392409281320L, false);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, 1714.5826953851404);
      timeSeries0.removeAgedItems(1392409281320L, true);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.removeAgedItems(1L, true);
      timeSeries0.removeAgedItems(1010L, true);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, 4784.315255200172);
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, 1793.9011738);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, 4783.376956);
      timeSeries0.setMaximumItemAge(0L);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, (String) null, "", class0);
      Long long0 = new Long(46L);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Second second0 = new Second();
      Class<TextField> class0 = TextField.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, class0);
      Millisecond millisecond0 = new Millisecond(2540, second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 0);
      TimeSeries timeSeries1 = new TimeSeries(second0);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (double) 41684L);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(1, timeSeries1.getItemCount());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (double) 41684L);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) day0, (Number) null);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = new Integer(131);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) month0, (Number) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) integer0);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, 1.7976931348623157E308);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 1.7976931348623157E308);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, 1714.5826953851404);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (-2658.297));
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, 1714.5826953851404);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (-2658.297));
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Day day0 = new Day();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, 757.0);
      timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2145L);
      Minute minute0 = new Minute(mockDate0);
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Day day0 = new Day();
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "Invalid day-of-the-week code.", "Invalid day-of-the-week code.", class0);
      Second second0 = new Second();
      timeSeries0.getValue((RegularTimePeriod) second0);
      assertEquals("Invalid day-of-the-week code.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Invalid day-of-the-week code.", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, 0.0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries1 = new TimeSeries(day0, "", (String) null, class0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Week week0 = new Week(1, 1);
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, (String) null, (String) null, class0);
      timeSeries0.getDataItem((RegularTimePeriod) week0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2088L));
      Year year0 = new Year(mockDate0);
      Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-2088L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.setMaximumItemAge(24L);
      TimeSeries timeSeries1 = new TimeSeries(day0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(24L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-248));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.setMaximumItemCount(1);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      Float float0 = new Float(1910.23);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.setMaximumItemCount(425);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(425, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
      timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      List list0 = timeSeries0.getItems();
      timeSeries0.data = list0;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) integer0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      Float float0 = new Float((double) 0);
      // Undeclared exception!
      try { 
        timeSeries0.update(0, (Number) float0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2145L);
      Minute minute0 = new Minute(mockDate0);
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, "", "", class0);
      timeSeries0.setDomainDescription("");
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }
}
